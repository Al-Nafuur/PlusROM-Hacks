------- FILE ex1-basic_color.bas.asm LEVEL 1 PASS 2
      1  4ffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; VCS.H
      2  5000 ????						; Version 1.05, 13/November/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_VCS =	105
      5  5000 ????
      6  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines hardware registers and memory mapping for the
     11  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  5000 ????						; with your views.  Please contribute, if you think you can improve this
     19  5000 ????						; file!
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify VCS.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  5000 ????						;			 readability issue, and binary compatibility with disassembled
     30  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  5000 ????						;			 which was broken by the use of segments in this file, as
     33  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  5000 ????						;						   it is safe to leave it undefined, and the base address will
     38  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  5000 ????						;			  - register definitions are now generated through assignment
     41  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  5000 ????						;			    address architecture.
     43  5000 ????						; 1.0	22/MAR/2003		Initial release
     44  5000 ????
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????
     48  5000 ????						; TIA_BASE_ADDRESS
     49  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  5000 ????						; Normally 0, the base address should (externally, before including this file)
     51  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  5000 ????						; < $40 as a bankswitch.
     54  5000 ????
     55  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  5000 ????			  -TIA_BASE_ADDRESS =	0
     57  5000 ????				      ENDIF
     58  5000 ????
     59  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  5000 ????						; *OR* by declaring the label before including this file, eg:
     62  5000 ????						; TIA_BASE_ADDRESS = $40
     63  5000 ????						;   include "vcs.h"
     64  5000 ????
     65  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  5000 ????						; for the mirrored ROM hardware registers.
     68  5000 ????
     69  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  5000 ????
     73  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  5000 ????				      ENDIF
     76  5000 ????
     77  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  5000 ????				      ENDIF
     80  5000 ????
     81  5000 ????						;-------------------------------------------------------------------------------
     82  5000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  5000 ????				      SEG
    199  5000 ????
    200  5000 ????						; EOF
------- FILE ex1-basic_color.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; MACRO.H
      2  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_MACRO =	105
      5  5000 ????
      6  5000 ????						;
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  5000 ????						; It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  5000 ????						; contents, or would like to add something, please write to me
     17  5000 ????						; (atari2600@taswegian.com) with your contribution.
     18  5000 ????						;
     19  5000 ????						; Latest Revisions...
     20  5000 ????						;
     21  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  5000 ????						;			    used for code assembly.
     24  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  5000 ????						;
     26  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  5000 ????						;
     28  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  5000 ????						;			   (standardised macro for vertical synch code)
     30  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  5000 ????						; 1.0	22/MAR/2003		Initial release
     33  5000 ????
     34  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  5000 ????						;   registers and require them to be defined first).
     39  5000 ????
     40  5000 ????						; Available macros...
     41  5000 ????						;   SLEEP n		 - sleep for n cycles
     42  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????						; SLEEP duration
     48  5000 ????						; Original author: Thomas Jentzsch
     49  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  5000 ????						; useful for code where precise timing is required.
     51  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  5000 ????
     55  5000 ????				      MAC	sleep
     56  5000 ????			   .CYCLES    SET	{1}
     57  5000 ????
     58  5000 ????				      IF	.CYCLES < 2
     59  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  5000 ????				      ERR
     61  5000 ????				      ENDIF
     62  5000 ????
     63  5000 ????				      IF	.CYCLES & 1
     64  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  5000 ????				      nop	0
     66  5000 ????				      ELSE
     67  5000 ????				      bit	VSYNC
     68  5000 ????				      ENDIF
     69  5000 ????			   .CYCLES    SET	.CYCLES - 3
     70  5000 ????				      ENDIF
     71  5000 ????
     72  5000 ????				      REPEAT	.CYCLES / 2
     73  5000 ????				      nop
     74  5000 ????				      REPEND
     75  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  5000 ????
     77  5000 ????						;-------------------------------------------------------------------------------
     78  5000 ????						; VERTICAL_SYNC
     79  5000 ????						; Original author: Manuel Polik
     80  5000 ????						; Inserts the code required for a proper 3 scannline 
     81  5000 ????						; vertical sync sequence
     82  5000 ????						;
     83  5000 ????						; Note: Alters the accumulator
     84  5000 ????						;
     85  5000 ????						; IN:
     86  5000 ????						; OUT: A = 1
     87  5000 ????
     88  5000 ????				      MAC	vertical_sync
     89  5000 ????				      LDA	#$02	; A = VSYNC enable
     90  5000 ????				      STA	WSYNC	; Finish current line
     91  5000 ????				      STA	VSYNC	; Start vertical sync
     92  5000 ????				      STA	WSYNC	; 1st line vertical sync
     93  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  5000 ????				      LSR		; A = VSYNC disable
     95  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  5000 ????				      STA	VSYNC	; Stop vertical sync
     97  5000 ????				      ENDM
     98  5000 ????
     99  5000 ????						;-------------------------------------------------------------------------------
    100  5000 ????						; CLEAN_START
    101  5000 ????						; Original author: Andrew Davie
    102  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  5000 ????						; Use as very first section of code on boot (ie: at reset)
    106  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  5000 ????
    108  5000 ????				      MAC	clean_start
    109  5000 ????				      sei
    110  5000 ????				      cld
    111  5000 ????
    112  5000 ????				      ldx	#0
    113  5000 ????				      txa
    114  5000 ????				      tay
    115  5000 ????			   .CLEAR_STACK dex
    116  5000 ????				      txs
    117  5000 ????				      pha
    118  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  5000 ????
    120  5000 ????				      ENDM
    121  5000 ????
    122  5000 ????						;-------------------------------------------------------
    123  5000 ????						; SET_POINTER
    124  5000 ????						; Original author: Manuel Rotschkar
    125  5000 ????						;
    126  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  5000 ????						;
    128  5000 ????						; Usage: SET_POINTER pointer, address
    129  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  5000 ????						;
    131  5000 ????						; Note: Alters the accumulator, NZ flags
    132  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  5000 ????						; IN 2: absolute address
    134  5000 ????
    135  5000 ????				      MAC	set_pointer
    136  5000 ????			   .POINTER   SET	{1}
    137  5000 ????			   .ADDRESS   SET	{2}
    138  5000 ????
    139  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  5000 ????				      STA	.POINTER	; Store in pointer
    141  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  5000 ????
    144  5000 ????				      ENDM
    145  5000 ????
    146  5000 ????						; EOF
------- FILE ex1-basic_color.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; VCS.H
      2  5000 ????						; Version 1.05, 13/November/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_VCS =	105
      5  5000 ????
      6  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines hardware registers and memory mapping for the
     11  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  5000 ????						; with your views.  Please contribute, if you think you can improve this
     19  5000 ????						; file!
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify VCS.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  5000 ????						;			 readability issue, and binary compatibility with disassembled
     30  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  5000 ????						;			 which was broken by the use of segments in this file, as
     33  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  5000 ????						;						   it is safe to leave it undefined, and the base address will
     38  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  5000 ????						;			  - register definitions are now generated through assignment
     41  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  5000 ????						;			    address architecture.
     43  5000 ????						; 1.0	22/MAR/2003		Initial release
     44  5000 ????
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????
     48  5000 ????						; TIA_BASE_ADDRESS
     49  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  5000 ????						; Normally 0, the base address should (externally, before including this file)
     51  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  5000 ????						; < $40 as a bankswitch.
     54  5000 ????
     55  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  5000 ????			  -TIA_BASE_ADDRESS =	0
     57  5000 ????				      ENDIF
     58  5000 ????
     59  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  5000 ????						; *OR* by declaring the label before including this file, eg:
     62  5000 ????						; TIA_BASE_ADDRESS = $40
     63  5000 ????						;   include "vcs.h"
     64  5000 ????
     65  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  5000 ????						; for the mirrored ROM hardware registers.
     68  5000 ????
     69  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  5000 ????
     73  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  5000 ????				      ENDIF
     76  5000 ????
     77  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  5000 ????				      ENDIF
     80  5000 ????
     81  5000 ????						;-------------------------------------------------------------------------------
     82  5000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  5000 ????				      SEG
    199  5000 ????
    200  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; MACRO.H
      2  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  5000 ????
      4  5000 ????	       00 69	   VERSION_MACRO =	105
      5  5000 ????
      6  5000 ????						;
      7  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  5000 ????						;
     10  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  5000 ????						; It is distributed as a companion machine-specific support package
     12  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  5000 ????						; available at at http://www.atari2600.org/dasm
     14  5000 ????						;
     15  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  5000 ????						; contents, or would like to add something, please write to me
     17  5000 ????						; (atari2600@taswegian.com) with your contribution.
     18  5000 ????						;
     19  5000 ????						; Latest Revisions...
     20  5000 ????						;
     21  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  5000 ????						;			    used for code assembly.
     24  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  5000 ????						;
     26  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  5000 ????						;
     28  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  5000 ????						;			   (standardised macro for vertical synch code)
     30  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  5000 ????						; 1.0	22/MAR/2003		Initial release
     33  5000 ????
     34  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  5000 ????						;   registers and require them to be defined first).
     39  5000 ????
     40  5000 ????						; Available macros...
     41  5000 ????						;   SLEEP n		 - sleep for n cycles
     42  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  5000 ????
     46  5000 ????						;-------------------------------------------------------------------------------
     47  5000 ????						; SLEEP duration
     48  5000 ????						; Original author: Thomas Jentzsch
     49  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  5000 ????						; useful for code where precise timing is required.
     51  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  5000 ????
     55  5000 ????				      MAC	sleep
     56  5000 ????			   .CYCLES    SET	{1}
     57  5000 ????
     58  5000 ????				      IF	.CYCLES < 2
     59  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  5000 ????				      ERR
     61  5000 ????				      ENDIF
     62  5000 ????
     63  5000 ????				      IF	.CYCLES & 1
     64  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  5000 ????				      nop	0
     66  5000 ????				      ELSE
     67  5000 ????				      bit	VSYNC
     68  5000 ????				      ENDIF
     69  5000 ????			   .CYCLES    SET	.CYCLES - 3
     70  5000 ????				      ENDIF
     71  5000 ????
     72  5000 ????				      REPEAT	.CYCLES / 2
     73  5000 ????				      nop
     74  5000 ????				      REPEND
     75  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  5000 ????
     77  5000 ????						;-------------------------------------------------------------------------------
     78  5000 ????						; VERTICAL_SYNC
     79  5000 ????						; Original author: Manuel Polik
     80  5000 ????						; Inserts the code required for a proper 3 scannline 
     81  5000 ????						; vertical sync sequence
     82  5000 ????						;
     83  5000 ????						; Note: Alters the accumulator
     84  5000 ????						;
     85  5000 ????						; IN:
     86  5000 ????						; OUT: A = 1
     87  5000 ????
     88  5000 ????				      MAC	vertical_sync
     89  5000 ????				      LDA	#$02	; A = VSYNC enable
     90  5000 ????				      STA	WSYNC	; Finish current line
     91  5000 ????				      STA	VSYNC	; Start vertical sync
     92  5000 ????				      STA	WSYNC	; 1st line vertical sync
     93  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  5000 ????				      LSR		; A = VSYNC disable
     95  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  5000 ????				      STA	VSYNC	; Stop vertical sync
     97  5000 ????				      ENDM
     98  5000 ????
     99  5000 ????						;-------------------------------------------------------------------------------
    100  5000 ????						; CLEAN_START
    101  5000 ????						; Original author: Andrew Davie
    102  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  5000 ????						; Use as very first section of code on boot (ie: at reset)
    106  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  5000 ????
    108  5000 ????				      MAC	clean_start
    109  5000 ????				      sei
    110  5000 ????				      cld
    111  5000 ????
    112  5000 ????				      ldx	#0
    113  5000 ????				      txa
    114  5000 ????				      tay
    115  5000 ????			   .CLEAR_STACK dex
    116  5000 ????				      txs
    117  5000 ????				      pha
    118  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  5000 ????
    120  5000 ????				      ENDM
    121  5000 ????
    122  5000 ????						;-------------------------------------------------------
    123  5000 ????						; SET_POINTER
    124  5000 ????						; Original author: Manuel Rotschkar
    125  5000 ????						;
    126  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  5000 ????						;
    128  5000 ????						; Usage: SET_POINTER pointer, address
    129  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  5000 ????						;
    131  5000 ????						; Note: Alters the accumulator, NZ flags
    132  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  5000 ????						; IN 2: absolute address
    134  5000 ????
    135  5000 ????				      MAC	set_pointer
    136  5000 ????			   .POINTER   SET	{1}
    137  5000 ????			   .ADDRESS   SET	{2}
    138  5000 ????
    139  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  5000 ????				      STA	.POINTER	; Store in pointer
    141  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  5000 ????
    144  5000 ????				      ENDM
    145  5000 ????
    146  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   scorefade  =	1
      5  5000 ????
      6  5000 ????	       00 d5	   swdebounce =	b
      7  5000 ????
      8  5000 ????	       00 d4	   gamenumber =	a
      9  5000 ????
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE 2600basic.h
      5  5000 ????
      6  5000 ????	       00 80	   player0x   =	$80
      7  5000 ????	       00 81	   player1x   =	$81
      8  5000 ????	       00 82	   missile0x  =	$82
      9  5000 ????	       00 83	   missile1x  =	$83
     10  5000 ????	       00 84	   ballx      =	$84
     11  5000 ????
     12  5000 ????	       00 85	   objecty    =	$85
     13  5000 ????	       00 85	   player0y   =	$85
     14  5000 ????	       00 86	   player1y   =	$86
     15  5000 ????	       00 87	   missile1height =	$87
     16  5000 ????	       00 88	   missile1y  =	$88
     17  5000 ????	       00 89	   bally      =	$89
     18  5000 ????
     19  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     20  5000 ????
     21  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     22  5000 ????	       00 8a	   player0pointerlo =	$8A
     23  5000 ????	       00 8b	   player0pointerhi =	$8B
     24  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     25  5000 ????	       00 8c	   player1pointerlo =	$8C
     26  5000 ????	       00 8d	   player1pointerhi =	$8D
     27  5000 ????
     28  5000 ????	       00 8e	   player0height =	$8E
     29  5000 ????	       00 8f	   player1height =	$8F
     30  5000 ????	       00 90	   missile0height =	$90
     31  5000 ????	       00 91	   missile0y  =	$91
     32  5000 ????	       00 92	   ballheight =	$92
     33  5000 ????
     34  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     36  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     37  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     38  5000 ????
     39  5000 ????	       00 93	   score      =	$93	; $93-$95
     40  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     41  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     43  5000 ????	       00 9e	   temp3      =	$9E
     44  5000 ????	       00 9f	   temp4      =	$9F
     45  5000 ????	       00 a0	   temp5      =	$A0
     46  5000 ????	       00 a1	   temp6      =	$A1
     47  5000 ????
     48  5000 ????	       00 a2	   rand       =	$A2
     49  5000 ????	       00 a3	   scorecolor =	$A3
     50  5000 ????
     51  5000 ????	       00 a4	   var0       =	$A4
     52  5000 ????	       00 a5	   var1       =	$A5
     53  5000 ????	       00 a6	   var2       =	$A6
     54  5000 ????	       00 a7	   var3       =	$A7
     55  5000 ????	       00 a8	   var4       =	$A8
     56  5000 ????	       00 a9	   var5       =	$A9
     57  5000 ????	       00 aa	   var6       =	$AA
     58  5000 ????	       00 ab	   var7       =	$AB
     59  5000 ????	       00 ac	   var8       =	$AC
     60  5000 ????	       00 ad	   var9       =	$AD
     61  5000 ????	       00 ae	   var10      =	$AE
     62  5000 ????	       00 af	   var11      =	$AF
     63  5000 ????	       00 b0	   var12      =	$B0
     64  5000 ????	       00 b1	   var13      =	$B1
     65  5000 ????	       00 b2	   var14      =	$B2
     66  5000 ????	       00 b3	   var15      =	$B3
     67  5000 ????	       00 b4	   var16      =	$B4
     68  5000 ????	       00 b5	   var17      =	$B5
     69  5000 ????	       00 b6	   var18      =	$B6
     70  5000 ????	       00 b7	   var19      =	$B7
     71  5000 ????	       00 b8	   var20      =	$B8
     72  5000 ????	       00 b9	   var21      =	$B9
     73  5000 ????	       00 ba	   var22      =	$BA
     74  5000 ????	       00 bb	   var23      =	$BB
     75  5000 ????	       00 bc	   var24      =	$BC
     76  5000 ????	       00 bd	   var25      =	$BD
     77  5000 ????	       00 be	   var26      =	$BE
     78  5000 ????	       00 bf	   var27      =	$BF
     79  5000 ????	       00 c0	   var28      =	$C0
     80  5000 ????	       00 c1	   var29      =	$C1
     81  5000 ????	       00 c2	   var30      =	$C2
     82  5000 ????	       00 c3	   var31      =	$C3
     83  5000 ????	       00 c4	   var32      =	$C4
     84  5000 ????	       00 c5	   var33      =	$C5
     85  5000 ????	       00 c6	   var34      =	$C6
     86  5000 ????	       00 c7	   var35      =	$C7
     87  5000 ????	       00 c8	   var36      =	$C8
     88  5000 ????	       00 c9	   var37      =	$C9
     89  5000 ????	       00 ca	   var38      =	$CA
     90  5000 ????	       00 cb	   var39      =	$CB
     91  5000 ????	       00 cc	   var40      =	$CC
     92  5000 ????	       00 cd	   var41      =	$CD
     93  5000 ????	       00 ce	   var42      =	$CE
     94  5000 ????	       00 cf	   var43      =	$CF
     95  5000 ????	       00 d0	   var44      =	$D0
     96  5000 ????	       00 d1	   var45      =	$D1
     97  5000 ????	       00 d2	   var46      =	$D2
     98  5000 ????	       00 d3	   var47      =	$D3
     99  5000 ????
    100  5000 ????	       00 d4	   A	      =	$d4
    101  5000 ????	       00 d4	   a	      =	$d4
    102  5000 ????	       00 d5	   B	      =	$d5
    103  5000 ????	       00 d5	   b	      =	$d5
    104  5000 ????	       00 d6	   C	      =	$d6
    105  5000 ????	       00 d6	   c	      =	$d6
    106  5000 ????	       00 d7	   D	      =	$d7
    107  5000 ????	       00 d7	   d	      =	$d7
    108  5000 ????	       00 d8	   E	      =	$d8
    109  5000 ????	       00 d8	   e	      =	$d8
    110  5000 ????	       00 d9	   F	      =	$d9
    111  5000 ????	       00 d9	   f	      =	$d9
    112  5000 ????	       00 da	   G	      =	$da
    113  5000 ????	       00 da	   g	      =	$da
    114  5000 ????	       00 db	   H	      =	$db
    115  5000 ????	       00 db	   h	      =	$db
    116  5000 ????	       00 dc	   I	      =	$dc
    117  5000 ????	       00 dc	   i	      =	$dc
    118  5000 ????	       00 dd	   J	      =	$dd
    119  5000 ????	       00 dd	   j	      =	$dd
    120  5000 ????	       00 de	   K	      =	$de
    121  5000 ????	       00 de	   k	      =	$de
    122  5000 ????	       00 df	   L	      =	$df
    123  5000 ????	       00 df	   l	      =	$df
    124  5000 ????	       00 e0	   M	      =	$e0
    125  5000 ????	       00 e0	   m	      =	$e0
    126  5000 ????	       00 e1	   N	      =	$e1
    127  5000 ????	       00 e1	   n	      =	$e1
    128  5000 ????	       00 e2	   O	      =	$e2
    129  5000 ????	       00 e2	   o	      =	$e2
    130  5000 ????	       00 e3	   P	      =	$e3
    131  5000 ????	       00 e3	   p	      =	$e3
    132  5000 ????	       00 e4	   Q	      =	$e4
    133  5000 ????	       00 e4	   q	      =	$e4
    134  5000 ????	       00 e5	   R	      =	$e5
    135  5000 ????	       00 e5	   r	      =	$e5
    136  5000 ????	       00 e6	   S	      =	$e6
    137  5000 ????	       00 e6	   s	      =	$e6
    138  5000 ????	       00 e7	   T	      =	$e7
    139  5000 ????	       00 e7	   t	      =	$e7
    140  5000 ????	       00 e8	   U	      =	$e8
    141  5000 ????	       00 e8	   u	      =	$e8
    142  5000 ????	       00 e9	   V	      =	$e9
    143  5000 ????	       00 e9	   v	      =	$e9
    144  5000 ????	       00 ea	   W	      =	$ea
    145  5000 ????	       00 ea	   w	      =	$ea
    146  5000 ????	       00 eb	   X	      =	$eb
    147  5000 ????	       00 eb	   x	      =	$eb
    148  5000 ????	       00 ec	   Y	      =	$ec
    149  5000 ????	       00 ec	   y	      =	$ec
    150  5000 ????	       00 ed	   Z	      =	$ed
    151  5000 ????	       00 ed	   z	      =	$ed
    152  5000 ????
    153  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    154  5000 ????	       00 ef	   playfieldpos =	$ef
    155  5000 ????
    156  5000 ????						; available for other uses, or if unused, provide more stack space
    157  5000 ????
    158  5000 ????	       00 f0	   aux1       =	$f0
    159  5000 ????	       00 f1	   aux2       =	$f1
    160  5000 ????	       00 f2	   aux3       =	$f2
    161  5000 ????	       00 f3	   aux4       =	$f3
    162  5000 ????	       00 f4	   aux5       =	$f4
    163  5000 ????	       00 f5	   aux6       =	$f5
    164  5000 ????
    165  5000 ????						; playfield color/height pointers
    166  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    167  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    168  5000 ????						; the above pointers are the same because if color and height are both used together,
    169  5000 ????						; they must used absolute indexed and cannot use pointers
    170  5000 ????
    171  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    172  5000 ????						; upper 3 bits of $f2 contain the number of lives
    173  5000 ????	       00 f4	   lifecolor  =	$f4
    174  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    175  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  5000 ????
    177  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    178  5000 ????	       00 f3	   pfscore2   =	$f3
    179  5000 ????	       00 f4	   pfscorecolor =	$f4
    180  5000 ????
    181  5000 ????	       00 f6	   stack1     =	$f6
    182  5000 ????	       00 f7	   stack2     =	$f7
    183  5000 ????	       00 f8	   stack3     =	$f8
    184  5000 ????	       00 f9	   stack4     =	$f9
    185  5000 ????						; the stack bytes above may be used in the kernel
    186  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  5000 ????
    188  5000 ????				      MAC	return
    189  5000 ????				      ifnconst	bankswitch
    190  5000 ????				      rts
    191  5000 ????				      else
    192  5000 ????				      jmp	BS_return
    193  5000 ????				      endif
    194  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    195  5000 ????
    196  5000 ????			  -	      ifconst	superchip
    197  5000 ????			  -playfieldbase =	$10D0
    198  5000 ????			  -	      include	superchip.h
    199  5000 ????				      else
    200  5000 ????	       00 a4	   playfieldbase =	$A4
    201  5000 ????				      endif
    202  5000 ????
    203  5000 ????				      ifnconst	pfhalfwidth
    204  5000 ????	       00 04	   pfwidth    =	4
    205  5000 ????	       00 0e	   PF1L       =	PF1
    206  5000 ????	       00 0f	   PF2L       =	PF2
    207  5000 ????	       00 0e	   PF1R       =	PF1
    208  5000 ????	       00 0f	   PF2R       =	PF2
    209  5000 ????	       00 00	   pfadjust   =	0
    210  5000 ????			  -	      else
    211  5000 ????			  -pfwidth    =	2
    212  5000 ????			  -	      ifconst	pfcenter
    213  5000 ????			  -PF1L       =	$3F	; no effect
    214  5000 ????			  -PF2L       =	PF2
    215  5000 ????			  -PF1R       =	$3F
    216  5000 ????			  -PF2R       =	PF2	; no effect
    217  5000 ????			  -pfadjust   =	1
    218  5000 ????			  -	      else
    219  5000 ????			  -PF1L       =	PF1
    220  5000 ????			  -PF2L       =	PF2
    221  5000 ????			  -PF1R       =	$3F	; no effect
    222  5000 ????			  -PF2R       =	$3F	; no effect
    223  5000 ????			  -pfadjust   =	0
    224  5000 ????			  -	      endif
    225  5000 ????				      endif
    226  5000 ????
    227  5000 ????						; define playfield start based on height
    228  5000 ????				      ifnconst	pfres
    229  5000 ????	       00 a4	   playfield  =	playfieldbase
    230  5000 ????			  -	      else
    231  5000 ????			  -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  5000 ????				      endif
------- FILE ex1-basic_color.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 20	   bscode_length =	32
      4  5000 ????	       00 01	   scorefade  =	1
      5  5000 ????
      6  5000 ????	       00 d5	   swdebounce =	b
      7  5000 ????
      8  5000 ????	       00 d4	   gamenumber =	a
      9  5000 ????
     10  5000 ????	       00 03	   bs_mask    =	3
     11  5000 ????	       00 10	   bankswitch =	16
     12  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
------- FILE ex1-basic_color.bas.asm
      6  5000 ????				      ifconst	bankswitch
      7  5000 ????			  -	      if	bankswitch == 8
      8  5000 ????			  -	      ORG	$1000
      9  5000 ????			  -	      RORG	$D000
     10  5000 ????				      endif
     11  5000 ????				      if	bankswitch == 16
     12  1000					      ORG	$1000
     13  1000					      RORG	$9000
     14  1000					      endif
     15  1000				  -	      if	bankswitch == 32
     16  1000				  -	      ORG	$1000
     17  1000				  -	      RORG	$1000
     18  1000					      endif
     19  1000				  -	      if	bankswitch == 64
     20  1000				  -	      ORG	$1000
     21  1000				  -	      RORG	$1000
     22  1000					      endif
     23  1000				  -	      else
     24  1000				  -	      ORG	$F000
     25  1000					      endif
     26  1000
     27  1000					      ifconst	bankswitch_hotspot
     28  1000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  1000				  -	      .byte	0	; stop unexpected bankswitches
     30  1000					      endif
     31  1000					      endif
     32  1000				   game
     33  1000				   .
     34  1000							;
     35  1000
     36  1000				   .L00 		;  rem *** any romsize should work
     37  1000
     38  1000				   .L01 		;  set romsize 16k
     39  1000
     40  1000				   .
     41  1000							;
     42  1000
     43  1000				   .L02 		;  rem *** The selected game number. The game selection minikernel displays 
     44  1000
     45  1000				   .L03 		;  rem *** this variable
     46  1000
     47  1000				   .L04 		;  dim gamenumber = a
     48  1000
     49  1000				   .
     50  1000							;
     51  1000
     52  1000				   .L05 		;  rem *** this debounce variable is used to slow down the game number selection
     53  1000
     54  1000				   .L06 		;  dim swdebounce = b
     55  1000
     56  1000				   .
     57  1000							;
     58  1000
     59  1000				   .L07 		;  rem *** this turns on the score fading effect. it looks especially pretty
     60  1000
     61  1000				   .L08 		;  rem *** if you do a "scorecolor=scorecolor+1" every 2nd or 4th frame.
     62  1000
     63  1000				   .L09 		;  const scorefade = 1
     64  1000
     65  1000				   .
     66  1000							;
     67  1000
     68  1000				   .L010		;  scorecolor = $1a
     69  1000
     70  1000		       a9 1a		      LDA	#$1a
     71  1002		       85 a3		      STA	scorecolor
     72  1004				   .
     73  1004							;
     74  1004
     75  1004				   .L011		;  swdebounce = 0
     76  1004
     77  1004		       a9 00		      LDA	#0
     78  1006		       85 d5		      STA	swdebounce
     79  1008				   .L012		;  gamenumber = 1
     80  1008
     81  1008		       a9 01		      LDA	#1
     82  100a		       85 d4		      STA	gamenumber
     83  100c				   .
     84  100c							;
     85  100c
     86  100c				   .titlepage
     87  100c							; titlepage
     88  100c
     89  100c				   .L013		;  gosub titledrawscreen bank2
     90  100c
     91  100c		       85 ee		      sta	temp7
     92  100e		       a9 90		      lda	#>(ret_point1-1)
     93  1010		       48		      pha
     94  1011		       a9 23		      lda	#<(ret_point1-1)
     95  1013		       48		      pha
     96  1014		       a9 af		      lda	#>(.titledrawscreen-1)
     97  1016		       48		      pha
     98  1017		       a9 ff		      lda	#<(.titledrawscreen-1)
     99  1019		       48		      pha
    100  101a		       a5 ee		      lda	temp7
    101  101c		       48		      pha
    102  101d		       8a		      txa
    103  101e		       48		      pha
    104  101f		       a2 02		      ldx	#2
    105  1021		       4c eb ff 	      jmp	BS_jsr
    106  1024				   ret_point1
    107  1024				   .L014		;  if joy0fire  ||  switchreset then goto gamestart
    108  1024
    109  1024		       24 0c		      bit	INPT4
    110  1026		       30 03		      BMI	.skipL014
    111  1028				   .condpart0
    112  1028		       4c 32 90 	      jmp	.condpart1
    113  102b				   .skipL014
    114  102b		       a9 01		      lda	#1
    115  102d		       2c 82 02 	      bit	SWCHB
    116  1030		       d0 03		      BNE	.skip0OR
    117  1032				   .condpart1
    118  1032		       4c 65 90 	      jmp	.gamestart
    119  1035
    120  1035				   .skip0OR
    121  1035				   .L015		;  if !switchselect then swdebounce = 0
    122  1035
    123  1035		       a9 02		      lda	#2
    124  1037		       2c 82 02 	      bit	SWCHB
    125  103a		       f0 04		      BEQ	.skipL015
    126  103c				   .condpart2
    127  103c		       a9 00		      LDA	#0
    128  103e		       85 d5		      STA	swdebounce
    129  1040				   .skipL015
    130  1040				   .L016		;  if swdebounce > 0 then swdebounce = swdebounce - 1 :  goto titlepage
    131  1040
    132  1040		       a9 00		      LDA	#0
    133  1042		       c5 d5		      CMP	swdebounce
    134  1044		       b0 05		      BCS	.skipL016
    135  1046				   .condpart3
    136  1046		       c6 d5		      DEC	swdebounce
    137  1048		       4c 0c 90 	      jmp	.titlepage
    138  104b
    139  104b				   .skipL016
    140  104b				   .L017		;  if switchselect then swdebounce = 30 :  gamenumber = gamenumber + 1 : if gamenumber = 21 then gamenumber = 1
    141  104b
    142  104b		       a9 02		      lda	#2
    143  104d		       2c 82 02 	      bit	SWCHB
    144  1050		       d0 10		      BNE	.skipL017
    145  1052				   .condpart4
    146  1052		       a9 1e		      LDA	#30
    147  1054		       85 d5		      STA	swdebounce
    148  1056		       e6 d4		      INC	gamenumber
    149  1058		       a5 d4		      LDA	gamenumber
    150  105a		       c9 15		      CMP	#21
    151  105c		       d0 04		      BNE	.skip4then
    152  105e				   .condpart5
    153  105e		       a9 01		      LDA	#1
    154  1060		       85 d4		      STA	gamenumber
    155  1062				   .skip4then
    156  1062				   .skipL017
    157  1062				   .L018		;  goto titlepage
    158  1062
    159  1062		       4c 0c 90 	      jmp	.titlepage
    160  1065
    161  1065				   .
    162  1065							;
    163  1065
    164  1065				   .L019		;  rem *** Our fake game start. If you move the joystick it goes back to the
    165  1065
    166  1065				   .L020		;  rem *** title screen.
    167  1065
    168  1065				   .gamestart
    169  1065							; gamestart
    170  1065
    171  1065				   .L021		;  drawscreen
    172  1065
    173  1065		       85 ee		      sta	temp7
    174  1067		       a9 90		      lda	#>(ret_point2-1)
    175  1069		       48		      pha
    176  106a		       a9 7c		      lda	#<(ret_point2-1)
    177  106c		       48		      pha
    178  106d		       a9 f4		      lda	#>(drawscreen-1)
    179  106f		       48		      pha
    180  1070		       a9 35		      lda	#<(drawscreen-1)
    181  1072		       48		      pha
    182  1073		       a5 ee		      lda	temp7
    183  1075		       48		      pha
    184  1076		       8a		      txa
    185  1077		       48		      pha
    186  1078		       a2 04		      ldx	#4
    187  107a		       4c eb ff 	      jmp	BS_jsr
    188  107d				   ret_point2
    189  107d				   .L022		;  if joy0left  ||  joy0right then goto titlepage
    190  107d
    191  107d		       2c 80 02 	      bit	SWCHA
    192  1080		       70 03		      BVS	.skipL022
    193  1082				   .condpart6
    194  1082		       4c 8a 90 	      jmp	.condpart7
    195  1085				   .skipL022
    196  1085		       2c 80 02 	      bit	SWCHA
    197  1088		       30 03		      BMI	.skip1OR
    198  108a				   .condpart7
    199  108a		       4c 0c 90 	      jmp	.titlepage
    200  108d
    201  108d				   .skip1OR
    202  108d				   .L023		;  if joy0up  ||  joy0down then goto titlepage
    203  108d
    204  108d		       a9 10		      lda	#$10
    205  108f		       2c 80 02 	      bit	SWCHA
    206  1092		       d0 03		      BNE	.skipL023
    207  1094				   .condpart8
    208  1094		       4c 9e 90 	      jmp	.condpart9
    209  1097				   .skipL023
    210  1097		       a9 20		      lda	#$20
    211  1099		       2c 80 02 	      bit	SWCHA
    212  109c		       d0 03		      BNE	.skip2OR
    213  109e				   .condpart9
    214  109e		       4c 0c 90 	      jmp	.titlepage
    215  10a1
    216  10a1				   .skip2OR
    217  10a1				   .L024		;  goto gamestart
    218  10a1
    219  10a1		       4c 65 90 	      jmp	.gamestart
    220  10a4
    221  10a4				   .
    222  10a4							;
    223  10a4
    224  10a4				   .L025		;  bank 2
    225  10a4
    226  10a4					      if	ECHO1
      3888 bytes of ROM space left in bank 1
    227  10a4					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
    228  10a4					      endif
    229  10a4		       00 01	   ECHO1      =	1
    230  1fd4					      ORG	$1FF4-bscode_length
    231  1fd4					      RORG	$9FF4-bscode_length
    232  1fd4		       a2 ff	   start_bank1 ldx	#$ff
    233  1fd6				  -	      ifconst	FASTFETCH	; using DPC+
    234  1fd6				  -	      stx	FASTFETCH
    235  1fd6					      endif
    236  1fd6		       9a		      txs
    237  1fd7				  -	      if	bankswitch == 64
    238  1fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    239  1fd7					      else
    240  1fd7		       a9 f2		      lda	#>(start-1)
    241  1fd9					      endif
    242  1fd9		       48		      pha
    243  1fda		       a9 4f		      lda	#<(start-1)
    244  1fdc		       48		      pha
    245  1fdd		       48		      pha
    246  1fde		       8a		      txa
    247  1fdf		       48		      pha
    248  1fe0		       ba		      tsx
    249  1fe1					      if	bankswitch != 64
    250  1fe1		       b5 04		      lda	4,x	; get high byte of return address
    251  1fe3		       2a		      rol
    252  1fe4		       2a		      rol
    253  1fe5		       2a		      rol
    254  1fe6		       2a		      rol
    255  1fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    256  1fe9		       aa		      tax
    257  1fea		       e8		      inx
    258  1feb				  -	      else
    259  1feb				  -	      lda	4,x	; get high byte of return address
    260  1feb				  -	      tay
    261  1feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    262  1feb				  -	      sta	4,x
    263  1feb				  -	      tya
    264  1feb				  -	      lsr
    265  1feb				  -	      lsr
    266  1feb				  -	      lsr
    267  1feb				  -	      lsr
    268  1feb				  -	      tax
    269  1feb				  -	      inx
    270  1feb					      endif
    271  1feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    272  1fee		       68		      pla
    273  1fef		       aa		      tax
    274  1ff0		       68		      pla
    275  1ff1		       60		      rts
    276  1ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    277  1ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    278  1ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    279  1ff2					      endif
    280  1ffc					      ORG	$1FFC
    281  1ffc					      RORG	$9FFC
    282  1ffc		       d4 9f		      .word.w	start_bank1
    283  1ffe		       d4 9f		      .word.w	start_bank1
    284  2000					      ORG	$2000
    285  2000					      RORG	$B000
    286  2000				   .L026		;  rem *** We're putting the title kernel here, but it can go in any bank you
    287  2000
    288  2000				   .L027		;  rem *** like. Just don't let your program flow accidentally fall into the
    289  2000
    290  2000				   .L028		;  rem *** line below.
    291  2000
    292  2000				   .L029		;  asm
    293  2000
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 2
      0  2000					      include	"titlescreen/asm/titlescreen.asm"
      1  2000
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/layoutmacros.asm"
      1  2000
      2  2000							; the macro's used in the "titlescreen_layout.asm" file
      3  2000
      4  2000					      MAC	draw_96x2_1
      5  2000				   mk_96x2_1_on =	1
      6  2000					      jsr	draw_bmp_96x2_1
      7  2000					      ENDM
      8  2000
      9  2000					      MAC	draw_96x2_2
     10  2000				   mk_96x2_2_on =	1
     11  2000					      jsr	draw_bmp_96x2_2
     12  2000					      ENDM
     13  2000
     14  2000					      MAC	draw_96x2_3
     15  2000				   mk_96x2_3_on =	1
     16  2000					      jsr	draw_bmp_96x2_3
     17  2000					      ENDM
     18  2000
     19  2000					      MAC	draw_96x2_4
     20  2000				   mk_96x2_4_on =	1
     21  2000					      jsr	draw_bmp_96x2_4
     22  2000					      ENDM
     23  2000
     24  2000					      MAC	draw_96x2_5
     25  2000				   mk_96x2_5_on =	1
     26  2000					      jsr	draw_bmp_96x2_5
     27  2000					      ENDM
     28  2000
     29  2000					      MAC	draw_96x2_6
     30  2000				   mk_96x2_6_on =	1
     31  2000					      jsr	draw_bmp_96x2_6
     32  2000					      ENDM
     33  2000
     34  2000					      MAC	draw_96x2_7
     35  2000				   mk_96x2_7_on =	1
     36  2000					      jsr	draw_bmp_96x2_7
     37  2000					      ENDM
     38  2000
     39  2000					      MAC	draw_96x2_8
     40  2000				   mk_96x2_8_on =	1
     41  2000					      jsr	draw_bmp_96x2_8
     42  2000					      ENDM
     43  2000
     44  2000					      MAC	draw_48x1_1
     45  2000				   mk_48x1_X_on =	1
     46  2000				   mk_48x1_1_on =	1
     47  2000					      jsr	draw_bmp_48x1_1
     48  2000					      ENDM
     49  2000
     50  2000					      MAC	draw_48x1_2
     51  2000				   mk_48x1_X_on =	1
     52  2000				   mk_48x1_2_on =	1
     53  2000					      jsr	draw_bmp_48x1_2
     54  2000					      ENDM
     55  2000
     56  2000					      MAC	draw_48x1_3
     57  2000				   mk_48x1_X_on =	1
     58  2000				   mk_48x1_3_on =	1
     59  2000					      jsr	draw_bmp_48x1_3
     60  2000					      ENDM
     61  2000
     62  2000					      MAC	draw_48x1_4
     63  2000				   mk_48x1_X_on =	1
     64  2000				   mk_48x1_4_on =	1
     65  2000					      jsr	draw_bmp_48x1_4
     66  2000					      ENDM
     67  2000
     68  2000					      MAC	draw_48x1_5
     69  2000				   mk_48x1_X_on =	1
     70  2000				   mk_48x1_5_on =	1
     71  2000					      jsr	draw_bmp_48x1_5
     72  2000					      ENDM
     73  2000
     74  2000					      MAC	draw_48x1_6
     75  2000				   mk_48x1_X_on =	1
     76  2000				   mk_48x1_6_on =	1
     77  2000					      jsr	draw_bmp_48x1_6
     78  2000					      ENDM
     79  2000
     80  2000					      MAC	draw_48x1_7
     81  2000				   mk_48x1_X_on =	1
     82  2000				   mk_48x1_7_on =	1
     83  2000					      jsr	draw_bmp_48x1_7
     84  2000					      ENDM
     85  2000
     86  2000					      MAC	draw_48x1_8
     87  2000				   mk_48x1_X_on =	1
     88  2000				   mk_48x1_8_on =	1
     89  2000					      jsr	draw_bmp_48x1_8
     90  2000					      ENDM
     91  2000
     92  2000
     93  2000					      MAC	draw_48x2_1
     94  2000				   mk_48x2_X_on =	1
     95  2000				   mk_48x2_1_on =	1
     96  2000					      jsr	draw_bmp_48x2_1
     97  2000					      ENDM
     98  2000
     99  2000					      MAC	draw_48x2_2
    100  2000				   mk_48x2_X_on =	1
    101  2000				   mk_48x2_2_on =	1
    102  2000					      jsr	draw_bmp_48x2_2
    103  2000					      ENDM
    104  2000
    105  2000					      MAC	draw_48x2_3
    106  2000				   mk_48x2_X_on =	1
    107  2000				   mk_48x2_3_on =	1
    108  2000					      jsr	draw_bmp_48x2_3
    109  2000					      ENDM
    110  2000
    111  2000					      MAC	draw_48x2_4
    112  2000				   mk_48x2_X_on =	1
    113  2000				   mk_48x2_4_on =	1
    114  2000					      jsr	draw_bmp_48x2_4
    115  2000					      ENDM
    116  2000
    117  2000					      MAC	draw_48x2_5
    118  2000				   mk_48x2_X_on =	1
    119  2000				   mk_48x2_5_on =	1
    120  2000					      jsr	draw_bmp_48x2_5
    121  2000					      ENDM
    122  2000
    123  2000					      MAC	draw_48x2_6
    124  2000				   mk_48x2_X_on =	1
    125  2000				   mk_48x2_6_on =	1
    126  2000					      jsr	draw_bmp_48x2_6
    127  2000					      ENDM
    128  2000
    129  2000					      MAC	draw_48x2_7
    130  2000				   mk_48x2_X_on =	1
    131  2000				   mk_48x2_7_on =	1
    132  2000					      jsr	draw_bmp_48x2_7
    133  2000					      ENDM
    134  2000
    135  2000					      MAC	draw_48x2_8
    136  2000				   mk_48x2_X_on =	1
    137  2000				   mk_48x2_8_on =	1
    138  2000					      jsr	draw_bmp_48x2_8
    139  2000					      ENDM
    140  2000
    141  2000					      MAC	draw_player
    142  2000				   mk_player_on =	1
    143  2000					      jsr	draw_player_display
    144  2000					      ENDM
    145  2000
    146  2000					      MAC	draw_score
    147  2000				   mk_score_on =	1
    148  2000				   mk_48x1_X_on =	1
    149  2000					      jsr	draw_score_display
    150  2000					      ENDM
    151  2000
    152  2000					      MAC	draw_gameselect
    153  2000				   mk_gameselect_on =	1
    154  2000				   mk_48x1_X_on =	1
    155  2000					      jsr	draw_gameselect_display
    156  2000					      ENDM
    157  2000
    158  2000					      MAC	draw_space
    159  2000					      ldy	#{1}
    160  2000				   .loop
    161  2000					      sta	WSYNC
    162  2000					      dey
    163  2000					      bne	.loop
    164  2000					      ENDM
    165  2000
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/asm/dpcfix.asm"
      1  2000							; reassign variables that DPC+ doesn't have
      2  2000
      3  2000				  -	      ifnconst	aux2
      4  2000				  -aux2       =	player2x
      5  2000					      endif
      6  2000				  -	      ifnconst	aux4
      7  2000				  -aux4       =	player4x
      8  2000					      endif
      9  2000				  -	      ifnconst	aux5
     10  2000				  -aux5       =	player5x
     11  2000					      endif
     12  2000				  -	      ifnconst	aux6
     13  2000				  -aux6       =	player6x
     14  2000					      endif
     15  2000
     16  2000				  -	      ifnconst	player0pointer
     17  2000				  -player0pointer =	player2y
     18  2000					      endif
     19  2000				  -	      ifnconst	player1pointer
     20  2000				  -player1pointer =	player2height	; to player3height
     21  2000					      endif
     22  2000				  -	      ifnconst	player1color
     23  2000				  -player1color =	player4height	; to player5height
     24  2000					      endif
     25  2000				  -	      ifnconst	scorepointers
     26  2000				  -scorepointers =	player6height	; to NUSIZ8
     27  2000					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 2
      0  2000					      include	"titlescreen/titlescreen_layout.asm"
      1  2000
      2  2000							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2000							; in the order they were listed.
      4  2000							;
      5  2000							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2000							; it won't use any rom space.
      7  2000
      8  2000					      MAC	titlescreenlayout
      9  2000					      draw_96x2_1
     10  2000					      draw_48x1_1
     11  2000					      draw_48x1_2
     12  2000					      draw_space	3
     13  2000					      draw_gameselect
     14  2000					      draw_score
     15  2000					      ENDM
------- FILE titlescreen/asm/titlescreen.asm
      5  2000
      6  2000				   .titledrawscreen
      7  2000				   title_eat_overscan
      8  2000							;bB runs in overscan. Wait for the overscan to run out...
      9  2000		       18		      clc
     10  2001		       ad 84 02 	      lda	INTIM
     11  2004		       30 fa		      bmi	title_eat_overscan
     12  2006		       4c 09 b0 	      jmp	title_do_vertical_sync
     13  2009
     14  2009				   title_do_vertical_sync
     15  2009		       a9 02		      lda	#2
     16  200b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  200d		       85 00		      sta	VSYNC	;enable VSYNC
     18  200f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2011		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2013		       a9 00		      lda	#0
     21  2015		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2017		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2019
     24  2019							;lda #42+128
     25  2019					      ifnconst	vblank_time
     26  2019		       a9 aa		      lda	#42+128
     27  201b				  -	      else
     28  201b				  -	      lda	#vblank_time+128
     29  201b					      endif
     30  201b
     31  201b		       8d 96 02 	      sta	TIM64T
     32  201e
     33  201e		       00 82	   titleframe =	missile0x
     34  201e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2020
     36  2020				  -	      ifconst	.title_vblank
     37  2020				  -	      jsr	.title_vblank
     38  2020					      endif
     39  2020
     40  2020				   title_vblank_loop
     41  2020		       ad 84 02 	      lda	INTIM
     42  2023		       30 fb		      bmi	title_vblank_loop
     43  2025		       a9 00		      lda	#0
     44  2027		       85 02		      sta	WSYNC
     45  2029		       85 01		      sta	VBLANK
     46  202b		       85 1d		      sta	ENAM0
     47  202d		       85 1f		      sta	ENABL
     48  202f
     49  202f				   title_playfield
     50  202f
     51  202f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  202f
     53  202f		       a9 e6		      lda	#230
     54  2031		       8d 96 02 	      sta	TIM64T
     55  2034
     56  2034		       a9 01		      lda	#1
     57  2036		       85 0a		      sta	CTRLPF
     58  2038		       18		      clc
     59  2039
     60  2039		       a9 00		      lda	#0
     61  203b		       85 0b		      sta	REFP0
     62  203d		       85 0c		      sta	REFP1
     63  203f		       85 02		      sta	WSYNC
     64  2041		       ad 87 b0 	      lda	titlescreencolor
     65  2044		       85 09		      sta	COLUBK
     66  2046
      0  2046					      titlescreenlayout
      0  2046					      draw_96x2_1
      1  2046		       00 01	   mk_96x2_1_on =	1
      2  2046		       20 93 b1 	      jsr	draw_bmp_96x2_1
      0  2049					      draw_48x1_1
      1  2049		       00 01	   mk_48x1_X_on =	1
      2  2049		       00 01	   mk_48x1_1_on =	1
      3  2049		       20 88 b0 	      jsr	draw_bmp_48x1_1
      0  204c					      draw_48x1_2
      1  204c		       00 01	   mk_48x1_X_on =	1
      2  204c		       00 01	   mk_48x1_2_on =	1
      3  204c		       20 d0 b0 	      jsr	draw_bmp_48x1_2
      0  204f					      draw_space	3
      1  204f		       a0 03		      ldy	#3
      2  2051				   .loop
      3  2051		       85 02		      sta	WSYNC
      4  2053		       88		      dey
      5  2054		       d0 fb		      bne	.loop
      0  2056					      draw_gameselect
      1  2056		       00 01	   mk_gameselect_on =	1
      2  2056		       00 01	   mk_48x1_X_on =	1
      3  2056		       20 53 b4 	      jsr	draw_gameselect_display
      0  2059					      draw_score
      1  2059		       00 01	   mk_score_on =	1
      2  2059		       00 01	   mk_48x1_X_on =	1
      3  2059		       20 71 b3 	      jsr	draw_score_display
     68  205c
     69  205c		       4c c9 b4 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  205f
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 2
      0  205f					      include	"titlescreen/asm/position48.asm"
      1  205f
      2  205f				   position48
      3  205f
      4  205f							;postion P0 and P1
      5  205f
      6  205f		       85 02		      sta	WSYNC
      7  2061
      8  2061		       a9 90		      lda	#$90	;2
      9  2063		       85 20		      sta	HMP0	;3
     10  2065		       a9 a0		      lda	#$A0	;2
     11  2067		       85 21		      sta	HMP1	;3
     12  2069
     13  2069		       e6 9c		      inc	temp1
     14  206b		       c6 9c		      dec	temp1
     15  206d		       e6 9c		      inc	temp1
     16  206f		       c6 9c		      dec	temp1
     17  2071		       e6 9c		      inc	temp1
      0  2073					      sleep	2
      1  2073				   .CYCLES    SET	2
      2  2073
      3  2073				  -	      IF	.CYCLES < 2
      4  2073				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2073				  -	      ERR
      6  2073					      ENDIF
      7  2073
      8  2073				  -	      IF	.CYCLES & 1
      9  2073				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2073				  -	      nop	0
     11  2073				  -	      ELSE
     12  2073				  -	      bit	VSYNC
     13  2073				  -	      ENDIF
     14  2073				  -.CYCLES    SET	.CYCLES - 3
     15  2073					      ENDIF
     16  2073
     17  2073					      REPEAT	.CYCLES / 2
     18  2073		       ea		      nop
     19  2074					      REPEND
     19  2074		       85 10		      sta	RESP0	;  +3
     20  2076		       85 11		      sta	RESP1	;  +3
     21  2078		       c6 9c		      dec	temp1	;  +5
     22  207a		       e6 9c		      inc	temp1	;  +5
     23  207c		       c6 9c		      dec	temp1	;  +5
     24  207e		       e6 9c		      inc	temp1	;  +5
     25  2080		       c6 9c		      dec	temp1	;  +5
      0  2082					      sleep	3
      1  2082				   .CYCLES    SET	3
      2  2082
      3  2082				  -	      IF	.CYCLES < 2
      4  2082				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2082				  -	      ERR
      6  2082					      ENDIF
      7  2082
      8  2082					      IF	.CYCLES & 1
      9  2082					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2082		       04 00		      nop	0
     11  2084				  -	      ELSE
     12  2084				  -	      bit	VSYNC
     13  2084					      ENDIF
     14  2084				   .CYCLES    SET	.CYCLES - 3
     15  2084					      ENDIF
     16  2084
     17  2084				  -	      REPEAT	.CYCLES / 2
     18  2084				  -	      nop
     19  2084					      REPEND
     27  2084		       85 2a		      sta	HMOVE	; +76
     28  2086		       60		      RTS
     29  2087
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 2
      0  2087					      include	"titlescreen/titlescreen_color.asm"
      1  2087
      2  2087							; This is where the titlescreen background color gets set. 
      3  2087							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  2087							; if you want to change the color on the fly.
      5  2087
      6  2087				  -	      ifnconst	titlescreencolor
      7  2087				  -titlescreencolor
      8  2087					      endif
      9  2087		       00		      .byte.b	$00
     10  2088
------- FILE titlescreen/asm/titlescreen.asm
     73  2088
     74  2088					      ifconst	mk_48x1_1_on
------- FILE titlescreen/asm/48x1_1_kernel.asm LEVEL 3 PASS 2
      0  2088					      include	"titlescreen/asm/48x1_1_kernel.asm"
      1  2088
      2  2088				   draw_bmp_48x1_1
      3  2088
      4  2088		       a9 00		      lda	#0
      5  208a		       85 1b		      sta	GRP0
      6  208c		       85 1c		      sta	GRP1
      7  208e
      8  208e		       a0 0b		      ldy	#11
      9  2090				   bmp_48x1_1_pointersetup
     10  2090		       b9 c4 b0 	      lda	bmp_48x1_1_values,y
     11  2093		       99 96 00 	      sta	scorepointers,y
     12  2096		       88		      dey
     13  2097		       b9 c4 b0 	      lda	bmp_48x1_1_values,y
     14  209a				  -	      ifconst	bmp_48x1_1_index
     15  209a				  -	      sec
     16  209a				  -	      sbc	bmp_48x1_1_index
     17  209a					      endif
     18  209a		       99 96 00 	      sta	scorepointers,y
     19  209d		       88		      dey
     20  209e		       10 f0		      bpl	bmp_48x1_1_pointersetup
     21  20a0
     22  20a0		       a0 61		      ldy	(#bmp_48x1_1_window-1)
     23  20a2		       84 f1		      sty	aux2
     24  20a4
     25  20a4					      ifconst	bmp_48x1_1_background
     26  20a4		       ad e1 b4 	      lda	bmp_48x1_1_background
     27  20a7				  -	      else
     28  20a7				  -	      lda	titlescreencolor
     29  20a7					      endif
     30  20a7		       85 f3		      sta	aux4
     31  20a9
     32  20a9		       ad de b4 	      lda	bmp_48x1_1_color
     33  20ac		       85 06		      sta	COLUP0	;3
     34  20ae		       85 07		      sta	COLUP1	;3
     35  20b0		       85 2b		      sta	HMCLR	;3
     36  20b2
     37  20b2		       ad 87 b0 	      lda	titlescreencolor
     38  20b5		       85 08		      sta	COLUPF
     39  20b7
     40  20b7					      ifconst	bmp_48x1_1_PF1
     41  20b7		       ad df b4 	      lda	bmp_48x1_1_PF1
     42  20ba				  -	      else
     43  20ba				  -	      lda	#0
     44  20ba				  -	      nop
     45  20ba					      endif
     46  20ba		       85 0e		      sta	PF1
     47  20bc
     48  20bc					      ifconst	bmp_48x1_1_PF2
     49  20bc		       ad e0 b4 	      lda	bmp_48x1_1_PF2
     50  20bf				  -	      else
     51  20bf				  -	      lda	#0
     52  20bf				  -	      nop
     53  20bf					      endif
     54  20bf		       85 0f		      sta	PF2
     55  20c1
     56  20c1		       4c 18 b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  20c4
     58  20c4				   bmp_48x1_1_values
     59  20c4		       00 b5		      .word.w	(bmp_48x1_1_00+#bmp_48x1_1_height-#bmp_48x1_1_window)
     60  20c6		       62 b5		      .word.w	(bmp_48x1_1_01+#bmp_48x1_1_height-#bmp_48x1_1_window)
     61  20c8		       00 b6		      .word.w	(bmp_48x1_1_02+#bmp_48x1_1_height-#bmp_48x1_1_window)
     62  20ca		       62 b6		      .word.w	(bmp_48x1_1_03+#bmp_48x1_1_height-#bmp_48x1_1_window)
     63  20cc		       00 b7		      .word.w	(bmp_48x1_1_04+#bmp_48x1_1_height-#bmp_48x1_1_window)
     64  20ce		       62 b7		      .word.w	(bmp_48x1_1_05+#bmp_48x1_1_height-#bmp_48x1_1_window)
     65  20d0
------- FILE titlescreen/asm/titlescreen.asm
     76  20d0					      endif		;mk_48x1_1_on
     77  20d0
     78  20d0					      ifconst	mk_48x1_2_on
------- FILE titlescreen/asm/48x1_2_kernel.asm LEVEL 3 PASS 2
      0  20d0					      include	"titlescreen/asm/48x1_2_kernel.asm"
      1  20d0
      2  20d0				   draw_bmp_48x1_2
      3  20d0
      4  20d0		       a9 00		      lda	#0
      5  20d2		       85 1b		      sta	GRP0
      6  20d4		       85 1c		      sta	GRP1
      7  20d6
      8  20d6		       a0 0b		      ldy	#11
      9  20d8				   bmp_48x1_2_pointersetup
     10  20d8		       b9 0c b1 	      lda	bmp_48x1_2_values,y
     11  20db		       99 96 00 	      sta	scorepointers,y
     12  20de		       88		      dey
     13  20df		       b9 0c b1 	      lda	bmp_48x1_2_values,y
     14  20e2				  -	      ifconst	bmp_48x1_2_index
     15  20e2				  -	      sec
     16  20e2				  -	      sbc	bmp_48x1_2_index
     17  20e2					      endif
     18  20e2		       99 96 00 	      sta	scorepointers,y
     19  20e5		       88		      dey
     20  20e6		       10 f0		      bpl	bmp_48x1_2_pointersetup
     21  20e8
     22  20e8		       a0 0a		      ldy	(#bmp_48x1_2_window-1)
     23  20ea		       84 f1		      sty	aux2
     24  20ec
     25  20ec					      ifconst	bmp_48x1_2_background
     26  20ec		       ad c7 b7 	      lda	bmp_48x1_2_background
     27  20ef				  -	      else
     28  20ef				  -	      lda	titlescreencolor
     29  20ef					      endif
     30  20ef		       85 f3		      sta	aux4
     31  20f1
     32  20f1		       ad c4 b7 	      lda	bmp_48x1_2_color
     33  20f4		       85 06		      sta	COLUP0	;3
     34  20f6		       85 07		      sta	COLUP1	;3
     35  20f8		       85 2b		      sta	HMCLR	;3
     36  20fa
     37  20fa		       ad 87 b0 	      lda	titlescreencolor
     38  20fd		       85 08		      sta	COLUPF
     39  20ff
     40  20ff					      ifconst	bmp_48x1_2_PF1
     41  20ff		       ad c5 b7 	      lda	bmp_48x1_2_PF1
     42  2102				  -	      else
     43  2102				  -	      lda	#0
     44  2102				  -	      nop
     45  2102					      endif
     46  2102		       85 0e		      sta	PF1
     47  2104
     48  2104					      ifconst	bmp_48x1_2_PF2
     49  2104		       ad c6 b7 	      lda	bmp_48x1_2_PF2
     50  2107				  -	      else
     51  2107				  -	      lda	#0
     52  2107				  -	      nop
     53  2107					      endif
     54  2107		       85 0f		      sta	PF2
     55  2109
     56  2109		       4c 18 b1 	      jmp	draw_bmp_48x1_X	; the common 1lk bitmap minikernel
     57  210c
     58  210c				   bmp_48x1_2_values
     59  210c		       c8 b7		      .word.w	(bmp_48x1_2_00+#bmp_48x1_2_height-#bmp_48x1_2_window)
     60  210e		       d3 b7		      .word.w	(bmp_48x1_2_01+#bmp_48x1_2_height-#bmp_48x1_2_window)
     61  2110		       de b7		      .word.w	(bmp_48x1_2_02+#bmp_48x1_2_height-#bmp_48x1_2_window)
     62  2112		       e9 b7		      .word.w	(bmp_48x1_2_03+#bmp_48x1_2_height-#bmp_48x1_2_window)
     63  2114		       f4 b7		      .word.w	(bmp_48x1_2_04+#bmp_48x1_2_height-#bmp_48x1_2_window)
     64  2116		       00 b8		      .word.w	(bmp_48x1_2_05+#bmp_48x1_2_height-#bmp_48x1_2_window)
     65  2118
------- FILE titlescreen/asm/titlescreen.asm
     80  2118					      endif		;mk_48x1_2_on
     81  2118
     82  2118				  -	      ifconst	mk_48x1_3_on
     83  2118				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2118					      endif		;mk_48x1_3_on
     85  2118
     86  2118				  -	      ifconst	mk_48x1_4_on
     87  2118				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  2118					      endif		;mk_48x1_4_on
     89  2118
     90  2118				  -	      ifconst	mk_48x1_5_on
     91  2118				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  2118					      endif		;mk_48x1_5_on
     93  2118
     94  2118				  -	      ifconst	mk_48x1_6_on
     95  2118				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  2118					      endif		;mk_48x1_6_on
     97  2118
     98  2118				  -	      ifconst	mk_48x1_7_on
     99  2118				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  2118					      endif		;mk_48x1_7_on
    101  2118
    102  2118				  -	      ifconst	mk_48x1_8_on
    103  2118				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  2118					      endif		;mk_48x1_8_on
    105  2118
    106  2118				  -	      ifconst	mk_48x2_1_on
    107  2118				  -	      include	"titlescreen/asm/48x2_1_kernel.asm"
    108  2118					      endif		;mk_48x2_1_on
    109  2118
    110  2118				  -	      ifconst	mk_48x2_2_on
    111  2118				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  2118					      endif		;mk_48x2_2_on
    113  2118
    114  2118				  -	      ifconst	mk_48x2_3_on
    115  2118				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  2118					      endif		;mk_48x2_3_on
    117  2118
    118  2118				  -	      ifconst	mk_48x2_4_on
    119  2118				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  2118					      endif		;mk_48x2_4_on
    121  2118
    122  2118				  -	      ifconst	mk_48x2_5_on
    123  2118				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  2118					      endif		;mk_48x2_5_on
    125  2118
    126  2118				  -	      ifconst	mk_48x2_6_on
    127  2118				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  2118					      endif		;mk_48x2_6_on
    129  2118
    130  2118				  -	      ifconst	mk_48x2_7_on
    131  2118				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  2118					      endif		;mk_48x2_7_on
    133  2118
    134  2118				  -	      ifconst	mk_48x2_8_on
    135  2118				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  2118					      endif		;mk_48x2_8_on
    137  2118
    138  2118					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 2
      0  2118					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  2118				   draw_bmp_48x1_X
      2  2118
      3  2118		       a9 03		      lda	#3
      4  211a		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  211c		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  211e
      7  211e		       ba		      tsx
      8  211f		       86 f6		      stx	stack1	;save the stack pointer
      9  2121
     10  2121		       20 5f b0 	      jsr	position48
     11  2124
     12  2124		       a9 03		      lda	#3	;2
     13  2126		       85 25		      sta	VDELP0	;3
     14  2128		       85 26		      sta	VDELP1	;3
     15  212a
     16  212a		       a9 01		      lda	#1	;2
     17  212c		       85 0a		      sta	CTRLPF	;3
     18  212e
     19  212e							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  212e		       85 2b		      sta	HMCLR
     21  2130
     22  2130		       85 02		      sta	WSYNC
     23  2132
     24  2132		       e6 9c		      inc	temp1	;5
     25  2134		       c6 9c		      dec	temp1	;5
     26  2136		       e6 9c		      inc	temp1	;5
     27  2138		       c6 9c		      dec	temp1	;5
     28  213a		       e6 9c		      inc	temp1	;5
     29  213c		       c6 9c		      dec	temp1	;5
     30  213e		       e6 9c		      inc	temp1	;5
     31  2140		       c6 9c		      dec	temp1	;5
     32  2142		       e6 9c		      inc	temp1	;5
     33  2144		       c6 9c		      dec	temp1	;5
     34  2146
      0  2146					      sleep	5
      1  2146				   .CYCLES    SET	5
      2  2146
      3  2146				  -	      IF	.CYCLES < 2
      4  2146				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2146				  -	      ERR
      6  2146					      ENDIF
      7  2146
      8  2146					      IF	.CYCLES & 1
      9  2146					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2146		       04 00		      nop	0
     11  2148				  -	      ELSE
     12  2148				  -	      bit	VSYNC
     13  2148					      ENDIF
     14  2148				   .CYCLES    SET	.CYCLES - 3
     15  2148					      ENDIF
     16  2148
     17  2148					      REPEAT	.CYCLES / 2
     18  2148		       ea		      nop
     19  2149					      REPEND
     36  2149
     37  2149		       c8		      iny
     38  214a
     39  214a		       4c 4d b1 	      jmp	pf48x1_X_loop_entry
     40  214d
     41  214d				  -	      if	>. != >[.+$2a]
     42  214d				  -	      align	256
     43  214d					      endif
     44  214d
     45  214d				   pf48x1_X_loop_entry
     46  214d				   pf48x1_X_loop
     47  214d		       88		      dey		;2
     48  214e		       84 f1		      sty	aux2	;3
     49  2150		       b1 96		      lda	(scorepointers+0),y	;5
     50  2152		       85 1b		      sta	GRP0	;3
     51  2154
     52  2154		       b1 98		      lda	(scorepointers+2),y	;5
     53  2156		       85 1c		      sta	GRP1	;3
     54  2158		       b1 9a		      lda	(scorepointers+4),y	;5
     55  215a		       85 1b		      sta	GRP0	;3
     56  215c
      0  215c					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  215c				   .CYCLES    SET	2
      2  215c
      3  215c				  -	      IF	.CYCLES < 2
      4  215c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215c				  -	      ERR
      6  215c					      ENDIF
      7  215c
      8  215c				  -	      IF	.CYCLES & 1
      9  215c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215c				  -	      nop	0
     11  215c				  -	      ELSE
     12  215c				  -	      bit	VSYNC
     13  215c				  -	      ENDIF
     14  215c				  -.CYCLES    SET	.CYCLES - 3
     15  215c					      ENDIF
     16  215c
     17  215c					      REPEAT	.CYCLES / 2
     18  215c		       ea		      nop
     19  215d					      REPEND
     58  215d		       a5 f3		      lda	aux4	;3
     59  215f		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2161
     61  2161		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2163		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2165		       85 f7		      sta	stack2	;3
     64  2167		       b1 9c		      lda	(scorepointers+6),y	;5
     65  2169		       a4 f7		      ldy	stack2	;3
     66  216b
     67  216b		       85 1c		      sta	GRP1	;3
     68  216d		       84 1b		      sty	GRP0	;3
     69  216f		       86 1c		      stx	GRP1	;3
     70  2171		       84 1b		      sty	GRP0	;3
     71  2173
     72  2173		       a4 f1		      ldy	aux2	;3
     73  2175		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  2177
     75  2177				   pf48x1_X_codeend
     76  2177							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  2177
     78  2177		       a9 00		      lda	#0
     79  2179		       85 1b		      sta	GRP0
     80  217b		       85 1c		      sta	GRP1
     81  217d		       85 1b		      sta	GRP0
     82  217f		       85 1c		      sta	GRP1
     83  2181		       85 1f		      sta	ENABL
     84  2183		       85 1d		      sta	ENAM0
     85  2185		       85 25		      sta	VDELP0
     86  2187		       85 26		      sta	VDELP1
     87  2189		       85 0d		      sta	PF0
     88  218b		       85 0e		      sta	PF1
     89  218d		       85 0f		      sta	PF2
     90  218f
     91  218f		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2191		       9a		      txs
     93  2192		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2193					      endif		;mk_48x1_X_on
    141  2193
    142  2193				  -	      ifconst	mk_48x2_X_on
    143  2193				  -	      include	"titlescreen/asm/48x2_X_kernel.asm"
    144  2193					      endif		;mk_48x2_X_on
    145  2193
    146  2193
    147  2193					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 2
      0  2193					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  2193				   draw_bmp_96x2_1
      2  2193
      3  2193				  -	      ifconst	bmp_96x2_1_index
      4  2193				  -	      lda	#(bmp_96x2_1_height-1)
      5  2193				  -	      sec
      6  2193				  -	      sbc	bmp_96x2_1_index
      7  2193				  -	      tay
      8  2193				  -	      sbc	#bmp_96x2_1_window
      9  2193				  -	      sta	temp1
     10  2193					      else
     11  2193		       a0 0c		      ldy	#(bmp_96x2_1_window-1)
     12  2195		       a9 ff		      lda	#255
     13  2197		       85 9c		      sta	temp1
     14  2199					      endif
     15  2199
     16  2199		       a9 03		      lda	#3
     17  219b		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  219d		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  219f		       a9 00		      lda	#0
     20  21a1
     21  21a1		       b9 0b b8 	      lda	bmp_96x2_1_colors,y	;4
     22  21a4				  -	      ifconst	bmp_96x2_1_fade
     23  21a4				  -	      and	bmp_96x2_1_fade
     24  21a4					      endif
     25  21a4		       85 06		      sta	COLUP0	;3
     26  21a6		       85 07		      sta	COLUP1	;3
     27  21a8		       85 2b		      sta	HMCLR	;3
     28  21aa
     29  21aa		       a5 82		      lda	titleframe
     30  21ac		       29 01		      and	#1
     31  21ae		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  21b0		       4c 70 b2 	      jmp	pf96x2_1_frame1
     33  21b3				   jmp_pf96x2_1_frame0
     34  21b3		       4c b6 b1 	      jmp	pf96x2_1_frame0
     35  21b6
     36  21b6				   pf96x2_1_frame0
     37  21b6							;postion P0 and P1
     38  21b6		       85 02		      sta	WSYNC
     39  21b8		       a9 e0		      lda	#%11100000
     40  21ba		       85 20		      sta	HMP0
     41  21bc		       a9 10		      lda	#%00010000
     42  21be		       85 21		      sta	HMP1
     43  21c0		       85 02		      sta	WSYNC
      0  21c2					      sleep	28
      1  21c2				   .CYCLES    SET	28
      2  21c2
      3  21c2				  -	      IF	.CYCLES < 2
      4  21c2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21c2				  -	      ERR
      6  21c2					      ENDIF
      7  21c2
      8  21c2				  -	      IF	.CYCLES & 1
      9  21c2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21c2				  -	      nop	0
     11  21c2				  -	      ELSE
     12  21c2				  -	      bit	VSYNC
     13  21c2				  -	      ENDIF
     14  21c2				  -.CYCLES    SET	.CYCLES - 3
     15  21c2					      ENDIF
     16  21c2
     17  21c2					      REPEAT	.CYCLES / 2
     18  21c2		       ea		      nop
     17  21c2					      REPEND
     18  21c3		       ea		      nop
     17  21c3					      REPEND
     18  21c4		       ea		      nop
     17  21c4					      REPEND
     18  21c5		       ea		      nop
     17  21c5					      REPEND
     18  21c6		       ea		      nop
     17  21c6					      REPEND
     18  21c7		       ea		      nop
     17  21c7					      REPEND
     18  21c8		       ea		      nop
     17  21c8					      REPEND
     18  21c9		       ea		      nop
     17  21c9					      REPEND
     18  21ca		       ea		      nop
     17  21ca					      REPEND
     18  21cb		       ea		      nop
     17  21cb					      REPEND
     18  21cc		       ea		      nop
     17  21cc					      REPEND
     18  21cd		       ea		      nop
     17  21cd					      REPEND
     18  21ce		       ea		      nop
     17  21ce					      REPEND
     18  21cf		       ea		      nop
     19  21d0					      REPEND
     45  21d0		       85 10		      sta	RESP0
      0  21d2					      sleep	14
      1  21d2				   .CYCLES    SET	14
      2  21d2
      3  21d2				  -	      IF	.CYCLES < 2
      4  21d2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21d2				  -	      ERR
      6  21d2					      ENDIF
      7  21d2
      8  21d2				  -	      IF	.CYCLES & 1
      9  21d2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21d2				  -	      nop	0
     11  21d2				  -	      ELSE
     12  21d2				  -	      bit	VSYNC
     13  21d2				  -	      ENDIF
     14  21d2				  -.CYCLES    SET	.CYCLES - 3
     15  21d2					      ENDIF
     16  21d2
     17  21d2					      REPEAT	.CYCLES / 2
     18  21d2		       ea		      nop
     17  21d2					      REPEND
     18  21d3		       ea		      nop
     17  21d3					      REPEND
     18  21d4		       ea		      nop
     17  21d4					      REPEND
     18  21d5		       ea		      nop
     17  21d5					      REPEND
     18  21d6		       ea		      nop
     17  21d6					      REPEND
     18  21d7		       ea		      nop
     17  21d7					      REPEND
     18  21d8		       ea		      nop
     19  21d9					      REPEND
     47  21d9		       85 11		      sta	RESP1
     48  21db		       85 02		      sta	WSYNC
     49  21dd		       85 2a		      sta	HMOVE
     50  21df
     51  21df		       85 02		      sta	WSYNC
     52  21e1		       85 2b		      sta	HMCLR
     53  21e3		       85 02		      sta	WSYNC
     54  21e5
      0  21e5					      sleep	4
      1  21e5				   .CYCLES    SET	4
      2  21e5
      3  21e5				  -	      IF	.CYCLES < 2
      4  21e5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21e5				  -	      ERR
      6  21e5					      ENDIF
      7  21e5
      8  21e5				  -	      IF	.CYCLES & 1
      9  21e5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21e5				  -	      nop	0
     11  21e5				  -	      ELSE
     12  21e5				  -	      bit	VSYNC
     13  21e5				  -	      ENDIF
     14  21e5				  -.CYCLES    SET	.CYCLES - 3
     15  21e5					      ENDIF
     16  21e5
     17  21e5					      REPEAT	.CYCLES / 2
     18  21e5		       ea		      nop
     17  21e5					      REPEND
     18  21e6		       ea		      nop
     19  21e7					      REPEND
     56  21e7		       4c 00 b2 	      jmp	pfline_96x2_1_frame0
     57  21ea							;align so our branch doesn't unexpectedly cross a page...
     58  21ea					      if	>. != >[.+$70]
     59  2200		       00 00 00 00*	      align	256
     60  2200					      endif
     61  2200
     62  2200				   pfline_96x2_1_frame0
     63  2200		       a9 80		      lda	#$80	;2
     64  2202		       85 20		      sta	HMP0	;3
     65  2204		       85 21		      sta	HMP1	;3
     66  2206
     67  2206		       b9 66 b8 	      lda	bmp_96x2_1_06,y	;4
     68  2209		       85 1c		      sta	GRP1	;3
     69  220b
     70  220b		       b9 18 b8 	      lda	bmp_96x2_1_00,y
     71  220e		       85 1b		      sta	GRP0
     72  2210		       b9 32 b8 	      lda	bmp_96x2_1_02,y
     73  2213		       85 1b		      sta	GRP0
     74  2215		       b9 4c b8 	      lda	bmp_96x2_1_04,y
     75  2218		       85 1b		      sta	GRP0
     76  221a
      0  221a					      sleep	2
      1  221a				   .CYCLES    SET	2
      2  221a
      3  221a				  -	      IF	.CYCLES < 2
      4  221a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  221a				  -	      ERR
      6  221a					      ENDIF
      7  221a
      8  221a				  -	      IF	.CYCLES & 1
      9  221a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  221a				  -	      nop	0
     11  221a				  -	      ELSE
     12  221a				  -	      bit	VSYNC
     13  221a				  -	      ENDIF
     14  221a				  -.CYCLES    SET	.CYCLES - 3
     15  221a					      ENDIF
     16  221a
     17  221a					      REPEAT	.CYCLES / 2
     18  221a		       ea		      nop
     19  221b					      REPEND
     78  221b
     79  221b		       b9 80 b8 	      lda	bmp_96x2_1_08,y
     80  221e		       85 1c		      sta	GRP1
     81  2220		       b9 9a b8 	      lda	bmp_96x2_1_10,y
     82  2223		       85 1c		      sta	GRP1
     83  2225
     84  2225		       b9 25 b8 	      lda	bmp_96x2_1_01,y
     85  2228		       85 1b		      sta	GRP0
     86  222a
      0  222a					      sleep	8
      1  222a				   .CYCLES    SET	8
      2  222a
      3  222a				  -	      IF	.CYCLES < 2
      4  222a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  222a				  -	      ERR
      6  222a					      ENDIF
      7  222a
      8  222a				  -	      IF	.CYCLES & 1
      9  222a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  222a				  -	      nop	0
     11  222a				  -	      ELSE
     12  222a				  -	      bit	VSYNC
     13  222a				  -	      ENDIF
     14  222a				  -.CYCLES    SET	.CYCLES - 3
     15  222a					      ENDIF
     16  222a
     17  222a					      REPEAT	.CYCLES / 2
     18  222a		       ea		      nop
     17  222a					      REPEND
     18  222b		       ea		      nop
     17  222b					      REPEND
     18  222c		       ea		      nop
     17  222c					      REPEND
     18  222d		       ea		      nop
     19  222e					      REPEND
     88  222e
     89  222e							;sta WSYNC	;=0
     90  222e		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2230
     92  2230		       b9 0a b8 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  2233				  -	      ifconst	bmp_96x2_1_fade
     94  2233				  -	      and	bmp_96x2_1_fade
     95  2233					      else
      0  2233					      sleep	3
      1  2233				   .CYCLES    SET	3
      2  2233
      3  2233				  -	      IF	.CYCLES < 2
      4  2233				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2233				  -	      ERR
      6  2233					      ENDIF
      7  2233
      8  2233					      IF	.CYCLES & 1
      9  2233					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2233		       04 00		      nop	0
     11  2235				  -	      ELSE
     12  2235				  -	      bit	VSYNC
     13  2235					      ENDIF
     14  2235				   .CYCLES    SET	.CYCLES - 3
     15  2235					      ENDIF
     16  2235
     17  2235				  -	      REPEAT	.CYCLES / 2
     18  2235				  -	      nop
     19  2235					      REPEND
     97  2235					      endif
     98  2235		       aa		      tax
     99  2236
    100  2236		       a9 00		      lda	#0	;2
    101  2238		       85 20		      sta	HMP0	;3
    102  223a		       85 21		      sta	HMP1	;3
    103  223c
      0  223c					      sleep	7
      1  223c				   .CYCLES    SET	7
      2  223c
      3  223c				  -	      IF	.CYCLES < 2
      4  223c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  223c				  -	      ERR
      6  223c					      ENDIF
      7  223c
      8  223c					      IF	.CYCLES & 1
      9  223c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  223c		       04 00		      nop	0
     11  223e				  -	      ELSE
     12  223e				  -	      bit	VSYNC
     13  223e					      ENDIF
     14  223e				   .CYCLES    SET	.CYCLES - 3
     15  223e					      ENDIF
     16  223e
     17  223e					      REPEAT	.CYCLES / 2
     18  223e		       ea		      nop
     17  223e					      REPEND
     18  223f		       ea		      nop
     19  2240					      REPEND
    105  2240
    106  2240		       b9 73 b8 	      lda	bmp_96x2_1_07,y
    107  2243		       85 1c		      sta	GRP1
    108  2245
    109  2245		       b9 3f b8 	      lda	bmp_96x2_1_03,y	;5
    110  2248		       85 1b		      sta	GRP0	;3 =  8
    111  224a		       b9 59 b8 	      lda	bmp_96x2_1_05,y	;5
    112  224d		       85 1b		      sta	GRP0	;3 =  8
    113  224f
      0  224f					      sleep	2
      1  224f				   .CYCLES    SET	2
      2  224f
      3  224f				  -	      IF	.CYCLES < 2
      4  224f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224f				  -	      ERR
      6  224f					      ENDIF
      7  224f
      8  224f				  -	      IF	.CYCLES & 1
      9  224f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  224f				  -	      nop	0
     11  224f				  -	      ELSE
     12  224f				  -	      bit	VSYNC
     13  224f				  -	      ENDIF
     14  224f				  -.CYCLES    SET	.CYCLES - 3
     15  224f					      ENDIF
     16  224f
     17  224f					      REPEAT	.CYCLES / 2
     18  224f		       ea		      nop
     19  2250					      REPEND
    115  2250
    116  2250		       b9 8d b8 	      lda	bmp_96x2_1_09,y	;5
    117  2253		       85 1c		      sta	GRP1	;3 =  8
    118  2255		       b9 a7 b8 	      lda	bmp_96x2_1_11,y	;5
    119  2258		       85 1c		      sta	GRP1	;3 =  8
    120  225a
      0  225a					      sleep	2
      1  225a				   .CYCLES    SET	2
      2  225a
      3  225a				  -	      IF	.CYCLES < 2
      4  225a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  225a				  -	      ERR
      6  225a					      ENDIF
      7  225a
      8  225a				  -	      IF	.CYCLES & 1
      9  225a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  225a				  -	      nop	0
     11  225a				  -	      ELSE
     12  225a				  -	      bit	VSYNC
     13  225a				  -	      ENDIF
     14  225a				  -.CYCLES    SET	.CYCLES - 3
     15  225a					      ENDIF
     16  225a
     17  225a					      REPEAT	.CYCLES / 2
     18  225a		       ea		      nop
     19  225b					      REPEND
    122  225b		       86 07		      stx	COLUP1
    123  225d		       86 06		      stx	COLUP0
    124  225f
    125  225f		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  2261					      sleep	2
      1  2261				   .CYCLES    SET	2
      2  2261
      3  2261				  -	      IF	.CYCLES < 2
      4  2261				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2261				  -	      ERR
      6  2261					      ENDIF
      7  2261
      8  2261				  -	      IF	.CYCLES & 1
      9  2261				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2261				  -	      nop	0
     11  2261				  -	      ELSE
     12  2261				  -	      bit	VSYNC
     13  2261				  -	      ENDIF
     14  2261				  -.CYCLES    SET	.CYCLES - 3
     15  2261					      ENDIF
     16  2261
     17  2261					      REPEAT	.CYCLES / 2
     18  2261		       ea		      nop
     19  2262					      REPEND
    127  2262		       88		      dey
    128  2263
    129  2263		       c4 9c		      cpy	temp1	;3
    130  2265		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  2267
    132  2267				   pf96x2_1_0codeend
    133  2267							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  2267
    135  2267		       a9 00		      lda	#0
    136  2269		       85 1b		      sta	GRP0
    137  226b		       85 1c		      sta	GRP1
    138  226d		       4c 6e b3 	      jmp	pfdone_96x2_1
    139  2270
    140  2270
    141  2270				   pf96x2_1_frame1
    142  2270
    143  2270							;postion P0 and P1
    144  2270		       85 02		      sta	WSYNC
    145  2272		       a9 20		      lda	#%00100000
    146  2274		       85 20		      sta	HMP0
    147  2276		       a9 00		      lda	#0
    148  2278		       a9 f0		      lda	#%11110000
    149  227a		       85 21		      sta	HMP1
    150  227c		       85 02		      sta	WSYNC
      0  227e					      sleep	32
      1  227e				   .CYCLES    SET	32
      2  227e
      3  227e				  -	      IF	.CYCLES < 2
      4  227e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  227e				  -	      ERR
      6  227e					      ENDIF
      7  227e
      8  227e				  -	      IF	.CYCLES & 1
      9  227e				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  227e				  -	      nop	0
     11  227e				  -	      ELSE
     12  227e				  -	      bit	VSYNC
     13  227e				  -	      ENDIF
     14  227e				  -.CYCLES    SET	.CYCLES - 3
     15  227e					      ENDIF
     16  227e
     17  227e					      REPEAT	.CYCLES / 2
     18  227e		       ea		      nop
     17  227e					      REPEND
     18  227f		       ea		      nop
     17  227f					      REPEND
     18  2280		       ea		      nop
     17  2280					      REPEND
     18  2281		       ea		      nop
     17  2281					      REPEND
     18  2282		       ea		      nop
     17  2282					      REPEND
     18  2283		       ea		      nop
     17  2283					      REPEND
     18  2284		       ea		      nop
     17  2284					      REPEND
     18  2285		       ea		      nop
     17  2285					      REPEND
     18  2286		       ea		      nop
     17  2286					      REPEND
     18  2287		       ea		      nop
     17  2287					      REPEND
     18  2288		       ea		      nop
     17  2288					      REPEND
     18  2289		       ea		      nop
     17  2289					      REPEND
     18  228a		       ea		      nop
     17  228a					      REPEND
     18  228b		       ea		      nop
     17  228b					      REPEND
     18  228c		       ea		      nop
     17  228c					      REPEND
     18  228d		       ea		      nop
     19  228e					      REPEND
    152  228e		       85 10		      sta	RESP0
      0  2290					      sleep	12
      1  2290				   .CYCLES    SET	12
      2  2290
      3  2290				  -	      IF	.CYCLES < 2
      4  2290				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2290				  -	      ERR
      6  2290					      ENDIF
      7  2290
      8  2290				  -	      IF	.CYCLES & 1
      9  2290				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2290				  -	      nop	0
     11  2290				  -	      ELSE
     12  2290				  -	      bit	VSYNC
     13  2290				  -	      ENDIF
     14  2290				  -.CYCLES    SET	.CYCLES - 3
     15  2290					      ENDIF
     16  2290
     17  2290					      REPEAT	.CYCLES / 2
     18  2290		       ea		      nop
     17  2290					      REPEND
     18  2291		       ea		      nop
     17  2291					      REPEND
     18  2292		       ea		      nop
     17  2292					      REPEND
     18  2293		       ea		      nop
     17  2293					      REPEND
     18  2294		       ea		      nop
     17  2294					      REPEND
     18  2295		       ea		      nop
     19  2296					      REPEND
    154  2296		       85 11		      sta	RESP1
    155  2298		       85 02		      sta	WSYNC
    156  229a		       85 2a		      sta	HMOVE
    157  229c
    158  229c		       85 02		      sta	WSYNC
    159  229e		       85 2b		      sta	HMCLR
    160  22a0
    161  22a0
    162  22a0
    163  22a0		       85 02		      sta	WSYNC
      0  22a2					      sleep	3
      1  22a2				   .CYCLES    SET	3
      2  22a2
      3  22a2				  -	      IF	.CYCLES < 2
      4  22a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22a2				  -	      ERR
      6  22a2					      ENDIF
      7  22a2
      8  22a2					      IF	.CYCLES & 1
      9  22a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  22a2		       04 00		      nop	0
     11  22a4				  -	      ELSE
     12  22a4				  -	      bit	VSYNC
     13  22a4					      ENDIF
     14  22a4				   .CYCLES    SET	.CYCLES - 3
     15  22a4					      ENDIF
     16  22a4
     17  22a4				  -	      REPEAT	.CYCLES / 2
     18  22a4				  -	      nop
     19  22a4					      REPEND
    165  22a4		       4c 00 b3 	      jmp	pfline_96x2_1_frame1
    166  22a7
    167  22a7							;align so our branch doesn't unexpectedly cross a page...
    168  22a7					      if	>. != >[.+$70]
    169  2300		       00 00 00 00*	      align	256
    170  2300					      endif
    171  2300
    172  2300				   pfline_96x2_1_frame1
    173  2300
    174  2300		       85 2a		      sta	HMOVE
    175  2302
    176  2302		       b9 73 b8 	      lda	bmp_96x2_1_07,y	;4
    177  2305		       85 1c		      sta	GRP1	;3
    178  2307
    179  2307		       a9 00		      lda	#$0	;2
    180  2309		       85 20		      sta	HMP0	;3
    181  230b		       85 21		      sta	HMP1	;3
    182  230d
    183  230d		       b9 25 b8 	      lda	bmp_96x2_1_01,y
    184  2310		       8d 1b 00 	      sta.w	GRP0
    185  2313		       b9 3f b8 	      lda	bmp_96x2_1_03,y
    186  2316		       85 1b		      sta	GRP0
    187  2318		       b9 59 b8 	      lda	bmp_96x2_1_05,y
    188  231b		       85 1b		      sta	GRP0
    189  231d
      0  231d					      sleep	2
      1  231d				   .CYCLES    SET	2
      2  231d
      3  231d				  -	      IF	.CYCLES < 2
      4  231d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  231d				  -	      ERR
      6  231d					      ENDIF
      7  231d
      8  231d				  -	      IF	.CYCLES & 1
      9  231d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  231d				  -	      nop	0
     11  231d				  -	      ELSE
     12  231d				  -	      bit	VSYNC
     13  231d				  -	      ENDIF
     14  231d				  -.CYCLES    SET	.CYCLES - 3
     15  231d					      ENDIF
     16  231d
     17  231d					      REPEAT	.CYCLES / 2
     18  231d		       ea		      nop
     19  231e					      REPEND
    191  231e
    192  231e		       b9 8d b8 	      lda	bmp_96x2_1_09,y
    193  2321		       85 1c		      sta	GRP1
    194  2323		       b9 a7 b8 	      lda	bmp_96x2_1_11,y
    195  2326		       85 1c		      sta	GRP1
    196  2328
    197  2328		       b9 18 b8 	      lda	bmp_96x2_1_00,y
    198  232b		       85 1b		      sta	GRP0
    199  232d
    200  232d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2330
    202  2330							;sta WSYNC	;=0 -----------------------------------------
    203  2330
    204  2330		       b9 66 b8 	      lda	bmp_96x2_1_06,y
    205  2333		       85 1c		      sta	GRP1
    206  2335
      0  2335					      sleep	8
      1  2335				   .CYCLES    SET	8
      2  2335
      3  2335				  -	      IF	.CYCLES < 2
      4  2335				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2335				  -	      ERR
      6  2335					      ENDIF
      7  2335
      8  2335				  -	      IF	.CYCLES & 1
      9  2335				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2335				  -	      nop	0
     11  2335				  -	      ELSE
     12  2335				  -	      bit	VSYNC
     13  2335				  -	      ENDIF
     14  2335				  -.CYCLES    SET	.CYCLES - 3
     15  2335					      ENDIF
     16  2335
     17  2335					      REPEAT	.CYCLES / 2
     18  2335		       ea		      nop
     17  2335					      REPEND
     18  2336		       ea		      nop
     17  2336					      REPEND
     18  2337		       ea		      nop
     17  2337					      REPEND
     18  2338		       ea		      nop
     19  2339					      REPEND
    208  2339
    209  2339		       b9 0a b8 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  233c		       aa		      tax		;2
    211  233d
      0  233d					      sleep	3
      1  233d				   .CYCLES    SET	3
      2  233d
      3  233d				  -	      IF	.CYCLES < 2
      4  233d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  233d				  -	      ERR
      6  233d					      ENDIF
      7  233d
      8  233d					      IF	.CYCLES & 1
      9  233d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  233d		       04 00		      nop	0
     11  233f				  -	      ELSE
     12  233f				  -	      bit	VSYNC
     13  233f					      ENDIF
     14  233f				   .CYCLES    SET	.CYCLES - 3
     15  233f					      ENDIF
     16  233f
     17  233f				  -	      REPEAT	.CYCLES / 2
     18  233f				  -	      nop
     19  233f					      REPEND
    213  233f
    214  233f		       a9 80		      lda	#$80	;2
    215  2341		       85 20		      sta	HMP0	;3
    216  2343		       85 21		      sta	HMP1	;3
    217  2345
    218  2345
    219  2345		       b9 32 b8 	      lda	bmp_96x2_1_02,y	;5
    220  2348		       85 1b		      sta	GRP0	;3 =  8
    221  234a
    222  234a		       b9 4c b8 	      lda	bmp_96x2_1_04,y	;5
    223  234d		       85 1b		      sta	GRP0	;3 =  8
    224  234f
      0  234f					      sleep	2
      1  234f				   .CYCLES    SET	2
      2  234f
      3  234f				  -	      IF	.CYCLES < 2
      4  234f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  234f				  -	      ERR
      6  234f					      ENDIF
      7  234f
      8  234f				  -	      IF	.CYCLES & 1
      9  234f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  234f				  -	      nop	0
     11  234f				  -	      ELSE
     12  234f				  -	      bit	VSYNC
     13  234f				  -	      ENDIF
     14  234f				  -.CYCLES    SET	.CYCLES - 3
     15  234f					      ENDIF
     16  234f
     17  234f					      REPEAT	.CYCLES / 2
     18  234f		       ea		      nop
     19  2350					      REPEND
    226  2350
    227  2350		       b9 80 b8 	      lda	bmp_96x2_1_08,y	;5
    228  2353		       85 1c		      sta	GRP1	;3 =  8
    229  2355
    230  2355		       b9 9a b8 	      lda	bmp_96x2_1_10,y	;5
    231  2358		       85 1c		      sta	GRP1	;3 =  8
    232  235a
      0  235a					      sleep	4
      1  235a				   .CYCLES    SET	4
      2  235a
      3  235a				  -	      IF	.CYCLES < 2
      4  235a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235a				  -	      ERR
      6  235a					      ENDIF
      7  235a
      8  235a				  -	      IF	.CYCLES & 1
      9  235a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  235a				  -	      nop	0
     11  235a				  -	      ELSE
     12  235a				  -	      bit	VSYNC
     13  235a				  -	      ENDIF
     14  235a				  -.CYCLES    SET	.CYCLES - 3
     15  235a					      ENDIF
     16  235a
     17  235a					      REPEAT	.CYCLES / 2
     18  235a		       ea		      nop
     17  235a					      REPEND
     18  235b		       ea		      nop
     19  235c					      REPEND
    234  235c
    235  235c		       88		      dey
    236  235d
    237  235d		       8a		      txa
    238  235e				  -	      ifconst	bmp_96x2_1_fade
    239  235e				  -	      and	bmp_96x2_1_fade
    240  235e					      else
      0  235e					      sleep	3
      1  235e				   .CYCLES    SET	3
      2  235e
      3  235e				  -	      IF	.CYCLES < 2
      4  235e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235e				  -	      ERR
      6  235e					      ENDIF
      7  235e
      8  235e					      IF	.CYCLES & 1
      9  235e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  235e		       04 00		      nop	0
     11  2360				  -	      ELSE
     12  2360				  -	      bit	VSYNC
     13  2360					      ENDIF
     14  2360				   .CYCLES    SET	.CYCLES - 3
     15  2360					      ENDIF
     16  2360
     17  2360				  -	      REPEAT	.CYCLES / 2
     18  2360				  -	      nop
     19  2360					      REPEND
    242  2360					      endif
    243  2360		       85 07		      sta	COLUP1	;3
    244  2362		       85 06		      sta	COLUP0	;3
    245  2364
    246  2364		       c4 9c		      cpy	temp1	;2
    247  2366		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2368
    249  2368				   pf96x2_1_1codeend
    250  2368							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2368
    252  2368		       a9 00		      lda	#0
    253  236a		       85 1b		      sta	GRP0
    254  236c		       85 1c		      sta	GRP1
    255  236e
    256  236e				   pfdone_96x2_1
    257  236e		       85 02		      sta	WSYNC	; debug
    258  2370
    259  2370		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2371					      endif		;mk_96x2_1_on
    150  2371
    151  2371				  -	      ifconst	mk_96x2_2_on
    152  2371				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2371					      endif		;mk_96x2_2_on
    154  2371
    155  2371				  -	      ifconst	mk_96x2_3_on
    156  2371				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2371					      endif		;mk_96x2_3_on
    158  2371
    159  2371				  -	      ifconst	mk_96x2_4_on
    160  2371				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2371					      endif		;mk_96x2_4_on
    162  2371
    163  2371				  -	      ifconst	mk_96x2_5_on
    164  2371				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2371					      endif		;mk_96x2_5_on
    166  2371
    167  2371				  -	      ifconst	mk_96x2_6_on
    168  2371				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2371					      endif		;mk_96x2_6_on
    170  2371
    171  2371				  -	      ifconst	mk_96x2_7_on
    172  2371				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2371					      endif		;mk_96x2_7_on
    174  2371
    175  2371				  -	      ifconst	mk_96x2_8_on
    176  2371				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2371					      endif		;mk_96x2_8_on
    178  2371
    179  2371					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 2
      0  2371					      include	"titlescreen/asm/score_kernel.asm"
      1  2371							; The batari Basic score kernel
      2  2371							; This minikernel is not under the same license as the rest of the
      3  2371							; titlescreen code. Refer to the bB license before you use this in
      4  2371							; a non-bB program.
      5  2371
      6  2371				   draw_score_display
      7  2371
      8  2371		       a7 93		      lax	score+0
      9  2373		       20 43 b4 	      jsr	miniscorepointerset
     10  2376		       84 9e		      sty	scorepointers+8
     11  2378		       86 96		      stx	scorepointers+0
     12  237a		       a7 94		      lax	score+1
     13  237c		       20 43 b4 	      jsr	miniscorepointerset
     14  237f		       84 9a		      sty	scorepointers+4
     15  2381		       86 9c		      stx	scorepointers+6
     16  2383		       a7 95		      lax	score+2
     17  2385		       20 43 b4 	      jsr	miniscorepointerset
     18  2388		       84 a0		      sty	scorepointers+10
     19  238a		       86 98		      stx	scorepointers+2
     20  238c
     21  238c		       85 2b		      sta	HMCLR
     22  238e		       ba		      tsx
     23  238f		       86 f6		      stx	stack1
     24  2391							;ldx #$20
     25  2391		       a2 60		      ldx	#$60
     26  2393		       86 20		      stx	HMP0
     27  2395
     28  2395		       a2 00		      ldx	#0
     29  2397		       85 02		      sta	WSYNC	;   0
     30  2399		       86 1b		      STx	GRP0	; 3 3
     31  239b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  239d
      0  239d					      sleep	7	; 7 13
      1  239d				   .CYCLES    SET	7
      2  239d
      3  239d				  -	      IF	.CYCLES < 2
      4  239d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  239d				  -	      ERR
      6  239d					      ENDIF
      7  239d
      8  239d					      IF	.CYCLES & 1
      9  239d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  239d		       04 00		      nop	0
     11  239f				  -	      ELSE
     12  239f				  -	      bit	VSYNC
     13  239f					      ENDIF
     14  239f				   .CYCLES    SET	.CYCLES - 3
     15  239f					      ENDIF
     16  239f
     17  239f					      REPEAT	.CYCLES / 2
     18  239f		       ea		      nop
     17  239f					      REPEND
     18  23a0		       ea		      nop
     19  23a1					      REPEND
     34  23a1
     35  23a1		       a9 b9		      lda	#>miniscoretable	; 2 15
     36  23a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  23a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  23a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  23a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  23ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  23ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  23af
     43  23af		       a0 07		      LDY	#7	; 2 41
     44  23b1		       85 10		      STA	RESP0	; 3 44
     45  23b3		       85 11		      STA	RESP1	; 3 47
     46  23b5
     47  23b5		       a9 03		      LDA	#$03	; 2 49
     48  23b7		       85 04		      STA	NUSIZ0	; 3 52
     49  23b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  23bb		       85 25		      STA	VDELP0	; 3 59
     51  23bd		       85 26		      STA	VDELP1	; 3 62
     52  23bf							;LDA #$30		; 2 64
     53  23bf		       a9 70		      LDA	#$70	; 2 64
     54  23c1		       85 21		      STA	HMP1	; 3 67
     55  23c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  23c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  23c7				  -	      ifconst	score_kernel_fade
     58  23c7				  -	      and	score_kernel_fade
     59  23c7					      endif
     60  23c7
     61  23c7		       85 06		      STA	COLUP0
     62  23c9		       85 07		      STA	COLUP1
     63  23cb					      ifconst	scorefade
     64  23cb		       85 f7		      STA	stack2	; scorefade
     65  23cd					      endif
     66  23cd		       b1 96		      lda	(scorepointers),y
     67  23cf		       85 1b		      sta	GRP0
     68  23d1		       b1 9e		      lda	(scorepointers+8),y
     69  23d3		       85 02		      sta	WSYNC
      0  23d5					      sleep	2
      1  23d5				   .CYCLES    SET	2
      2  23d5
      3  23d5				  -	      IF	.CYCLES < 2
      4  23d5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23d5				  -	      ERR
      6  23d5					      ENDIF
      7  23d5
      8  23d5				  -	      IF	.CYCLES & 1
      9  23d5				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23d5				  -	      nop	0
     11  23d5				  -	      ELSE
     12  23d5				  -	      bit	VSYNC
     13  23d5				  -	      ENDIF
     14  23d5				  -.CYCLES    SET	.CYCLES - 3
     15  23d5					      ENDIF
     16  23d5
     17  23d5					      REPEAT	.CYCLES / 2
     18  23d5		       ea		      nop
     19  23d6					      REPEND
     71  23d6		       4c 0c b4 	      jmp	beginscoreloop
     72  23d9
     73  23d9					      if	((<*)>$28)
     74  2400		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2400					      endif
     76  2400
     77  2400				   scoreloop2
     78  2400					      ifconst	scorefade
     79  2400		       a5 f7		      lda	stack2
     80  2402		       85 06		      sta	COLUP0
     81  2404		       85 07		      sta	COLUP1
     82  2406				  -	      else
     83  2406				  -	      sleep	9
     84  2406					      endif
     85  2406		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2408		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  240a		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  240c							; cycle 0
     89  240c				   beginscoreloop
     90  240c		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  240e		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  2410		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2412		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2414		       9a		      txs
     95  2415		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2417
     97  2417					      ifconst	scorefade
     98  2417		       c6 f7		      dec	stack2
     99  2419				  -	      else
    100  2419				  -	      sleep	5
    101  2419					      endif
      0  2419					      sleep	2
      1  2419				   .CYCLES    SET	2
      2  2419
      3  2419				  -	      IF	.CYCLES < 2
      4  2419				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2419				  -	      ERR
      6  2419					      ENDIF
      7  2419
      8  2419				  -	      IF	.CYCLES & 1
      9  2419				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2419				  -	      nop	0
     11  2419				  -	      ELSE
     12  2419				  -	      bit	VSYNC
     13  2419				  -	      ENDIF
     14  2419				  -.CYCLES    SET	.CYCLES - 3
     15  2419					      ENDIF
     16  2419
     17  2419					      REPEAT	.CYCLES / 2
     18  2419		       ea		      nop
     19  241a					      REPEND
    103  241a
    104  241a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  241c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  241e		       ba		      tsx
    107  241f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2421		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2423
    110  2423		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2425		       88		      dey
    112  2426		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2428				   scoreloop2end
    114  2428
    115  2428							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2428
    117  2428
    118  2428		       a6 f6		      ldx	stack1
    119  242a		       9a		      txs
    120  242b
    121  242b		       a9 00		      LDA	#0
    122  242d		       85 0e		      sta	PF1
    123  242f		       85 1b		      STA	GRP0
    124  2431		       85 1c		      STA	GRP1
    125  2433		       85 25		      STA	VDELP0
    126  2435		       85 26		      STA	VDELP1
    127  2437		       85 04		      STA	NUSIZ0
    128  2439		       85 05		      STA	NUSIZ1
    129  243b
    130  243b							; clear out the score pointers in case they're stolen DPC variables...
    131  243b		       a2 0b		      ldx	#11
    132  243d				   clearscoreploop
    133  243d		       95 96		      sta	scorepointers,x
    134  243f		       ca		      dex
    135  2440		       10 fb		      bpl	clearscoreploop
    136  2442
    137  2442
    138  2442							;;ldy temp3
    139  2442							;ldy scorepointers+8
    140  2442							;sty scorepointers+3
    141  2442
    142  2442							;;ldy temp5
    143  2442							;ldy scorepointers+10
    144  2442							;sty scorepointers+5
    145  2442		       60		      rts
    146  2443
    147  2443				   miniscorepointerset
    148  2443		       29 0f		      and	#$0F
    149  2445		       0a		      asl
    150  2446		       0a		      asl
    151  2447		       0a		      asl
    152  2448		       69 00		      adc	#<miniscoretable
    153  244a		       a8		      tay
    154  244b		       8a		      txa
    155  244c		       29 f0		      and	#$F0
    156  244e		       4a		      lsr
    157  244f		       69 00		      adc	#<miniscoretable
    158  2451		       aa		      tax
    159  2452		       60		      rts
    160  2453
------- FILE titlescreen/asm/titlescreen.asm
    181  2453					      endif		;mk_score_on
    182  2453
    183  2453					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 2
      0  2453					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2453
      2  2453				   draw_gameselect_display
      3  2453		       a9 00		      lda	#0
      4  2455		       85 1b		      sta	GRP0
      5  2457		       85 1c		      sta	GRP1
      6  2459
      7  2459		       a0 04		      ldy	#4
      8  245b		       84 f1		      sty	aux2
      9  245d
     10  245d		       ad 50 b9 	      lda	bmp_gameselect_color
     11  2460		       85 06		      sta	COLUP0
     12  2462		       85 07		      sta	COLUP1
     13  2464
     14  2464							;change gamenumber to a BCD number and stick it in temp5
     15  2464		       a5 d4		      lda	gamenumber
     16  2466		       85 9e		      sta	temp3
     17  2468		       a9 00		      lda	#0
     18  246a		       85 9f		      sta	temp4
     19  246c		       a2 08		      ldx	#8
     20  246e		       18		      clc
     21  246f		       f8		      sed
     22  2470				   converttobcd
     23  2470		       06 9e		      asl	temp3
     24  2472		       a5 9f		      lda	temp4
     25  2474		       65 9f		      adc	temp4
     26  2476		       85 9f		      sta	temp4
     27  2478		       ca		      dex
     28  2479		       d0 f5		      bne	converttobcd
     29  247b		       d8		      cld
     30  247c
     31  247c		       a5 9f		      lda	temp4
     32  247e		       29 0f		      and	#$0f
     33  2480		       85 9e		      sta	temp3
     34  2482		       0a		      asl
     35  2483		       0a		      asl
     36  2484		       18		      clc
     37  2485		       65 9e		      adc	temp3	; *5
     38  2487		       18		      clc
     39  2488		       69 65		      adc	#<(font_gameselect_img)
     40  248a		       85 a0		      sta	scorepointers+10
     41  248c
     42  248c		       a5 9f		      lda	temp4
     43  248e		       29 f0		      and	#$f0
     44  2490		       4a		      lsr
     45  2491		       4a		      lsr
     46  2492		       85 9e		      sta	temp3
     47  2494		       4a		      lsr
     48  2495		       4a		      lsr
     49  2496		       18		      clc
     50  2497		       65 9e		      adc	temp3	; *5
     51  2499		       18		      clc
     52  249a		       69 65		      adc	#<(font_gameselect_img)
     53  249c		       85 9e		      sta	scorepointers+8
     54  249e
     55  249e
     56  249e							;setup score pointers to point at my bitmap slices instead
     57  249e		       a9 51		      lda	#<(bmp_gameselect_CHAR0)
     58  24a0		       85 96		      sta	scorepointers+0
     59  24a2		       a9 b9		      lda	#>(bmp_gameselect_CHAR0)
     60  24a4		       85 97		      sta	scorepointers+1
     61  24a6		       a9 56		      lda	#<(bmp_gameselect_CHAR1)
     62  24a8		       85 98		      sta	scorepointers+2
     63  24aa		       a9 b9		      lda	#>(bmp_gameselect_CHAR1)
     64  24ac		       85 99		      sta	scorepointers+3
     65  24ae		       a9 5b		      lda	#<(bmp_gameselect_CHAR2)
     66  24b0		       85 9a		      sta	scorepointers+4
     67  24b2		       a9 b9		      lda	#>(bmp_gameselect_CHAR2)
     68  24b4		       85 9b		      sta	scorepointers+5
     69  24b6		       a9 60		      lda	#<(bmp_gameselect_CHAR3)
     70  24b8		       85 9c		      sta	scorepointers+6
     71  24ba		       a9 b9		      lda	#>(bmp_gameselect_CHAR3)
     72  24bc		       85 9d		      sta	scorepointers+7
     73  24be
     74  24be		       a9 b9		      lda	#>(font_gameselect_img)
     75  24c0		       85 9f		      sta	scorepointers+9
     76  24c2
     77  24c2		       a9 b9		      lda	#>(font_gameselect_img)
     78  24c4		       85 a1		      sta	scorepointers+11
     79  24c6
     80  24c6		       4c 18 b1 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  24c9					      endif		;mk_gameselect_on
    186  24c9
    187  24c9				   PFWAIT
    188  24c9		       ad 84 02 	      lda	INTIM
    189  24cc		       d0 fb		      bne	PFWAIT
    190  24ce		       85 02		      sta	WSYNC
    191  24d0
    192  24d0				   OVERSCAN
    193  24d0					      ifnconst	overscan_time
    194  24d0		       a9 a2		      lda	#34+128
    195  24d2				  -	      else
    196  24d2				  -	      lda	#overscan_time+128-5
    197  24d2					      endif
    198  24d2		       8d 96 02 	      sta	TIM64T
    199  24d5
    200  24d5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  24d5				  -	      ifconst	player9height
    202  24d5				  -	      ldy	#8
    203  24d5				  -	      lda	#0
    204  24d5				  -	      sta	player0height
    205  24d5				  -.playerheightfixloop
    206  24d5				  -	      sta	player1height,y
    207  24d5				  -	      ifconst	_NUSIZ1
    208  24d5				  -	      sta	_NUSIZ1,y
    209  24d5				  -	      endif
    210  24d5				  -	      dey
    211  24d5				  -	      bpl	.playerheightfixloop
    212  24d5					      endif
    213  24d5
    214  24d5		       a9 c2		      lda	#%11000010
    215  24d7		       85 02		      sta	WSYNC
    216  24d9		       85 01		      sta	VBLANK
      0  24db					      RETURN
      1  24db				  -	      ifnconst	bankswitch
      2  24db				  -	      rts
      3  24db					      else
      4  24db		       4c dd ff 	      jmp	BS_return
      5  24de					      endif
    218  24de
    219  24de					      ifconst	mk_48x1_1_on
------- FILE titlescreen/48x1_1_image.asm LEVEL 3 PASS 2
      0  24de					      include	"titlescreen/48x1_1_image.asm"
      1  24de
      2  24de
      3  24de							; *** if you want to modify the bitmap color on the fly, just dim a
      4  24de							; *** variable in bB called "bmp_48x1_1_color", and use it to set the
      5  24de							; *** color.
      6  24de
      7  24de
      8  24de							;*** this is the height of the displayed data
      9  24de		       00 62	   bmp_48x1_1_window =	98
     10  24de
     11  24de							;*** this is the height of the bitmap data
     12  24de		       00 62	   bmp_48x1_1_height =	98
     13  24de
     14  24de				  -	      ifnconst	bmp_48x1_1_color
     15  24de				  -bmp_48x1_1_color
     16  24de					      endif
     17  24de		       4a		      .byte.b	$4a
     18  24df
     19  24df				  -	      ifnconst	bmp_48x1_1_PF1
     20  24df				  -bmp_48x1_1_PF1
     21  24df					      endif
     22  24df		       00		      BYTE.b	%00000000
     23  24e0				  -	      ifnconst	bmp_48x1_1_PF2
     24  24e0				  -bmp_48x1_1_PF2
     25  24e0					      endif
     26  24e0		       00		      BYTE.b	%00000000
     27  24e1				  -	      ifnconst	bmp_48x1_1_background
     28  24e1				  -bmp_48x1_1_background
     29  24e1					      endif
     30  24e1		       00		      BYTE.b	$00
     31  24e2
     32  24e2					      if	>. != >[.+bmp_48x1_1_height]
     33  2500		       00 00 00 00*	      align	256
     34  2500					      endif
     35  2500
     36  2500				   bmp_48x1_1_00
     37  2500
     38  2500		       00		      BYTE.b	%00000000
     39  2501		       00		      BYTE.b	%00000000
     40  2502		       00		      BYTE.b	%00000000
     41  2503		       00		      BYTE.b	%00000000
     42  2504		       00		      BYTE.b	%00000000
     43  2505		       00		      BYTE.b	%00000000
     44  2506		       00		      BYTE.b	%00000000
     45  2507		       00		      BYTE.b	%00000000
     46  2508		       00		      BYTE.b	%00000000
     47  2509		       00		      BYTE.b	%00000000
     48  250a		       00		      BYTE.b	%00000000
     49  250b		       00		      BYTE.b	%00000000
     50  250c		       00		      BYTE.b	%00000000
     51  250d		       00		      BYTE.b	%00000000
     52  250e		       00		      BYTE.b	%00000000
     53  250f		       00		      BYTE.b	%00000000
     54  2510		       00		      BYTE.b	%00000000
     55  2511		       00		      BYTE.b	%00000000
     56  2512		       00		      BYTE.b	%00000000
     57  2513		       00		      BYTE.b	%00000000
     58  2514		       00		      BYTE.b	%00000000
     59  2515		       00		      BYTE.b	%00000000
     60  2516		       00		      BYTE.b	%00000000
     61  2517		       00		      BYTE.b	%00000000
     62  2518		       00		      BYTE.b	%00000000
     63  2519		       00		      BYTE.b	%00000000
     64  251a		       00		      BYTE.b	%00000000
     65  251b		       00		      BYTE.b	%00000000
     66  251c		       80		      BYTE.b	%10000000
     67  251d		       7e		      BYTE.b	%01111110
     68  251e		       86		      BYTE.b	%10000110
     69  251f		       7b		      BYTE.b	%01111011
     70  2520		       1d		      BYTE.b	%00011101
     71  2521		       06		      BYTE.b	%00000110
     72  2522		       02		      BYTE.b	%00000010
     73  2523		       02		      BYTE.b	%00000010
     74  2524		       03		      BYTE.b	%00000011
     75  2525		       03		      BYTE.b	%00000011
     76  2526		       03		      BYTE.b	%00000011
     77  2527		       01		      BYTE.b	%00000001
     78  2528		       00		      BYTE.b	%00000000
     79  2529		       00		      BYTE.b	%00000000
     80  252a		       00		      BYTE.b	%00000000
     81  252b		       00		      BYTE.b	%00000000
     82  252c		       00		      BYTE.b	%00000000
     83  252d		       01		      BYTE.b	%00000001
     84  252e		       0f		      BYTE.b	%00001111
     85  252f		       3f		      BYTE.b	%00111111
     86  2530		       00		      BYTE.b	%00000000
     87  2531		       3f		      BYTE.b	%00111111
     88  2532		       07		      BYTE.b	%00000111
     89  2533		       01		      BYTE.b	%00000001
     90  2534		       00		      BYTE.b	%00000000
     91  2535		       00		      BYTE.b	%00000000
     92  2536		       00		      BYTE.b	%00000000
     93  2537		       00		      BYTE.b	%00000000
     94  2538		       00		      BYTE.b	%00000000
     95  2539		       00		      BYTE.b	%00000000
     96  253a		       00		      BYTE.b	%00000000
     97  253b		       03		      BYTE.b	%00000011
     98  253c		       07		      BYTE.b	%00000111
     99  253d		       0c		      BYTE.b	%00001100
    100  253e		       1b		      BYTE.b	%00011011
    101  253f		       17		      BYTE.b	%00010111
    102  2540		       2c		      BYTE.b	%00101100
    103  2541		       10		      BYTE.b	%00010000
    104  2542		       20		      BYTE.b	%00100000
    105  2543		       20		      BYTE.b	%00100000
    106  2544		       60		      BYTE.b	%01100000
    107  2545		       40		      BYTE.b	%01000000
    108  2546		       00		      BYTE.b	%00000000
    109  2547		       00		      BYTE.b	%00000000
    110  2548		       00		      BYTE.b	%00000000
    111  2549		       00		      BYTE.b	%00000000
    112  254a		       00		      BYTE.b	%00000000
    113  254b		       00		      BYTE.b	%00000000
    114  254c		       00		      BYTE.b	%00000000
    115  254d		       00		      BYTE.b	%00000000
    116  254e		       00		      BYTE.b	%00000000
    117  254f		       00		      BYTE.b	%00000000
    118  2550		       00		      BYTE.b	%00000000
    119  2551		       00		      BYTE.b	%00000000
    120  2552		       00		      BYTE.b	%00000000
    121  2553		       00		      BYTE.b	%00000000
    122  2554		       00		      BYTE.b	%00000000
    123  2555		       00		      BYTE.b	%00000000
    124  2556		       00		      BYTE.b	%00000000
    125  2557		       00		      BYTE.b	%00000000
    126  2558		       00		      BYTE.b	%00000000
    127  2559		       00		      BYTE.b	%00000000
    128  255a		       00		      BYTE.b	%00000000
    129  255b		       00		      BYTE.b	%00000000
    130  255c		       00		      BYTE.b	%00000000
    131  255d		       00		      BYTE.b	%00000000
    132  255e		       00		      BYTE.b	%00000000
    133  255f		       00		      BYTE.b	%00000000
    134  2560		       00		      BYTE.b	%00000000
    135  2561		       00		      BYTE.b	%00000000
    136  2562
    137  2562				  -	      if	>. != >[.+bmp_48x1_1_height]
    138  2562				  -	      align	256
    139  2562					      endif
    140  2562
    141  2562				   bmp_48x1_1_01
    142  2562
    143  2562		       00		      BYTE.b	%00000000
    144  2563		       00		      BYTE.b	%00000000
    145  2564		       06		      BYTE.b	%00000110
    146  2565		       06		      BYTE.b	%00000110
    147  2566		       06		      BYTE.b	%00000110
    148  2567		       06		      BYTE.b	%00000110
    149  2568		       07		      BYTE.b	%00000111
    150  2569		       02		      BYTE.b	%00000010
    151  256a		       03		      BYTE.b	%00000011
    152  256b		       03		      BYTE.b	%00000011
    153  256c		       01		      BYTE.b	%00000001
    154  256d		       01		      BYTE.b	%00000001
    155  256e		       00		      BYTE.b	%00000000
    156  256f		       00		      BYTE.b	%00000000
    157  2570		       00		      BYTE.b	%00000000
    158  2571		       00		      BYTE.b	%00000000
    159  2572		       00		      BYTE.b	%00000000
    160  2573		       00		      BYTE.b	%00000000
    161  2574		       00		      BYTE.b	%00000000
    162  2575		       00		      BYTE.b	%00000000
    163  2576		       60		      BYTE.b	%01100000
    164  2577		       50		      BYTE.b	%01010000
    165  2578		       71		      BYTE.b	%01110001
    166  2579		       79		      BYTE.b	%01111001
    167  257a		       2d		      BYTE.b	%00101101
    168  257b		       3c		      BYTE.b	%00111100
    169  257c		       36		      BYTE.b	%00110110
    170  257d		       17		      BYTE.b	%00010111
    171  257e		       1b		      BYTE.b	%00011011
    172  257f		       1b		      BYTE.b	%00011011
    173  2580		       1d		      BYTE.b	%00011101
    174  2581		       1c		      BYTE.b	%00011100
    175  2582		       0d		      BYTE.b	%00001101
    176  2583		       8d		      BYTE.b	%10001101
    177  2584		       8d		      BYTE.b	%10001101
    178  2585		       e3		      BYTE.b	%11100011
    179  2586		       73		      BYTE.b	%01110011
    180  2587		       76		      BYTE.b	%01110110
    181  2588		       75		      BYTE.b	%01110101
    182  2589		       85		      BYTE.b	%10000101
    183  258a		       ef		      BYTE.b	%11101111
    184  258b		       ef		      BYTE.b	%11101111
    185  258c		       2f		      BYTE.b	%00101111
    186  258d		       0f		      BYTE.b	%00001111
    187  258e		       6f		      BYTE.b	%01101111
    188  258f		       ef		      BYTE.b	%11101111
    189  2590		       ef		      BYTE.b	%11101111
    190  2591		       ef		      BYTE.b	%11101111
    191  2592		       0f		      BYTE.b	%00001111
    192  2593		       ef		      BYTE.b	%11101111
    193  2594		       ef		      BYTE.b	%11101111
    194  2595		       ef		      BYTE.b	%11101111
    195  2596		       6f		      BYTE.b	%01101111
    196  2597		       0c		      BYTE.b	%00001100
    197  2598		       0d		      BYTE.b	%00001101
    198  2599		       0d		      BYTE.b	%00001101
    199  259a		       0f		      BYTE.b	%00001111
    200  259b		       17		      BYTE.b	%00010111
    201  259c		       37		      BYTE.b	%00110111
    202  259d		       f6		      BYTE.b	%11110110
    203  259e		       e6		      BYTE.b	%11100110
    204  259f		       1b		      BYTE.b	%00011011
    205  25a0		       fb		      BYTE.b	%11111011
    206  25a1		       fb		      BYTE.b	%11111011
    207  25a2		       f5		      BYTE.b	%11110101
    208  25a3		       05		      BYTE.b	%00000101
    209  25a4		       0d		      BYTE.b	%00001101
    210  25a5		       0e		      BYTE.b	%00001110
    211  25a6		       1d		      BYTE.b	%00011101
    212  25a7		       1b		      BYTE.b	%00011011
    213  25a8		       1b		      BYTE.b	%00011011
    214  25a9		       37		      BYTE.b	%00110111
    215  25aa		       36		      BYTE.b	%00110110
    216  25ab		       2c		      BYTE.b	%00101100
    217  25ac		       68		      BYTE.b	%01101000
    218  25ad		       50		      BYTE.b	%01010000
    219  25ae		       30		      BYTE.b	%00110000
    220  25af		       60		      BYTE.b	%01100000
    221  25b0		       40		      BYTE.b	%01000000
    222  25b1		       01		      BYTE.b	%00000001
    223  25b2		       01		      BYTE.b	%00000001
    224  25b3		       03		      BYTE.b	%00000011
    225  25b4		       02		      BYTE.b	%00000010
    226  25b5		       02		      BYTE.b	%00000010
    227  25b6		       02		      BYTE.b	%00000010
    228  25b7		       02		      BYTE.b	%00000010
    229  25b8		       02		      BYTE.b	%00000010
    230  25b9		       02		      BYTE.b	%00000010
    231  25ba		       02		      BYTE.b	%00000010
    232  25bb		       02		      BYTE.b	%00000010
    233  25bc		       02		      BYTE.b	%00000010
    234  25bd		       02		      BYTE.b	%00000010
    235  25be		       02		      BYTE.b	%00000010
    236  25bf		       02		      BYTE.b	%00000010
    237  25c0		       02		      BYTE.b	%00000010
    238  25c1		       02		      BYTE.b	%00000010
    239  25c2		       00		      BYTE.b	%00000000
    240  25c3		       00		      BYTE.b	%00000000
    241  25c4
    242  25c4
    243  25c4					      if	>. != >[.+bmp_48x1_1_height]
    244  2600		       00 00 00 00*	      align	256
    245  2600					      endif
    246  2600
    247  2600				   bmp_48x1_1_02
    248  2600
    249  2600		       00		      BYTE.b	%00000000
    250  2601		       00		      BYTE.b	%00000000
    251  2602		       00		      BYTE.b	%00000000
    252  2603		       00		      BYTE.b	%00000000
    253  2604		       00		      BYTE.b	%00000000
    254  2605		       02		      BYTE.b	%00000010
    255  2606		       02		      BYTE.b	%00000010
    256  2607		       82		      BYTE.b	%10000010
    257  2608		       81		      BYTE.b	%10000001
    258  2609		       c1		      BYTE.b	%11000001
    259  260a		       41		      BYTE.b	%01000001
    260  260b		       e1		      BYTE.b	%11100001
    261  260c		       a1		      BYTE.b	%10100001
    262  260d		       a1		      BYTE.b	%10100001
    263  260e		       a1		      BYTE.b	%10100001
    264  260f		       a3		      BYTE.b	%10100011
    265  2610		       a3		      BYTE.b	%10100011
    266  2611		       a3		      BYTE.b	%10100011
    267  2612		       a3		      BYTE.b	%10100011
    268  2613		       a3		      BYTE.b	%10100011
    269  2614		       a3		      BYTE.b	%10100011
    270  2615		       a3		      BYTE.b	%10100011
    271  2616		       b3		      BYTE.b	%10110011
    272  2617		       b2		      BYTE.b	%10110010
    273  2618		       d0		      BYTE.b	%11010000
    274  2619		       d3		      BYTE.b	%11010011
    275  261a		       c9		      BYTE.b	%11001001
    276  261b		       1f		      BYTE.b	%00011111
    277  261c		       bf		      BYTE.b	%10111111
    278  261d		       7f		      BYTE.b	%01111111
    279  261e		       ff		      BYTE.b	%11111111
    280  261f		       ff		      BYTE.b	%11111111
    281  2620		       fe		      BYTE.b	%11111110
    282  2621		       fd		      BYTE.b	%11111101
    283  2622		       fd		      BYTE.b	%11111101
    284  2623		       fc		      BYTE.b	%11111100
    285  2624		       e0		      BYTE.b	%11100000
    286  2625		       e3		      BYTE.b	%11100011
    287  2626		       fc		      BYTE.b	%11111100
    288  2627		       ff		      BYTE.b	%11111111
    289  2628		       ff		      BYTE.b	%11111111
    290  2629		       ff		      BYTE.b	%11111111
    291  262a		       f8		      BYTE.b	%11111000
    292  262b		       f8		      BYTE.b	%11111000
    293  262c		       f5		      BYTE.b	%11110101
    294  262d		       f7		      BYTE.b	%11110111
    295  262e		       ff		      BYTE.b	%11111111
    296  262f		       f9		      BYTE.b	%11111001
    297  2630		       fd		      BYTE.b	%11111101
    298  2631		       fd		      BYTE.b	%11111101
    299  2632		       fd		      BYTE.b	%11111101
    300  2633		       fd		      BYTE.b	%11111101
    301  2634		       87		      BYTE.b	%10000111
    302  2635		       13		      BYTE.b	%00010011
    303  2636		       4b		      BYTE.b	%01001011
    304  2637		       23		      BYTE.b	%00100011
    305  2638		       01		      BYTE.b	%00000001
    306  2639		       81		      BYTE.b	%10000001
    307  263a		       c1		      BYTE.b	%11000001
    308  263b		       f9		      BYTE.b	%11111001
    309  263c		       e3		      BYTE.b	%11100011
    310  263d		       27		      BYTE.b	%00100111
    311  263e		       df		      BYTE.b	%11011111
    312  263f		       ff		      BYTE.b	%11111111
    313  2640		       ff		      BYTE.b	%11111111
    314  2641		       ff		      BYTE.b	%11111111
    315  2642		       ff		      BYTE.b	%11111111
    316  2643		       ff		      BYTE.b	%11111111
    317  2644		       7f		      BYTE.b	%01111111
    318  2645		       7f		      BYTE.b	%01111111
    319  2646		       2e		      BYTE.b	%00101110
    320  2647		       13		      BYTE.b	%00010011
    321  2648		       27		      BYTE.b	%00100111
    322  2649		       63		      BYTE.b	%01100011
    323  264a		       68		      BYTE.b	%01101000
    324  264b		       6b		      BYTE.b	%01101011
    325  264c		       6b		      BYTE.b	%01101011
    326  264d		       fb		      BYTE.b	%11111011
    327  264e		       db		      BYTE.b	%11011011
    328  264f		       bb		      BYTE.b	%10111011
    329  2650		       73		      BYTE.b	%01110011
    330  2651		       63		      BYTE.b	%01100011
    331  2652		       c3		      BYTE.b	%11000011
    332  2653		       81		      BYTE.b	%10000001
    333  2654		       81		      BYTE.b	%10000001
    334  2655		       81		      BYTE.b	%10000001
    335  2656		       81		      BYTE.b	%10000001
    336  2657		       81		      BYTE.b	%10000001
    337  2658		       81		      BYTE.b	%10000001
    338  2659		       81		      BYTE.b	%10000001
    339  265a		       81		      BYTE.b	%10000001
    340  265b		       81		      BYTE.b	%10000001
    341  265c		       01		      BYTE.b	%00000001
    342  265d		       00		      BYTE.b	%00000000
    343  265e		       00		      BYTE.b	%00000000
    344  265f		       00		      BYTE.b	%00000000
    345  2660		       00		      BYTE.b	%00000000
    346  2661		       00		      BYTE.b	%00000000
    347  2662
    348  2662
    349  2662				  -	      if	>. != >[.+bmp_48x1_1_height]
    350  2662				  -	      align	256
    351  2662					      endif
    352  2662
    353  2662				   bmp_48x1_1_03
    354  2662
    355  2662		       00		      BYTE.b	%00000000
    356  2663		       00		      BYTE.b	%00000000
    357  2664		       00		      BYTE.b	%00000000
    358  2665		       00		      BYTE.b	%00000000
    359  2666		       00		      BYTE.b	%00000000
    360  2667		       01		      BYTE.b	%00000001
    361  2668		       01		      BYTE.b	%00000001
    362  2669		       01		      BYTE.b	%00000001
    363  266a		       01		      BYTE.b	%00000001
    364  266b		       01		      BYTE.b	%00000001
    365  266c		       41		      BYTE.b	%01000001
    366  266d		       41		      BYTE.b	%01000001
    367  266e		       41		      BYTE.b	%01000001
    368  266f		       41		      BYTE.b	%01000001
    369  2670		       42		      BYTE.b	%01000010
    370  2671		       46		      BYTE.b	%01000110
    371  2672		       4d		      BYTE.b	%01001101
    372  2673		       5b		      BYTE.b	%01011011
    373  2674		       5b		      BYTE.b	%01011011
    374  2675		       5a		      BYTE.b	%01011010
    375  2676		       5a		      BYTE.b	%01011010
    376  2677		       56		      BYTE.b	%01010110
    377  2678		       54		      BYTE.b	%01010100
    378  2679		       d6		      BYTE.b	%11010110
    379  267a		       16		      BYTE.b	%00010110
    380  267b		       c6		      BYTE.b	%11000110
    381  267c		       f0		      BYTE.b	%11110000
    382  267d		       e9		      BYTE.b	%11101001
    383  267e		       fd		      BYTE.b	%11111101
    384  267f		       fe		      BYTE.b	%11111110
    385  2680		       fd		      BYTE.b	%11111101
    386  2681		       3f		      BYTE.b	%00111111
    387  2682		       1d		      BYTE.b	%00011101
    388  2683		       df		      BYTE.b	%11011111
    389  2684		       ff		      BYTE.b	%11111111
    390  2685		       5f		      BYTE.b	%01011111
    391  2686		       87		      BYTE.b	%10000111
    392  2687		       c7		      BYTE.b	%11000111
    393  2688		       07		      BYTE.b	%00000111
    394  2689		       ff		      BYTE.b	%11111111
    395  268a		       ff		      BYTE.b	%11111111
    396  268b		       ff		      BYTE.b	%11111111
    397  268c		       7f		      BYTE.b	%01111111
    398  268d		       0f		      BYTE.b	%00001111
    399  268e		       8f		      BYTE.b	%10001111
    400  268f		       ef		      BYTE.b	%11101111
    401  2690		       ef		      BYTE.b	%11101111
    402  2691		       df		      BYTE.b	%11011111
    403  2692		       9f		      BYTE.b	%10011111
    404  2693		       bf		      BYTE.b	%10111111
    405  2694		       bf		      BYTE.b	%10111111
    406  2695		       bf		      BYTE.b	%10111111
    407  2696		       e1		      BYTE.b	%11100001
    408  2697		       c8		      BYTE.b	%11001000
    409  2698		       92		      BYTE.b	%10010010
    410  2699		       84		      BYTE.b	%10000100
    411  269a		       80		      BYTE.b	%10000000
    412  269b		       81		      BYTE.b	%10000001
    413  269c		       83		      BYTE.b	%10000011
    414  269d		       83		      BYTE.b	%10000011
    415  269e		       a2		      BYTE.b	%10100010
    416  269f		       b1		      BYTE.b	%10110001
    417  26a0		       ff		      BYTE.b	%11111111
    418  26a1		       ff		      BYTE.b	%11111111
    419  26a2		       ff		      BYTE.b	%11111111
    420  26a3		       ff		      BYTE.b	%11111111
    421  26a4		       ff		      BYTE.b	%11111111
    422  26a5		       ff		      BYTE.b	%11111111
    423  26a6		       ff		      BYTE.b	%11111111
    424  26a7		       fe		      BYTE.b	%11111110
    425  26a8		       34		      BYTE.b	%00110100
    426  26a9		       f8		      BYTE.b	%11111000
    427  26aa		       f3		      BYTE.b	%11110011
    428  26ab		       cb		      BYTE.b	%11001011
    429  26ac		       0d		      BYTE.b	%00001101
    430  26ad		       6d		      BYTE.b	%01101101
    431  26ae		       65		      BYTE.b	%01100101
    432  26af		       66		      BYTE.b	%01100110
    433  26b0		       46		      BYTE.b	%01000110
    434  26b1		       42		      BYTE.b	%01000010
    435  26b2		       42		      BYTE.b	%01000010
    436  26b3		       42		      BYTE.b	%01000010
    437  26b4		       45		      BYTE.b	%01000101
    438  26b5		       45		      BYTE.b	%01000101
    439  26b6		       45		      BYTE.b	%01000101
    440  26b7		       45		      BYTE.b	%01000101
    441  26b8		       45		      BYTE.b	%01000101
    442  26b9		       06		      BYTE.b	%00000110
    443  26ba		       02		      BYTE.b	%00000010
    444  26bb		       03		      BYTE.b	%00000011
    445  26bc		       01		      BYTE.b	%00000001
    446  26bd		       01		      BYTE.b	%00000001
    447  26be		       00		      BYTE.b	%00000000
    448  26bf		       00		      BYTE.b	%00000000
    449  26c0		       00		      BYTE.b	%00000000
    450  26c1		       00		      BYTE.b	%00000000
    451  26c2		       00		      BYTE.b	%00000000
    452  26c3		       00		      BYTE.b	%00000000
    453  26c4
    454  26c4
    455  26c4
    456  26c4					      if	>. != >[.+bmp_48x1_1_height]
    457  2700		       00 00 00 00*	      align	256
    458  2700					      endif
    459  2700
    460  2700				   bmp_48x1_1_04
    461  2700
    462  2700		       00		      BYTE.b	%00000000
    463  2701		       40		      BYTE.b	%01000000
    464  2702		       40		      BYTE.b	%01000000
    465  2703		       40		      BYTE.b	%01000000
    466  2704		       40		      BYTE.b	%01000000
    467  2705		       40		      BYTE.b	%01000000
    468  2706		       40		      BYTE.b	%01000000
    469  2707		       40		      BYTE.b	%01000000
    470  2708		       40		      BYTE.b	%01000000
    471  2709		       40		      BYTE.b	%01000000
    472  270a		       40		      BYTE.b	%01000000
    473  270b		       40		      BYTE.b	%01000000
    474  270c		       40		      BYTE.b	%01000000
    475  270d		       40		      BYTE.b	%01000000
    476  270e		       80		      BYTE.b	%10000000
    477  270f		       80		      BYTE.b	%10000000
    478  2710		       80		      BYTE.b	%10000000
    479  2711		       00		      BYTE.b	%00000000
    480  2712		       00		      BYTE.b	%00000000
    481  2713		       06		      BYTE.b	%00000110
    482  2714		       04		      BYTE.b	%00000100
    483  2715		       0a		      BYTE.b	%00001010
    484  2716		       18		      BYTE.b	%00011000
    485  2717		       34		      BYTE.b	%00110100
    486  2718		       34		      BYTE.b	%00110100
    487  2719		       68		      BYTE.b	%01101000
    488  271a		       e8		      BYTE.b	%11101000
    489  271b		       d8		      BYTE.b	%11011000
    490  271c		       d8		      BYTE.b	%11011000
    491  271d		       b0		      BYTE.b	%10110000
    492  271e		       70		      BYTE.b	%01110000
    493  271f		       67		      BYTE.b	%01100111
    494  2720		       af		      BYTE.b	%10101111
    495  2721		       9f		      BYTE.b	%10011111
    496  2722		       dc		      BYTE.b	%11011100
    497  2723		       db		      BYTE.b	%11011011
    498  2724		       d7		      BYTE.b	%11010111
    499  2725		       ef		      BYTE.b	%11101111
    500  2726		       ee		      BYTE.b	%11101110
    501  2727		       6c		      BYTE.b	%01101100
    502  2728		       ac		      BYTE.b	%10101100
    503  2729		       a8		      BYTE.b	%10101000
    504  272a		       f0		      BYTE.b	%11110000
    505  272b		       f0		      BYTE.b	%11110000
    506  272c		       f4		      BYTE.b	%11110100
    507  272d		       f7		      BYTE.b	%11110111
    508  272e		       f7		      BYTE.b	%11110111
    509  272f		       f7		      BYTE.b	%11110111
    510  2730		       f0		      BYTE.b	%11110000
    511  2731		       f7		      BYTE.b	%11110111
    512  2732		       f7		      BYTE.b	%11110111
    513  2733		       f7		      BYTE.b	%11110111
    514  2734		       f6		      BYTE.b	%11110110
    515  2735		       30		      BYTE.b	%00110000
    516  2736		       b0		      BYTE.b	%10110000
    517  2737		       b4		      BYTE.b	%10110100
    518  2738		       ef		      BYTE.b	%11101111
    519  2739		       e7		      BYTE.b	%11100111
    520  273a		       e3		      BYTE.b	%11100011
    521  273b		       6d		      BYTE.b	%01101101
    522  273c		       5e		      BYTE.b	%01011110
    523  273d		       de		      BYTE.b	%11011110
    524  273e		       c3		      BYTE.b	%11000011
    525  273f		       c1		      BYTE.b	%11000001
    526  2740		       a1		      BYTE.b	%10100001
    527  2741		       a1		      BYTE.b	%10100001
    528  2742		       b0		      BYTE.b	%10110000
    529  2743		       30		      BYTE.b	%00110000
    530  2744		       30		      BYTE.b	%00110000
    531  2745		       d8		      BYTE.b	%11011000
    532  2746		       d8		      BYTE.b	%11011000
    533  2747		       68		      BYTE.b	%01101000
    534  2748		       68		      BYTE.b	%01101000
    535  2749		       2c		      BYTE.b	%00101100
    536  274a		       14		      BYTE.b	%00010100
    537  274b		       88		      BYTE.b	%10001000
    538  274c		       8c		      BYTE.b	%10001100
    539  274d		       84		      BYTE.b	%10000100
    540  274e		       80		      BYTE.b	%10000000
    541  274f		       80		      BYTE.b	%10000000
    542  2750		       80		      BYTE.b	%10000000
    543  2751		       80		      BYTE.b	%10000000
    544  2752		       00		      BYTE.b	%00000000
    545  2753		       00		      BYTE.b	%00000000
    546  2754		       00		      BYTE.b	%00000000
    547  2755		       00		      BYTE.b	%00000000
    548  2756		       00		      BYTE.b	%00000000
    549  2757		       80		      BYTE.b	%10000000
    550  2758		       80		      BYTE.b	%10000000
    551  2759		       40		      BYTE.b	%01000000
    552  275a		       40		      BYTE.b	%01000000
    553  275b		       40		      BYTE.b	%01000000
    554  275c		       a0		      BYTE.b	%10100000
    555  275d		       40		      BYTE.b	%01000000
    556  275e		       00		      BYTE.b	%00000000
    557  275f		       00		      BYTE.b	%00000000
    558  2760		       00		      BYTE.b	%00000000
    559  2761		       00		      BYTE.b	%00000000
    560  2762
    561  2762				  -	      if	>. != >[.+bmp_48x1_1_height]
    562  2762				  -	      align	256
    563  2762					      endif
    564  2762
    565  2762				   bmp_48x1_1_05
    566  2762		       00		      BYTE.b	%00000000
    567  2763		       00		      BYTE.b	%00000000
    568  2764		       00		      BYTE.b	%00000000
    569  2765		       00		      BYTE.b	%00000000
    570  2766		       00		      BYTE.b	%00000000
    571  2767		       00		      BYTE.b	%00000000
    572  2768		       00		      BYTE.b	%00000000
    573  2769		       00		      BYTE.b	%00000000
    574  276a		       00		      BYTE.b	%00000000
    575  276b		       00		      BYTE.b	%00000000
    576  276c		       00		      BYTE.b	%00000000
    577  276d		       00		      BYTE.b	%00000000
    578  276e		       00		      BYTE.b	%00000000
    579  276f		       00		      BYTE.b	%00000000
    580  2770		       00		      BYTE.b	%00000000
    581  2771		       00		      BYTE.b	%00000000
    582  2772		       00		      BYTE.b	%00000000
    583  2773		       00		      BYTE.b	%00000000
    584  2774		       00		      BYTE.b	%00000000
    585  2775		       00		      BYTE.b	%00000000
    586  2776		       00		      BYTE.b	%00000000
    587  2777		       00		      BYTE.b	%00000000
    588  2778		       00		      BYTE.b	%00000000
    589  2779		       00		      BYTE.b	%00000000
    590  277a		       00		      BYTE.b	%00000000
    591  277b		       00		      BYTE.b	%00000000
    592  277c		       00		      BYTE.b	%00000000
    593  277d		       03		      BYTE.b	%00000011
    594  277e		       0c		      BYTE.b	%00001100
    595  277f		       08		      BYTE.b	%00001000
    596  2780		       08		      BYTE.b	%00001000
    597  2781		       14		      BYTE.b	%00010100
    598  2782		       94		      BYTE.b	%10010100
    599  2783		       ec		      BYTE.b	%11101100
    600  2784		       d8		      BYTE.b	%11011000
    601  2785		       30		      BYTE.b	%00110000
    602  2786		       f0		      BYTE.b	%11110000
    603  2787		       00		      BYTE.b	%00000000
    604  2788		       00		      BYTE.b	%00000000
    605  2789		       00		      BYTE.b	%00000000
    606  278a		       00		      BYTE.b	%00000000
    607  278b		       00		      BYTE.b	%00000000
    608  278c		       00		      BYTE.b	%00000000
    609  278d		       00		      BYTE.b	%00000000
    610  278e		       00		      BYTE.b	%00000000
    611  278f		       00		      BYTE.b	%00000000
    612  2790		       c0		      BYTE.b	%11000000
    613  2791		       f8		      BYTE.b	%11111000
    614  2792		       00		      BYTE.b	%00000000
    615  2793		       f8		      BYTE.b	%11111000
    616  2794		       e0		      BYTE.b	%11100000
    617  2795		       80		      BYTE.b	%10000000
    618  2796		       00		      BYTE.b	%00000000
    619  2797		       00		      BYTE.b	%00000000
    620  2798		       00		      BYTE.b	%00000000
    621  2799		       00		      BYTE.b	%00000000
    622  279a		       00		      BYTE.b	%00000000
    623  279b		       00		      BYTE.b	%00000000
    624  279c		       80		      BYTE.b	%10000000
    625  279d		       80		      BYTE.b	%10000000
    626  279e		       80		      BYTE.b	%10000000
    627  279f		       c0		      BYTE.b	%11000000
    628  27a0		       40		      BYTE.b	%01000000
    629  27a1		       40		      BYTE.b	%01000000
    630  27a2		       60		      BYTE.b	%01100000
    631  27a3		       bc		      BYTE.b	%10111100
    632  27a4		       c0		      BYTE.b	%11000000
    633  27a5		       7c		      BYTE.b	%01111100
    634  27a6		       3f		      BYTE.b	%00111111
    635  27a7		       00		      BYTE.b	%00000000
    636  27a8		       00		      BYTE.b	%00000000
    637  27a9		       00		      BYTE.b	%00000000
    638  27aa		       00		      BYTE.b	%00000000
    639  27ab		       00		      BYTE.b	%00000000
    640  27ac		       00		      BYTE.b	%00000000
    641  27ad		       00		      BYTE.b	%00000000
    642  27ae		       00		      BYTE.b	%00000000
    643  27af		       00		      BYTE.b	%00000000
    644  27b0		       00		      BYTE.b	%00000000
    645  27b1		       00		      BYTE.b	%00000000
    646  27b2		       00		      BYTE.b	%00000000
    647  27b3		       00		      BYTE.b	%00000000
    648  27b4		       00		      BYTE.b	%00000000
    649  27b5		       00		      BYTE.b	%00000000
    650  27b6		       00		      BYTE.b	%00000000
    651  27b7		       00		      BYTE.b	%00000000
    652  27b8		       00		      BYTE.b	%00000000
    653  27b9		       00		      BYTE.b	%00000000
    654  27ba		       00		      BYTE.b	%00000000
    655  27bb		       00		      BYTE.b	%00000000
    656  27bc		       00		      BYTE.b	%00000000
    657  27bd		       00		      BYTE.b	%00000000
    658  27be		       00		      BYTE.b	%00000000
    659  27bf		       00		      BYTE.b	%00000000
    660  27c0		       00		      BYTE.b	%00000000
    661  27c1		       00		      BYTE.b	%00000000
    662  27c2		       00		      BYTE.b	%00000000
    663  27c3		       00		      BYTE.b	%00000000
    664  27c4
    665  27c4
------- FILE titlescreen/asm/titlescreen.asm
    221  27c4					      endif
    222  27c4					      ifconst	mk_48x1_2_on
------- FILE titlescreen/48x1_2_image.asm LEVEL 3 PASS 2
      0  27c4					      include	"titlescreen/48x1_2_image.asm"
      1  27c4
      2  27c4
      3  27c4							; *** if you want to modify the bitmap color on the fly, just dim a
      4  27c4							; *** variable in bB called "bmp_48x1_2_color", and use it to set the
      5  27c4							; *** color.
      6  27c4
      7  27c4
      8  27c4							;*** this is the height of the displayed data
      9  27c4		       00 0b	   bmp_48x1_2_window =	11
     10  27c4
     11  27c4							;*** this is the height of the bitmap data
     12  27c4		       00 0b	   bmp_48x1_2_height =	11
     13  27c4
     14  27c4				  -	      ifnconst	bmp_48x1_2_color
     15  27c4				  -bmp_48x1_2_color
     16  27c4					      endif
     17  27c4		       4a		      .byte.b	$4a
     18  27c5
     19  27c5				  -	      ifnconst	bmp_48x1_2_PF1
     20  27c5				  -bmp_48x1_2_PF1
     21  27c5					      endif
     22  27c5		       00		      BYTE.b	%00000000
     23  27c6				  -	      ifnconst	bmp_48x1_2_PF2
     24  27c6				  -bmp_48x1_2_PF2
     25  27c6					      endif
     26  27c6		       00		      BYTE.b	%00000000
     27  27c7				  -	      ifnconst	bmp_48x1_2_background
     28  27c7				  -bmp_48x1_2_background
     29  27c7					      endif
     30  27c7		       00		      BYTE.b	$00
     31  27c8
     32  27c8				  -	      if	>. != >[.+bmp_48x1_2_height]
     33  27c8				  -	      align	256
     34  27c8					      endif
     35  27c8
     36  27c8				   bmp_48x1_2_00
     37  27c8
     38  27c8		       0e		      BYTE.b	%00001110
     39  27c9		       08		      BYTE.b	%00001000
     40  27ca		       08		      BYTE.b	%00001000
     41  27cb		       08		      BYTE.b	%00001000
     42  27cc		       0e		      BYTE.b	%00001110
     43  27cd		       00		      BYTE.b	%00000000
     44  27ce		       ee		      BYTE.b	%11101110
     45  27cf		       8a		      BYTE.b	%10001010
     46  27d0		       8a		      BYTE.b	%10001010
     47  27d1		       8a		      BYTE.b	%10001010
     48  27d2		       ee		      BYTE.b	%11101110
     49  27d3
     50  27d3				  -	      if	>. != >[.+bmp_48x1_2_height]
     51  27d3				  -	      align	256
     52  27d3					      endif
     53  27d3
     54  27d3				   bmp_48x1_2_01
     55  27d3
     56  27d3		       e8		      BYTE.b	%11101000
     57  27d4		       a8		      BYTE.b	%10101000
     58  27d5		       ae		      BYTE.b	%10101110
     59  27d6		       aa		      BYTE.b	%10101010
     60  27d7		       ee		      BYTE.b	%11101110
     61  27d8		       00		      BYTE.b	%00000000
     62  27d9		       84		      BYTE.b	%10000100
     63  27da		       84		      BYTE.b	%10000100
     64  27db		       ee		      BYTE.b	%11101110
     65  27dc		       aa		      BYTE.b	%10101010
     66  27dd		       ea		      BYTE.b	%11101010
     67  27de
     68  27de				  -	      if	>. != >[.+bmp_48x1_2_height]
     69  27de				  -	      align	256
     70  27de					      endif
     71  27de
     72  27de				   bmp_48x1_2_02
     73  27de
     74  27de		       8e		      BYTE.b	%10001110
     75  27df		       88		      BYTE.b	%10001000
     76  27e0		       ec		      BYTE.b	%11101100
     77  27e1		       a8		      BYTE.b	%10101000
     78  27e2		       ee		      BYTE.b	%11101110
     79  27e3		       00		      BYTE.b	%00000000
     80  27e4		       ab		      BYTE.b	%10101011
     81  27e5		       ca		      BYTE.b	%11001010
     82  27e6		       eb		      BYTE.b	%11101011
     83  27e7		       aa		      BYTE.b	%10101010
     84  27e8		       eb		      BYTE.b	%11101011
     85  27e9
     86  27e9
     87  27e9				  -	      if	>. != >[.+bmp_48x1_2_height]
     88  27e9				  -	      align	256
     89  27e9					      endif
     90  27e9
     91  27e9				   bmp_48x1_2_03
     92  27e9
     93  27e9		       a4		      BYTE.b	%10100100
     94  27ea		       a4		      BYTE.b	%10100100
     95  27eb		       c4		      BYTE.b	%11000100
     96  27ec		       a4		      BYTE.b	%10100100
     97  27ed		       ee		      BYTE.b	%11101110
     98  27ee		       00		      BYTE.b	%00000000
     99  27ef		       a9		      BYTE.b	%10101001
    100  27f0		       a9		      BYTE.b	%10101001
    101  27f1		       b9		      BYTE.b	%10111001
    102  27f2		       29		      BYTE.b	%00101001
    103  27f3		       ab		      BYTE.b	%10101011
    104  27f4
    105  27f4				  -	      if	>. != >[.+bmp_48x1_2_height]
    106  27f4				  -	      align	256
    107  27f4					      endif
    108  27f4
    109  27f4				   bmp_48x1_2_04
    110  27f4
    111  27f4		       e9		      BYTE.b	%11101001
    112  27f5		       ab		      BYTE.b	%10101011
    113  27f6		       af		      BYTE.b	%10101111
    114  27f7		       ad		      BYTE.b	%10101101
    115  27f8		       e9		      BYTE.b	%11101001
    116  27f9		       00		      BYTE.b	%00000000
    117  27fa		       1d		      BYTE.b	%00011101
    118  27fb		       11		      BYTE.b	%00010001
    119  27fc		       1d		      BYTE.b	%00011101
    120  27fd		       05		      BYTE.b	%00000101
    121  27fe		       9d		      BYTE.b	%10011101
    122  27ff
    123  27ff
    124  27ff					      if	>. != >[.+bmp_48x1_2_height]
    125  2800		       00		      align	256
    126  2800					      endif
    127  2800
    128  2800				   bmp_48x1_2_05
    129  2800
    130  2800		       70		      BYTE.b	%01110000
    131  2801		       40		      BYTE.b	%01000000
    132  2802		       60		      BYTE.b	%01100000
    133  2803		       40		      BYTE.b	%01000000
    134  2804		       70		      BYTE.b	%01110000
    135  2805		       00		      BYTE.b	%00000000
    136  2806		       d7		      BYTE.b	%11010111
    137  2807		       55		      BYTE.b	%01010101
    138  2808		       55		      BYTE.b	%01010101
    139  2809		       55		      BYTE.b	%01010101
    140  280a		       d7		      BYTE.b	%11010111
    141  280b
    142  280b
    143  280b
------- FILE titlescreen/asm/titlescreen.asm
    224  280b					      endif
    225  280b				  -	      ifconst	mk_48x1_3_on
    226  280b				  -	      include	"titlescreen/48x1_3_image.asm"
    227  280b					      endif
    228  280b				  -	      ifconst	mk_48x1_4_on
    229  280b				  -	      include	"titlescreen/48x1_4_image.asm"
    230  280b					      endif
    231  280b				  -	      ifconst	mk_48x1_5_on
    232  280b				  -	      include	"titlescreen/48x1_5_image.asm"
    233  280b					      endif
    234  280b				  -	      ifconst	mk_48x1_6_on
    235  280b				  -	      include	"titlescreen/48x1_6_image.asm"
    236  280b					      endif
    237  280b				  -	      ifconst	mk_48x1_7_on
    238  280b				  -	      include	"titlescreen/48x1_7_image.asm"
    239  280b					      endif
    240  280b				  -	      ifconst	mk_48x1_8_on
    241  280b				  -	      include	"titlescreen/48x1_8_image.asm"
    242  280b					      endif
    243  280b
    244  280b
    245  280b				  -	      ifconst	mk_48x2_1_on
    246  280b				  -	      include	"titlescreen/48x2_1_image.asm"
    247  280b					      endif
    248  280b				  -	      ifconst	mk_48x2_2_on
    249  280b				  -	      include	"titlescreen/48x2_2_image.asm"
    250  280b					      endif
    251  280b				  -	      ifconst	mk_48x2_3_on
    252  280b				  -	      include	"titlescreen/48x2_3_image.asm"
    253  280b					      endif
    254  280b				  -	      ifconst	mk_48x2_4_on
    255  280b				  -	      include	"titlescreen/48x2_4_image.asm"
    256  280b					      endif
    257  280b				  -	      ifconst	mk_48x2_5_on
    258  280b				  -	      include	"titlescreen/48x2_5_image.asm"
    259  280b					      endif
    260  280b				  -	      ifconst	mk_48x2_6_on
    261  280b				  -	      include	"titlescreen/48x2_6_image.asm"
    262  280b					      endif
    263  280b				  -	      ifconst	mk_48x2_7_on
    264  280b				  -	      include	"titlescreen/48x2_7_image.asm"
    265  280b					      endif
    266  280b
    267  280b				  -	      ifconst	mk_48x2_8_on
    268  280b				  -	      include	"titlescreen/48x2_8_image.asm"
    269  280b					      endif
    270  280b
    271  280b
    272  280b					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 2
      0  280b					      include	"titlescreen/96x2_1_image.asm"
      1  280b
      2  280b							; *** if you want to modify the bitmap color on the fly, just dim a
      3  280b							; *** variable in bB called "bmp_96x2_1_color", and use it to set the
      4  280b							; *** color.
      5  280b
      6  280b
      7  280b							;*** this is the height of the displayed data
      8  280b		       00 0d	   bmp_96x2_1_window =	13
      9  280b
     10  280b							;*** this is the height of the bitmap data
     11  280b		       00 0d	   bmp_96x2_1_height =	13
     12  280b
     13  280b				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     14  280b				  -	      align	256
     15  280b					      endif
     16  280b
     17  280b							;*** this is the color of each line in the bitmap data
     18  280b				   bmp_96x2_1_colors
     19  280b		       3f		      BYTE.b	$3f
     20  280c		       3f		      BYTE.b	$3f
     21  280d		       3f		      BYTE.b	$3f
     22  280e		       3f		      BYTE.b	$3f
     23  280f		       2f		      BYTE.b	$2f
     24  2810		       2f		      BYTE.b	$2f
     25  2811		       2f		      BYTE.b	$2f
     26  2812		       2f		      BYTE.b	$2f
     27  2813		       2f		      BYTE.b	$2f
     28  2814		       1f		      BYTE.b	$1f
     29  2815		       1f		      BYTE.b	$1f
     30  2816		       1f		      BYTE.b	$1f
     31  2817		       1f		      BYTE.b	$1f
     32  2818
     33  2818				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     34  2818				  -	      align	256
     35  2818					      endif
     36  2818
     37  2818				   bmp_96x2_1_00
     38  2818
     39  2818		       ff		      BYTE.b	%11111111
     40  2819		       00		      BYTE.b	%00000000
     41  281a
     42  281a		       3e		      BYTE.b	%00111110
     43  281b		       61		      BYTE.b	%01100001
     44  281c		       c0		      BYTE.b	%11000000
     45  281d		       c0		      BYTE.b	%11000000
     46  281e		       c0		      BYTE.b	%11000000
     47  281f		       c0		      BYTE.b	%11000000
     48  2820		       c0		      BYTE.b	%11000000
     49  2821		       c0		      BYTE.b	%11000000
     50  2822		       c0		      BYTE.b	%11000000
     51  2823		       c0		      BYTE.b	%11000000
     52  2824		       e1		      BYTE.b	%11100001
     53  2825
     54  2825				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     55  2825				  -	      align	256
     56  2825					      endif
     57  2825
     58  2825				   bmp_96x2_1_01
     59  2825		       ff		      BYTE.b	%11111111
     60  2826		       00		      BYTE.b	%00000000
     61  2827
     62  2827		       01		      BYTE.b	%00000001
     63  2828		       01		      BYTE.b	%00000001
     64  2829		       81		      BYTE.b	%10000001
     65  282a		       83		      BYTE.b	%10000011
     66  282b		       83		      BYTE.b	%10000011
     67  282c		       87		      BYTE.b	%10000111
     68  282d		       87		      BYTE.b	%10000111
     69  282e		       8e		      BYTE.b	%10001110
     70  282f		       8e		      BYTE.b	%10001110
     71  2830		       9c		      BYTE.b	%10011100
     72  2831		       de		      BYTE.b	%11011110
     73  2832
     74  2832				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     75  2832				  -	      align	256
     76  2832					      endif
     77  2832
     78  2832				   bmp_96x2_1_02
     79  2832		       ff		      BYTE.b	%11111111
     80  2833		       00		      BYTE.b	%00000000
     81  2834
     82  2834		       00		      BYTE.b	%00000000
     83  2835		       80		      BYTE.b	%10000000
     84  2836		       80		      BYTE.b	%10000000
     85  2837		       c0		      BYTE.b	%11000000
     86  2838		       c0		      BYTE.b	%11000000
     87  2839		       20		      BYTE.b	%00100000
     88  283a		       20		      BYTE.b	%00100000
     89  283b		       10		      BYTE.b	%00010000
     90  283c		       10		      BYTE.b	%00010000
     91  283d		       08		      BYTE.b	%00001000
     92  283e		       1c		      BYTE.b	%00011100
     93  283f
     94  283f				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     95  283f				  -	      align	256
     96  283f					      endif
     97  283f
     98  283f				   bmp_96x2_1_03
     99  283f		       ff		      BYTE.b	%11111111
    100  2840		       00		      BYTE.b	%00000000
    101  2841
    102  2841		       0e		      BYTE.b	%00001110
    103  2842		       0c		      BYTE.b	%00001100
    104  2843		       0c		      BYTE.b	%00001100
    105  2844		       0c		      BYTE.b	%00001100
    106  2845		       0c		      BYTE.b	%00001100
    107  2846		       0f		      BYTE.b	%00001111
    108  2847		       0c		      BYTE.b	%00001100
    109  2848		       0c		      BYTE.b	%00001100
    110  2849		       0c		      BYTE.b	%00001100
    111  284a		       0c		      BYTE.b	%00001100
    112  284b		       1f		      BYTE.b	%00011111
    113  284c
    114  284c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    115  284c				  -	      align	256
    116  284c					      endif
    117  284c
    118  284c				   bmp_96x2_1_04
    119  284c		       ff		      BYTE.b	%11111111
    120  284d		       00		      BYTE.b	%00000000
    121  284e
    122  284e		       06		      BYTE.b	%00000110
    123  284f		       06		      BYTE.b	%00000110
    124  2850		       06		      BYTE.b	%00000110
    125  2851		       06		      BYTE.b	%00000110
    126  2852		       06		      BYTE.b	%00000110
    127  2853		       c6		      BYTE.b	%11000110
    128  2854		       e7		      BYTE.b	%11100111
    129  2855		       76		      BYTE.b	%01110110
    130  2856		       70		      BYTE.b	%01110000
    131  2857		       70		      BYTE.b	%01110000
    132  2858		       c0		      BYTE.b	%11000000
    133  2859
    134  2859				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    135  2859				  -	      align	256
    136  2859					      endif
    137  2859
    138  2859				   bmp_96x2_1_05
    139  2859		       ff		      BYTE.b	%11111111
    140  285a		       00		      BYTE.b	%00000000
    141  285b
    142  285b		       03		      BYTE.b	%00000011
    143  285c		       04		      BYTE.b	%00000100
    144  285d		       0c		      BYTE.b	%00001100
    145  285e		       0c		      BYTE.b	%00001100
    146  285f		       0c		      BYTE.b	%00001100
    147  2860		       0c		      BYTE.b	%00001100
    148  2861		       a4		      BYTE.b	%10100100
    149  2862		       e3		      BYTE.b	%11100011
    150  2863		       00		      BYTE.b	%00000000
    151  2864		       00		      BYTE.b	%00000000
    152  2865		       00		      BYTE.b	%00000000
    153  2866
    154  2866				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    155  2866				  -	      align	256
    156  2866					      endif
    157  2866
    158  2866
    159  2866				   bmp_96x2_1_06
    160  2866		       ff		      BYTE.b	%11111111
    161  2867		       00		      BYTE.b	%00000000
    162  2868
    163  2868		       83		      BYTE.b	%10000011
    164  2869		       46		      BYTE.b	%01000110
    165  286a		       66		      BYTE.b	%01100110
    166  286b		       66		      BYTE.b	%01100110
    167  286c		       66		      BYTE.b	%01100110
    168  286d		       66		      BYTE.b	%01100110
    169  286e		       46		      BYTE.b	%01000110
    170  286f		       8f		      BYTE.b	%10001111
    171  2870		       06		      BYTE.b	%00000110
    172  2871		       02		      BYTE.b	%00000010
    173  2872		       00		      BYTE.b	%00000000
    174  2873
    175  2873				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    176  2873				  -	      align	256
    177  2873					      endif
    178  2873
    179  2873				   bmp_96x2_1_07
    180  2873		       ff		      BYTE.b	%11111111
    181  2874		       00		      BYTE.b	%00000000
    182  2875
    183  2875		       0f		      BYTE.b	%00001111
    184  2876		       8c		      BYTE.b	%10001100
    185  2877		       18		      BYTE.b	%00011000
    186  2878		       18		      BYTE.b	%00011000
    187  2879		       1f		      BYTE.b	%00011111
    188  287a		       19		      BYTE.b	%00011001
    189  287b		       09		      BYTE.b	%00001001
    190  287c		       87		      BYTE.b	%10000111
    191  287d		       00		      BYTE.b	%00000000
    192  287e		       00		      BYTE.b	%00000000
    193  287f		       00		      BYTE.b	%00000000
    194  2880
    195  2880				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    196  2880				  -	      align	256
    197  2880					      endif
    198  2880
    199  2880
    200  2880				   bmp_96x2_1_08
    201  2880		       ff		      BYTE.b	%11111111
    202  2881		       00		      BYTE.b	%00000000
    203  2882
    204  2882		       07		      BYTE.b	%00000111
    205  2883		       8e		      BYTE.b	%10001110
    206  2884		       1c		      BYTE.b	%00011100
    207  2885		       18		      BYTE.b	%00011000
    208  2886		       98		      BYTE.b	%10011000
    209  2887		       99		      BYTE.b	%10011001
    210  2888		       89		      BYTE.b	%10001001
    211  2889		       07		      BYTE.b	%00000111
    212  288a		       00		      BYTE.b	%00000000
    213  288b		       00		      BYTE.b	%00000000
    214  288c		       00		      BYTE.b	%00000000
    215  288d
    216  288d				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    217  288d				  -	      align	256
    218  288d					      endif
    219  288d
    220  288d				   bmp_96x2_1_09
    221  288d		       ff		      BYTE.b	%11111111
    222  288e		       00		      BYTE.b	%00000000
    223  288f
    224  288f		       0c		      BYTE.b	%00001100
    225  2890		       9a		      BYTE.b	%10011010
    226  2891		       18		      BYTE.b	%00011000
    227  2892		       18		      BYTE.b	%00011000
    228  2893		       18		      BYTE.b	%00011000
    229  2894		       98		      BYTE.b	%10011000
    230  2895		       98		      BYTE.b	%10011000
    231  2896		       be		      BYTE.b	%10111110
    232  2897		       18		      BYTE.b	%00011000
    233  2898		       08		      BYTE.b	%00001000
    234  2899		       00		      BYTE.b	%00000000
    235  289a
    236  289a
    237  289a				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    238  289a				  -	      align	256
    239  289a					      endif
    240  289a
    241  289a				   bmp_96x2_1_10
    242  289a		       ff		      BYTE.b	%11111111
    243  289b		       00		      BYTE.b	%00000000
    244  289c
    245  289c		       1c		      BYTE.b	%00011100
    246  289d		       22		      BYTE.b	%00100010
    247  289e		       63		      BYTE.b	%01100011
    248  289f		       63		      BYTE.b	%01100011
    249  28a0		       63		      BYTE.b	%01100011
    250  28a1		       63		      BYTE.b	%01100011
    251  28a2		       22		      BYTE.b	%00100010
    252  28a3		       1c		      BYTE.b	%00011100
    253  28a4		       00		      BYTE.b	%00000000
    254  28a5		       00		      BYTE.b	%00000000
    255  28a6		       00		      BYTE.b	%00000000
    256  28a7
    257  28a7				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    258  28a7				  -	      align	256
    259  28a7					      endif
    260  28a7
    261  28a7				   bmp_96x2_1_11
    262  28a7		       ff		      BYTE.b	%11111111
    263  28a8		       00		      BYTE.b	%00000000
    264  28a9
    265  28a9		       30		      BYTE.b	%00110000
    266  28aa		       30		      BYTE.b	%00110000
    267  28ab		       30		      BYTE.b	%00110000
    268  28ac		       30		      BYTE.b	%00110000
    269  28ad		       30		      BYTE.b	%00110000
    270  28ae		       30		      BYTE.b	%00110000
    271  28af		       3d		      BYTE.b	%00111101
    272  28b0		       37		      BYTE.b	%00110111
    273  28b1		       00		      BYTE.b	%00000000
    274  28b2		       00		      BYTE.b	%00000000
    275  28b3		       00		      BYTE.b	%00000000
    276  28b4
    277  28b4
------- FILE titlescreen/asm/titlescreen.asm
    274  28b4					      endif
    275  28b4				  -	      ifconst	mk_96x2_2_on
    276  28b4				  -	      include	"titlescreen/96x2_2_image.asm"
    277  28b4					      endif
    278  28b4				  -	      ifconst	mk_96x2_3_on
    279  28b4				  -	      include	"titlescreen/96x2_3_image.asm"
    280  28b4					      endif
    281  28b4				  -	      ifconst	mk_96x2_4_on
    282  28b4				  -	      include	"titlescreen/96x2_4_image.asm"
    283  28b4					      endif
    284  28b4				  -	      ifconst	mk_96x2_5_on
    285  28b4				  -	      include	"titlescreen/96x2_5_image.asm"
    286  28b4					      endif
    287  28b4				  -	      ifconst	mk_96x2_6_on
    288  28b4				  -	      include	"titlescreen/96x2_6_image.asm"
    289  28b4					      endif
    290  28b4				  -	      ifconst	mk_96x2_7_on
    291  28b4				  -	      include	"titlescreen/96x2_7_image.asm"
    292  28b4					      endif
    293  28b4				  -	      ifconst	mk_96x2_8_on
    294  28b4				  -	      include	"titlescreen/96x2_8_image.asm"
    295  28b4					      endif
    296  28b4
    297  28b4				  -	      ifconst	mk_player_on
    298  28b4				  -	      include	"titlescreen/player_image.asm"
    299  28b4					      endif
    300  28b4
    301  28b4					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 2
      0  28b4					      include	"titlescreen/score_image.asm"
      1  28b4							; feel free to modify the score graphics - just keep each digit 8 high
      2  28b4							; if you're looking to want to modify any one font, pick on the 
      3  28b4
      4  28b4				  -	      ifnconst	NOFONT
      5  28b4				  -NOFONT     =	0
      6  28b4					      endif
      7  28b4				  -	      ifnconst	STOCK
      8  28b4				  -STOCK      =	1	;_FONTNAME
      9  28b4					      endif
     10  28b4				  -	      ifnconst	NEWCENTURY
     11  28b4				  -NEWCENTURY =	2	;_FONTNAME
     12  28b4					      endif
     13  28b4				  -	      ifnconst	WHIMSEY
     14  28b4				  -WHIMSEY    =	3	;_FONTNAME
     15  28b4					      endif
     16  28b4				  -	      ifnconst	ALARMCLOCK
     17  28b4				  -ALARMCLOCK =	4	;_FONTNAME
     18  28b4					      endif
     19  28b4				  -	      ifnconst	HANDWRITTEN
     20  28b4				  -HANDWRITTEN =	5	;_FONTNAME
     21  28b4					      endif
     22  28b4				  -	      ifnconst	INTERRUPTED
     23  28b4				  -INTERRUPTED =	6	;_FONTNAME
     24  28b4					      endif
     25  28b4				  -	      ifnconst	TINY
     26  28b4				  -TINY       =	7	;_FONTNAME
     27  28b4					      endif
     28  28b4				  -	      ifnconst	RETROPUTER
     29  28b4				  -RETROPUTER =	8	;_FONTNAME
     30  28b4					      endif
     31  28b4				  -	      ifnconst	CURVES
     32  28b4				  -CURVES     =	9	;_FONTNAME
     33  28b4					      endif
     34  28b4				  -	      ifnconst	HUSKY
     35  28b4				  -HUSKY      =	10	;_FONTNAME
     36  28b4					      endif
     37  28b4				  -	      ifnconst	SNAKE
     38  28b4				  -SNAKE      =	11	;_FONTNAME
     39  28b4					      endif
     40  28b4				  -	      ifnconst	PLOK
     41  28b4				  -PLOK       =	13	;_FONTNAME
     42  28b4					      endif
     43  28b4
     44  28b4				  -	      ifnconst	SYMBOLS
     45  28b4				  -SYMBOLS    =	0	;_FONTNAME 
     46  28b4					      endif
     47  28b4
     48  28b4							; ### setup some defaults
     49  28b4				  -	      ifnconst	fontstyle
     50  28b4				  -fontstyle  =	STOCK
     51  28b4					      endif
     52  28b4
     53  28b4							;fix up the table alignment, if necessary
     54  28b4					      if	>. != >[.+81]
     55  2900		       00 00 00 00*	      align	256
     56  2900					      endif
     57  2900
     58  2900
     59  2900				   miniscoretable
     60  2900
     61  2900					      if	fontstyle == STOCK
     62  2900
     63  2900							;byte %00000000 ; STOCK
     64  2900
     65  2900		       3c		      .byte.b	%00111100	; STOCK
     66  2901		       66		      .byte.b	%01100110	; STOCK
     67  2902		       66		      .byte.b	%01100110	; STOCK
     68  2903		       66		      .byte.b	%01100110	; STOCK
     69  2904		       66		      .byte.b	%01100110	; STOCK
     70  2905		       66		      .byte.b	%01100110	; STOCK
     71  2906		       66		      .byte.b	%01100110	; STOCK
     72  2907		       3c		      .byte.b	%00111100	; STOCK
     73  2908
     74  2908							;byte %00000000 ; STOCK
     75  2908
     76  2908		       7e		      .byte.b	%01111110	; STOCK
     77  2909		       18		      .byte.b	%00011000	; STOCK
     78  290a		       18		      .byte.b	%00011000	; STOCK
     79  290b		       18		      .byte.b	%00011000	; STOCK
     80  290c		       18		      .byte.b	%00011000	; STOCK
     81  290d		       38		      .byte.b	%00111000	; STOCK
     82  290e		       18		      .byte.b	%00011000	; STOCK
     83  290f		       08		      .byte.b	%00001000	; STOCK
     84  2910
     85  2910							;byte %00000000 ; STOCK
     86  2910
     87  2910		       7e		      .byte.b	%01111110	; STOCK
     88  2911		       60		      .byte.b	%01100000	; STOCK
     89  2912		       60		      .byte.b	%01100000	; STOCK
     90  2913		       3c		      .byte.b	%00111100	; STOCK
     91  2914		       06		      .byte.b	%00000110	; STOCK
     92  2915		       06		      .byte.b	%00000110	; STOCK
     93  2916		       46		      .byte.b	%01000110	; STOCK
     94  2917		       3c		      .byte.b	%00111100	; STOCK
     95  2918
     96  2918							;byte %00000000 ; STOCK
     97  2918
     98  2918		       3c		      .byte.b	%00111100	; STOCK
     99  2919		       46		      .byte.b	%01000110	; STOCK
    100  291a		       06		      .byte.b	%00000110	; STOCK
    101  291b		       06		      .byte.b	%00000110	; STOCK
    102  291c		       1c		      .byte.b	%00011100	; STOCK
    103  291d		       06		      .byte.b	%00000110	; STOCK
    104  291e		       46		      .byte.b	%01000110	; STOCK
    105  291f		       3c		      .byte.b	%00111100	; STOCK
    106  2920
    107  2920							;byte %00000000 ; STOCK
    108  2920
    109  2920		       0c		      .byte.b	%00001100	; STOCK
    110  2921		       0c		      .byte.b	%00001100	; STOCK
    111  2922		       7e		      .byte.b	%01111110	; STOCK
    112  2923		       4c		      .byte.b	%01001100	; STOCK
    113  2924		       4c		      .byte.b	%01001100	; STOCK
    114  2925		       2c		      .byte.b	%00101100	; STOCK
    115  2926		       1c		      .byte.b	%00011100	; STOCK
    116  2927		       0c		      .byte.b	%00001100	; STOCK
    117  2928
    118  2928							;byte %00000000 ; STOCK
    119  2928
    120  2928		       3c		      .byte.b	%00111100	; STOCK
    121  2929		       46		      .byte.b	%01000110	; STOCK
    122  292a		       06		      .byte.b	%00000110	; STOCK
    123  292b		       06		      .byte.b	%00000110	; STOCK
    124  292c		       3c		      .byte.b	%00111100	; STOCK
    125  292d		       60		      .byte.b	%01100000	; STOCK
    126  292e		       60		      .byte.b	%01100000	; STOCK
    127  292f		       7e		      .byte.b	%01111110	; STOCK
    128  2930
    129  2930							;byte %00000000 ; STOCK
    130  2930
    131  2930		       3c		      .byte.b	%00111100	; STOCK
    132  2931		       66		      .byte.b	%01100110	; STOCK
    133  2932		       66		      .byte.b	%01100110	; STOCK
    134  2933		       66		      .byte.b	%01100110	; STOCK
    135  2934		       7c		      .byte.b	%01111100	; STOCK
    136  2935		       60		      .byte.b	%01100000	; STOCK
    137  2936		       62		      .byte.b	%01100010	; STOCK
    138  2937		       3c		      .byte.b	%00111100	; STOCK
    139  2938
    140  2938							;byte %00000000 ; STOCK
    141  2938
    142  2938		       30		      .byte.b	%00110000	; STOCK
    143  2939		       30		      .byte.b	%00110000	; STOCK
    144  293a		       30		      .byte.b	%00110000	; STOCK
    145  293b		       18		      .byte.b	%00011000	; STOCK
    146  293c		       0c		      .byte.b	%00001100	; STOCK
    147  293d		       06		      .byte.b	%00000110	; STOCK
    148  293e		       42		      .byte.b	%01000010	; STOCK
    149  293f		       3e		      .byte.b	%00111110	; STOCK
    150  2940
    151  2940							;byte %00000000 ; STOCK
    152  2940
    153  2940		       3c		      .byte.b	%00111100	; STOCK
    154  2941		       66		      .byte.b	%01100110	; STOCK
    155  2942		       66		      .byte.b	%01100110	; STOCK
    156  2943		       66		      .byte.b	%01100110	; STOCK
    157  2944		       3c		      .byte.b	%00111100	; STOCK
    158  2945		       66		      .byte.b	%01100110	; STOCK
    159  2946		       66		      .byte.b	%01100110	; STOCK
    160  2947		       3c		      .byte.b	%00111100	; STOCK
    161  2948
    162  2948							;byte %00000000 ; STOCK
    163  2948
    164  2948		       3c		      .byte.b	%00111100	; STOCK
    165  2949		       46		      .byte.b	%01000110	; STOCK
    166  294a		       06		      .byte.b	%00000110	; STOCK
    167  294b		       3e		      .byte.b	%00111110	; STOCK
    168  294c		       66		      .byte.b	%01100110	; STOCK
    169  294d		       66		      .byte.b	%01100110	; STOCK
    170  294e		       66		      .byte.b	%01100110	; STOCK
    171  294f		       3c		      .byte.b	%00111100	; STOCK
    172  2950
    173  2950					      endif		; STOCK
    174  2950
    175  2950				  -	      if	fontstyle == NEWCENTURY
    176  2950				  -			;byte %00000000 ; NEWCENTURY
    177  2950				  -
    178  2950				  -	      .byte	%00111100	; NEWCENTURY
    179  2950				  -	      .byte	%01000010	; NEWCENTURY
    180  2950				  -	      .byte	%01000010	; NEWCENTURY
    181  2950				  -	      .byte	%01000010	; NEWCENTURY
    182  2950				  -	      .byte	%00100100	; NEWCENTURY
    183  2950				  -	      .byte	%00100100	; NEWCENTURY
    184  2950				  -	      .byte	%00100100	; NEWCENTURY
    185  2950				  -	      .byte	%00011000	; NEWCENTURY
    186  2950				  -
    187  2950				  -			;byte %00000000 ; NEWCENTURY
    188  2950				  -
    189  2950				  -	      .byte	%00001000	; NEWCENTURY
    190  2950				  -	      .byte	%00001000	; NEWCENTURY
    191  2950				  -	      .byte	%00001000	; NEWCENTURY
    192  2950				  -	      .byte	%00001000	; NEWCENTURY
    193  2950				  -	      .byte	%00001000	; NEWCENTURY
    194  2950				  -	      .byte	%00001000	; NEWCENTURY
    195  2950				  -	      .byte	%00001000	; NEWCENTURY
    196  2950				  -	      .byte	%00001000	; NEWCENTURY
    197  2950				  -
    198  2950				  -			;byte %00000000 ; NEWCENTURY
    199  2950				  -
    200  2950				  -	      .byte	%01111110	; NEWCENTURY
    201  2950				  -	      .byte	%01000000	; NEWCENTURY
    202  2950				  -	      .byte	%01000000	; NEWCENTURY
    203  2950				  -	      .byte	%00100000	; NEWCENTURY
    204  2950				  -	      .byte	%00011100	; NEWCENTURY
    205  2950				  -	      .byte	%00000010	; NEWCENTURY
    206  2950				  -	      .byte	%00000010	; NEWCENTURY
    207  2950				  -	      .byte	%00011100	; NEWCENTURY
    208  2950				  -
    209  2950				  -			;byte %00000000 ; NEWCENTURY
    210  2950				  -
    211  2950				  -	      .byte	%01111100	; NEWCENTURY
    212  2950				  -	      .byte	%00000010	; NEWCENTURY
    213  2950				  -	      .byte	%00000010	; NEWCENTURY
    214  2950				  -	      .byte	%00000010	; NEWCENTURY
    215  2950				  -	      .byte	%00111100	; NEWCENTURY
    216  2950				  -	      .byte	%00000010	; NEWCENTURY
    217  2950				  -	      .byte	%00000010	; NEWCENTURY
    218  2950				  -	      .byte	%00011100	; NEWCENTURY
    219  2950				  -
    220  2950				  -			;byte %00000000 ; NEWCENTURY
    221  2950				  -
    222  2950				  -	      .byte	%00000010	; NEWCENTURY
    223  2950				  -	      .byte	%00000010	; NEWCENTURY
    224  2950				  -	      .byte	%00000010	; NEWCENTURY
    225  2950				  -	      .byte	%00111110	; NEWCENTURY
    226  2950				  -	      .byte	%00100010	; NEWCENTURY
    227  2950				  -	      .byte	%00100010	; NEWCENTURY
    228  2950				  -	      .byte	%00010010	; NEWCENTURY
    229  2950				  -	      .byte	%00010010	; NEWCENTURY
    230  2950				  -
    231  2950				  -			;byte %00000000 ; NEWCENTURY
    232  2950				  -
    233  2950				  -	      .byte	%01111100	; NEWCENTURY
    234  2950				  -	      .byte	%00000010	; NEWCENTURY
    235  2950				  -	      .byte	%00000010	; NEWCENTURY
    236  2950				  -	      .byte	%00000010	; NEWCENTURY
    237  2950				  -	      .byte	%01111100	; NEWCENTURY
    238  2950				  -	      .byte	%01000000	; NEWCENTURY
    239  2950				  -	      .byte	%01000000	; NEWCENTURY
    240  2950				  -	      .byte	%01111000	; NEWCENTURY
    241  2950				  -
    242  2950				  -			;byte %00000000 ; NEWCENTURY
    243  2950				  -
    244  2950				  -	      .byte	%00111100	; NEWCENTURY
    245  2950				  -	      .byte	%01000010	; NEWCENTURY
    246  2950				  -	      .byte	%01000010	; NEWCENTURY
    247  2950				  -	      .byte	%01000010	; NEWCENTURY
    248  2950				  -	      .byte	%01111100	; NEWCENTURY
    249  2950				  -	      .byte	%01000000	; NEWCENTURY
    250  2950				  -	      .byte	%01000000	; NEWCENTURY
    251  2950				  -	      .byte	%00110000	; NEWCENTURY
    252  2950				  -
    253  2950				  -			;byte %00000000 ; NEWCENTURY
    254  2950				  -
    255  2950				  -	      .byte	%00010000	; NEWCENTURY
    256  2950				  -	      .byte	%00010000	; NEWCENTURY
    257  2950				  -	      .byte	%00001000	; NEWCENTURY
    258  2950				  -	      .byte	%00001000	; NEWCENTURY
    259  2950				  -	      .byte	%00000100	; NEWCENTURY
    260  2950				  -	      .byte	%00000100	; NEWCENTURY
    261  2950				  -	      .byte	%00000010	; NEWCENTURY
    262  2950				  -	      .byte	%00011110	; NEWCENTURY
    263  2950				  -
    264  2950				  -			;byte %00000000 ; NEWCENTURY
    265  2950				  -
    266  2950				  -	      .byte	%00111100	; NEWCENTURY
    267  2950				  -	      .byte	%01000010	; NEWCENTURY
    268  2950				  -	      .byte	%01000010	; NEWCENTURY
    269  2950				  -	      .byte	%01000010	; NEWCENTURY
    270  2950				  -	      .byte	%00111100	; NEWCENTURY
    271  2950				  -	      .byte	%00100100	; NEWCENTURY
    272  2950				  -	      .byte	%00100100	; NEWCENTURY
    273  2950				  -	      .byte	%00011000	; NEWCENTURY
    274  2950				  -
    275  2950				  -			;byte %00000000 ; NEWCENTURY
    276  2950				  -
    277  2950				  -	      .byte	%00111100	; NEWCENTURY
    278  2950				  -	      .byte	%00000010	; NEWCENTURY
    279  2950				  -	      .byte	%00000010	; NEWCENTURY
    280  2950				  -	      .byte	%00000010	; NEWCENTURY
    281  2950				  -	      .byte	%00001110	; NEWCENTURY
    282  2950				  -	      .byte	%00010010	; NEWCENTURY
    283  2950				  -	      .byte	%00010010	; NEWCENTURY
    284  2950				  -	      .byte	%00001100	; NEWCENTURY
    285  2950				  -
    286  2950					      endif		; NEWCENTURY
    287  2950
    288  2950				  -	      if	fontstyle == WHIMSEY
    289  2950				  -			;byte %00000000 ; WHIMSEY
    290  2950				  -
    291  2950				  -	      .byte	%00111100	; WHIMSEY
    292  2950				  -	      .byte	%01111110	; WHIMSEY
    293  2950				  -	      .byte	%01111110	; WHIMSEY
    294  2950				  -	      .byte	%01111110	; WHIMSEY
    295  2950				  -	      .byte	%01110110	; WHIMSEY
    296  2950				  -	      .byte	%01110110	; WHIMSEY
    297  2950				  -	      .byte	%01110110	; WHIMSEY
    298  2950				  -	      .byte	%00111100	; WHIMSEY
    299  2950				  -
    300  2950				  -			;byte %00000000 ; WHIMSEY
    301  2950				  -
    302  2950				  -	      .byte	%01111110	; WHIMSEY
    303  2950				  -	      .byte	%01111110	; WHIMSEY
    304  2950				  -	      .byte	%01111110	; WHIMSEY
    305  2950				  -	      .byte	%00011000	; WHIMSEY
    306  2950				  -	      .byte	%00011000	; WHIMSEY
    307  2950				  -	      .byte	%00011000	; WHIMSEY
    308  2950				  -	      .byte	%01111000	; WHIMSEY
    309  2950				  -	      .byte	%00011000	; WHIMSEY
    310  2950				  -
    311  2950				  -			;byte %00000000 ; WHIMSEY
    312  2950				  -
    313  2950				  -	      .byte	%01111110	; WHIMSEY
    314  2950				  -	      .byte	%01111110	; WHIMSEY
    315  2950				  -	      .byte	%01111110	; WHIMSEY
    316  2950				  -	      .byte	%01111000	; WHIMSEY
    317  2950				  -	      .byte	%00111100	; WHIMSEY
    318  2950				  -	      .byte	%00001110	; WHIMSEY
    319  2950				  -	      .byte	%01100110	; WHIMSEY
    320  2950				  -	      .byte	%00111100	; WHIMSEY
    321  2950				  -
    322  2950				  -			;byte %00000000 ; WHIMSEY
    323  2950				  -
    324  2950				  -	      .byte	%00111100	; WHIMSEY
    325  2950				  -	      .byte	%01111110	; WHIMSEY
    326  2950				  -	      .byte	%01111110	; WHIMSEY
    327  2950				  -	      .byte	%01101110	; WHIMSEY
    328  2950				  -	      .byte	%00001110	; WHIMSEY
    329  2950				  -	      .byte	%00111100	; WHIMSEY
    330  2950				  -	      .byte	%00011100	; WHIMSEY
    331  2950				  -	      .byte	%01111110	; WHIMSEY
    332  2950				  -
    333  2950				  -			;byte %00000000 ; WHIMSEY
    334  2950				  -
    335  2950				  -	      .byte	%00011100	; WHIMSEY
    336  2950				  -	      .byte	%00011100	; WHIMSEY
    337  2950				  -	      .byte	%01111110	; WHIMSEY
    338  2950				  -	      .byte	%01011100	; WHIMSEY
    339  2950				  -	      .byte	%01011100	; WHIMSEY
    340  2950				  -	      .byte	%00011100	; WHIMSEY
    341  2950				  -	      .byte	%00011100	; WHIMSEY
    342  2950				  -	      .byte	%00011100	; WHIMSEY
    343  2950				  -
    344  2950				  -			;byte %00000000 ; WHIMSEY
    345  2950				  -
    346  2950				  -	      .byte	%00111100	; WHIMSEY
    347  2950				  -	      .byte	%01111110	; WHIMSEY
    348  2950				  -	      .byte	%01111110	; WHIMSEY
    349  2950				  -	      .byte	%01101110	; WHIMSEY
    350  2950				  -	      .byte	%00001110	; WHIMSEY
    351  2950				  -	      .byte	%01111100	; WHIMSEY
    352  2950				  -	      .byte	%01110000	; WHIMSEY
    353  2950				  -	      .byte	%01111110	; WHIMSEY
    354  2950				  -
    355  2950				  -			;byte %00000000 ; WHIMSEY
    356  2950				  -
    357  2950				  -	      .byte	%00111100	; WHIMSEY
    358  2950				  -	      .byte	%01111110	; WHIMSEY
    359  2950				  -	      .byte	%01111110	; WHIMSEY
    360  2950				  -	      .byte	%01110110	; WHIMSEY
    361  2950				  -	      .byte	%01110110	; WHIMSEY
    362  2950				  -	      .byte	%01111100	; WHIMSEY
    363  2950				  -	      .byte	%01110000	; WHIMSEY
    364  2950				  -	      .byte	%00111110	; WHIMSEY
    365  2950				  -
    366  2950				  -			;byte %00000000 ; WHIMSEY
    367  2950				  -
    368  2950				  -	      .byte	%01111000	; WHIMSEY
    369  2950				  -	      .byte	%01111000	; WHIMSEY
    370  2950				  -	      .byte	%01111000	; WHIMSEY
    371  2950				  -	      .byte	%00111100	; WHIMSEY
    372  2950				  -	      .byte	%00011100	; WHIMSEY
    373  2950				  -	      .byte	%00001110	; WHIMSEY
    374  2950				  -	      .byte	%00001110	; WHIMSEY
    375  2950				  -	      .byte	%01111110	; WHIMSEY
    376  2950				  -
    377  2950				  -			;byte %00000000 ; WHIMSEY
    378  2950				  -
    379  2950				  -	      .byte	%00111100	; WHIMSEY
    380  2950				  -	      .byte	%01111110	; WHIMSEY
    381  2950				  -	      .byte	%01111110	; WHIMSEY
    382  2950				  -	      .byte	%01110110	; WHIMSEY
    383  2950				  -	      .byte	%01110110	; WHIMSEY
    384  2950				  -	      .byte	%00111100	; WHIMSEY
    385  2950				  -	      .byte	%01110110	; WHIMSEY
    386  2950				  -	      .byte	%00111100	; WHIMSEY
    387  2950				  -
    388  2950				  -			;byte %00000000 ; WHIMSEY
    389  2950				  -
    390  2950				  -	      .byte	%00111100	; WHIMSEY
    391  2950				  -	      .byte	%01111110	; WHIMSEY
    392  2950				  -	      .byte	%01111110	; WHIMSEY
    393  2950				  -	      .byte	%01110110	; WHIMSEY
    394  2950				  -	      .byte	%00000110	; WHIMSEY
    395  2950				  -	      .byte	%00111110	; WHIMSEY
    396  2950				  -	      .byte	%01110110	; WHIMSEY
    397  2950				  -	      .byte	%00111100	; WHIMSEY
    398  2950				  -
    399  2950					      endif		; WHIMSEY
    400  2950
    401  2950				  -	      if	fontstyle == ALARMCLOCK
    402  2950				  -
    403  2950				  -			;byte %00000000 ; ALARMCLOCK
    404  2950				  -
    405  2950				  -	      .byte	%00111100	; ALARMCLOCK
    406  2950				  -	      .byte	%01000010	; ALARMCLOCK
    407  2950				  -	      .byte	%01000010	; ALARMCLOCK
    408  2950				  -	      .byte	%01000010	; ALARMCLOCK
    409  2950				  -	      .byte	%00000000	; ALARMCLOCK
    410  2950				  -	      .byte	%01000010	; ALARMCLOCK
    411  2950				  -	      .byte	%01000010	; ALARMCLOCK
    412  2950				  -	      .byte	%00111100	; ALARMCLOCK
    413  2950				  -
    414  2950				  -			;byte %00000000 ; ALARMCLOCK
    415  2950				  -
    416  2950				  -	      .byte	%00000000	; ALARMCLOCK
    417  2950				  -	      .byte	%00000010	; ALARMCLOCK
    418  2950				  -	      .byte	%00000010	; ALARMCLOCK
    419  2950				  -	      .byte	%00000010	; ALARMCLOCK
    420  2950				  -	      .byte	%00000000	; ALARMCLOCK
    421  2950				  -	      .byte	%00000010	; ALARMCLOCK
    422  2950				  -	      .byte	%00000010	; ALARMCLOCK
    423  2950				  -	      .byte	%00000000	; ALARMCLOCK
    424  2950				  -
    425  2950				  -			;byte %00000000 ; ALARMCLOCK
    426  2950				  -
    427  2950				  -	      .byte	%00111100	; ALARMCLOCK
    428  2950				  -	      .byte	%01000000	; ALARMCLOCK
    429  2950				  -	      .byte	%01000000	; ALARMCLOCK
    430  2950				  -	      .byte	%01000000	; ALARMCLOCK
    431  2950				  -	      .byte	%00111100	; ALARMCLOCK
    432  2950				  -	      .byte	%00000010	; ALARMCLOCK
    433  2950				  -	      .byte	%00000010	; ALARMCLOCK
    434  2950				  -	      .byte	%00111100	; ALARMCLOCK
    435  2950				  -
    436  2950				  -			;byte %00000000 ; ALARMCLOCK
    437  2950				  -
    438  2950				  -	      .byte	%00111100	; ALARMCLOCK
    439  2950				  -	      .byte	%00000010	; ALARMCLOCK
    440  2950				  -	      .byte	%00000010	; ALARMCLOCK
    441  2950				  -	      .byte	%00000010	; ALARMCLOCK
    442  2950				  -	      .byte	%00111100	; ALARMCLOCK
    443  2950				  -	      .byte	%00000010	; ALARMCLOCK
    444  2950				  -	      .byte	%00000010	; ALARMCLOCK
    445  2950				  -	      .byte	%00111100	; ALARMCLOCK
    446  2950				  -
    447  2950				  -			;byte %00000000 ; ALARMCLOCK
    448  2950				  -
    449  2950				  -	      .byte	%00000000	; ALARMCLOCK
    450  2950				  -	      .byte	%00000010	; ALARMCLOCK
    451  2950				  -	      .byte	%00000010	; ALARMCLOCK
    452  2950				  -	      .byte	%00000010	; ALARMCLOCK
    453  2950				  -	      .byte	%00111100	; ALARMCLOCK
    454  2950				  -	      .byte	%01000010	; ALARMCLOCK
    455  2950				  -	      .byte	%01000010	; ALARMCLOCK
    456  2950				  -	      .byte	%00000000	; ALARMCLOCK
    457  2950				  -
    458  2950				  -			;byte %00000000 ; ALARMCLOCK
    459  2950				  -
    460  2950				  -	      .byte	%00111100	; ALARMCLOCK
    461  2950				  -	      .byte	%00000010	; ALARMCLOCK
    462  2950				  -	      .byte	%00000010	; ALARMCLOCK
    463  2950				  -	      .byte	%00000010	; ALARMCLOCK
    464  2950				  -	      .byte	%00111100	; ALARMCLOCK
    465  2950				  -	      .byte	%01000000	; ALARMCLOCK
    466  2950				  -	      .byte	%01000000	; ALARMCLOCK
    467  2950				  -	      .byte	%00111100	; ALARMCLOCK
    468  2950				  -
    469  2950				  -			;byte %00000000 ; ALARMCLOCK
    470  2950				  -
    471  2950				  -	      .byte	%00111100	; ALARMCLOCK
    472  2950				  -	      .byte	%01000010	; ALARMCLOCK
    473  2950				  -	      .byte	%01000010	; ALARMCLOCK
    474  2950				  -	      .byte	%01000010	; ALARMCLOCK
    475  2950				  -	      .byte	%00111100	; ALARMCLOCK
    476  2950				  -	      .byte	%01000000	; ALARMCLOCK
    477  2950				  -	      .byte	%01000000	; ALARMCLOCK
    478  2950				  -	      .byte	%00111100	; ALARMCLOCK
    479  2950				  -
    480  2950				  -			;byte %00000000 ; ALARMCLOCK
    481  2950				  -
    482  2950				  -	      .byte	%00000000	; ALARMCLOCK
    483  2950				  -	      .byte	%00000010	; ALARMCLOCK
    484  2950				  -	      .byte	%00000010	; ALARMCLOCK
    485  2950				  -	      .byte	%00000010	; ALARMCLOCK
    486  2950				  -	      .byte	%00000000	; ALARMCLOCK
    487  2950				  -	      .byte	%00000010	; ALARMCLOCK
    488  2950				  -	      .byte	%00000010	; ALARMCLOCK
    489  2950				  -	      .byte	%00111100	; ALARMCLOCK
    490  2950				  -
    491  2950				  -			;byte %00000000 ; ALARMCLOCK
    492  2950				  -
    493  2950				  -	      .byte	%00111100	; ALARMCLOCK
    494  2950				  -	      .byte	%01000010	; ALARMCLOCK
    495  2950				  -	      .byte	%01000010	; ALARMCLOCK
    496  2950				  -	      .byte	%01000010	; ALARMCLOCK
    497  2950				  -	      .byte	%00111100	; ALARMCLOCK
    498  2950				  -	      .byte	%01000010	; ALARMCLOCK
    499  2950				  -	      .byte	%01000010	; ALARMCLOCK
    500  2950				  -	      .byte	%00111100	; ALARMCLOCK
    501  2950				  -
    502  2950				  -			;byte %00000000 ; ALARMCLOCK
    503  2950				  -
    504  2950				  -	      .byte	%00111100	; ALARMCLOCK
    505  2950				  -	      .byte	%00000010	; ALARMCLOCK
    506  2950				  -	      .byte	%00000010	; ALARMCLOCK
    507  2950				  -	      .byte	%00000010	; ALARMCLOCK
    508  2950				  -	      .byte	%00111100	; ALARMCLOCK
    509  2950				  -	      .byte	%01000010	; ALARMCLOCK
    510  2950				  -	      .byte	%01000010	; ALARMCLOCK
    511  2950				  -	      .byte	%00111100	; ALARMCLOCK
    512  2950				  -
    513  2950				  -
    514  2950					      endif		; ALARMCLOCK
    515  2950
    516  2950				  -	      if	fontstyle == HANDWRITTEN
    517  2950				  -
    518  2950				  -			;byte %00000000 ; HANDWRITTEN
    519  2950				  -
    520  2950				  -	      .byte	%00110000	; HANDWRITTEN
    521  2950				  -	      .byte	%01001000	; HANDWRITTEN
    522  2950				  -	      .byte	%01001000	; HANDWRITTEN
    523  2950				  -	      .byte	%01001000	; HANDWRITTEN
    524  2950				  -	      .byte	%00100100	; HANDWRITTEN
    525  2950				  -	      .byte	%00100100	; HANDWRITTEN
    526  2950				  -	      .byte	%00010010	; HANDWRITTEN
    527  2950				  -	      .byte	%00001100	; HANDWRITTEN
    528  2950				  -
    529  2950				  -			;byte %00000000 ; HANDWRITTEN
    530  2950				  -
    531  2950				  -	      .byte	%00010000	; HANDWRITTEN
    532  2950				  -	      .byte	%00010000	; HANDWRITTEN
    533  2950				  -	      .byte	%00010000	; HANDWRITTEN
    534  2950				  -	      .byte	%00001000	; HANDWRITTEN
    535  2950				  -	      .byte	%00001000	; HANDWRITTEN
    536  2950				  -	      .byte	%00001000	; HANDWRITTEN
    537  2950				  -	      .byte	%00000100	; HANDWRITTEN
    538  2950				  -	      .byte	%00000100	; HANDWRITTEN
    539  2950				  -
    540  2950				  -			;byte %00000000 ; HANDWRITTEN
    541  2950				  -
    542  2950				  -	      .byte	%01110000	; HANDWRITTEN
    543  2950				  -	      .byte	%01001100	; HANDWRITTEN
    544  2950				  -	      .byte	%01000000	; HANDWRITTEN
    545  2950				  -	      .byte	%00100000	; HANDWRITTEN
    546  2950				  -	      .byte	%00011000	; HANDWRITTEN
    547  2950				  -	      .byte	%00000100	; HANDWRITTEN
    548  2950				  -	      .byte	%00100010	; HANDWRITTEN
    549  2950				  -	      .byte	%00011100	; HANDWRITTEN
    550  2950				  -
    551  2950				  -			;byte %00000000 ; HANDWRITTEN
    552  2950				  -
    553  2950				  -	      .byte	%00110000	; HANDWRITTEN
    554  2950				  -	      .byte	%01001000	; HANDWRITTEN
    555  2950				  -	      .byte	%00000100	; HANDWRITTEN
    556  2950				  -	      .byte	%00000100	; HANDWRITTEN
    557  2950				  -	      .byte	%00011000	; HANDWRITTEN
    558  2950				  -	      .byte	%00000100	; HANDWRITTEN
    559  2950				  -	      .byte	%00100010	; HANDWRITTEN
    560  2950				  -	      .byte	%00011100	; HANDWRITTEN
    561  2950				  -
    562  2950				  -			;byte %00000000 ; HANDWRITTEN
    563  2950				  -
    564  2950				  -	      .byte	%00010000	; HANDWRITTEN
    565  2950				  -	      .byte	%00010000	; HANDWRITTEN
    566  2950				  -	      .byte	%00001000	; HANDWRITTEN
    567  2950				  -	      .byte	%01111000	; HANDWRITTEN
    568  2950				  -	      .byte	%01000100	; HANDWRITTEN
    569  2950				  -	      .byte	%00100100	; HANDWRITTEN
    570  2950				  -	      .byte	%00010010	; HANDWRITTEN
    571  2950				  -	      .byte	%00000010	; HANDWRITTEN
    572  2950				  -
    573  2950				  -			;byte %00000000 ; HANDWRITTEN
    574  2950				  -
    575  2950				  -	      .byte	%00110000	; HANDWRITTEN
    576  2950				  -	      .byte	%01001000	; HANDWRITTEN
    577  2950				  -	      .byte	%00000100	; HANDWRITTEN
    578  2950				  -	      .byte	%00000100	; HANDWRITTEN
    579  2950				  -	      .byte	%00011000	; HANDWRITTEN
    580  2950				  -	      .byte	%00100000	; HANDWRITTEN
    581  2950				  -	      .byte	%00010010	; HANDWRITTEN
    582  2950				  -	      .byte	%00001100	; HANDWRITTEN
    583  2950				  -
    584  2950				  -			;byte %00000000 ; HANDWRITTEN
    585  2950				  -
    586  2950				  -	      .byte	%00010000	; HANDWRITTEN
    587  2950				  -	      .byte	%00101000	; HANDWRITTEN
    588  2950				  -	      .byte	%00100100	; HANDWRITTEN
    589  2950				  -	      .byte	%00100100	; HANDWRITTEN
    590  2950				  -	      .byte	%00011000	; HANDWRITTEN
    591  2950				  -	      .byte	%00010000	; HANDWRITTEN
    592  2950				  -	      .byte	%00001000	; HANDWRITTEN
    593  2950				  -	      .byte	%00000110	; HANDWRITTEN
    594  2950				  -
    595  2950				  -			;byte %00000000 ; HANDWRITTEN
    596  2950				  -
    597  2950				  -	      .byte	%00010000	; HANDWRITTEN
    598  2950				  -	      .byte	%00010000	; HANDWRITTEN
    599  2950				  -	      .byte	%00010000	; HANDWRITTEN
    600  2950				  -	      .byte	%00001000	; HANDWRITTEN
    601  2950				  -	      .byte	%00000100	; HANDWRITTEN
    602  2950				  -	      .byte	%00000100	; HANDWRITTEN
    603  2950				  -	      .byte	%00110010	; HANDWRITTEN
    604  2950				  -	      .byte	%00001110	; HANDWRITTEN
    605  2950				  -
    606  2950				  -			;byte %00000000 ; HANDWRITTEN
    607  2950				  -
    608  2950				  -	      .byte	%00110000	; HANDWRITTEN
    609  2950				  -	      .byte	%01001000	; HANDWRITTEN
    610  2950				  -	      .byte	%01000100	; HANDWRITTEN
    611  2950				  -	      .byte	%00100100	; HANDWRITTEN
    612  2950				  -	      .byte	%00011100	; HANDWRITTEN
    613  2950				  -	      .byte	%00010010	; HANDWRITTEN
    614  2950				  -	      .byte	%00001010	; HANDWRITTEN
    615  2950				  -	      .byte	%00000110	; HANDWRITTEN
    616  2950				  -
    617  2950				  -			;byte %00000000 ; HANDWRITTEN
    618  2950				  -
    619  2950				  -	      .byte	%00010000	; HANDWRITTEN
    620  2950				  -	      .byte	%00010000	; HANDWRITTEN
    621  2950				  -	      .byte	%00001000	; HANDWRITTEN
    622  2950				  -	      .byte	%00001000	; HANDWRITTEN
    623  2950				  -	      .byte	%00011100	; HANDWRITTEN
    624  2950				  -	      .byte	%00100100	; HANDWRITTEN
    625  2950				  -	      .byte	%00010010	; HANDWRITTEN
    626  2950				  -	      .byte	%00001100	; HANDWRITTEN
    627  2950				  -
    628  2950					      endif		; HANDWRITTEN
    629  2950
    630  2950				  -	      if	fontstyle == INTERRUPTED
    631  2950				  -
    632  2950				  -			;byte %00000000 ; INTERRUPTED
    633  2950				  -
    634  2950				  -	      .byte	%00110100	; INTERRUPTED
    635  2950				  -	      .byte	%01100110	; INTERRUPTED
    636  2950				  -	      .byte	%01100110	; INTERRUPTED
    637  2950				  -	      .byte	%01100110	; INTERRUPTED
    638  2950				  -	      .byte	%01100110	; INTERRUPTED
    639  2950				  -	      .byte	%01100110	; INTERRUPTED
    640  2950				  -	      .byte	%01100110	; INTERRUPTED
    641  2950				  -	      .byte	%00110100	; INTERRUPTED
    642  2950				  -
    643  2950				  -			;byte %00000000 ; INTERRUPTED
    644  2950				  -
    645  2950				  -	      .byte	%00111100	; INTERRUPTED
    646  2950				  -	      .byte	%00000000	; INTERRUPTED
    647  2950				  -	      .byte	%00011000	; INTERRUPTED
    648  2950				  -	      .byte	%00011000	; INTERRUPTED
    649  2950				  -	      .byte	%00011000	; INTERRUPTED
    650  2950				  -	      .byte	%00011000	; INTERRUPTED
    651  2950				  -	      .byte	%00011000	; INTERRUPTED
    652  2950				  -	      .byte	%00111000	; INTERRUPTED
    653  2950				  -
    654  2950				  -			;byte %00000000 ; INTERRUPTED
    655  2950				  -
    656  2950				  -	      .byte	%01101110	; INTERRUPTED
    657  2950				  -	      .byte	%01100000	; INTERRUPTED
    658  2950				  -	      .byte	%00110000	; INTERRUPTED
    659  2950				  -	      .byte	%00011000	; INTERRUPTED
    660  2950				  -	      .byte	%00001100	; INTERRUPTED
    661  2950				  -	      .byte	%00000110	; INTERRUPTED
    662  2950				  -	      .byte	%01000110	; INTERRUPTED
    663  2950				  -	      .byte	%00111100	; INTERRUPTED
    664  2950				  -
    665  2950				  -			;byte %00000000 ; INTERRUPTED
    666  2950				  -
    667  2950				  -	      .byte	%01111100	; INTERRUPTED
    668  2950				  -	      .byte	%00000110	; INTERRUPTED
    669  2950				  -	      .byte	%00000110	; INTERRUPTED
    670  2950				  -	      .byte	%00000110	; INTERRUPTED
    671  2950				  -	      .byte	%01110110	; INTERRUPTED
    672  2950				  -	      .byte	%00000110	; INTERRUPTED
    673  2950				  -	      .byte	%00000110	; INTERRUPTED
    674  2950				  -	      .byte	%01110100	; INTERRUPTED
    675  2950				  -
    676  2950				  -			;byte %00000000 ; INTERRUPTED
    677  2950				  -
    678  2950				  -	      .byte	%00000110	; INTERRUPTED
    679  2950				  -	      .byte	%00000110	; INTERRUPTED
    680  2950				  -	      .byte	%00000110	; INTERRUPTED
    681  2950				  -	      .byte	%00000110	; INTERRUPTED
    682  2950				  -	      .byte	%01110110	; INTERRUPTED
    683  2950				  -	      .byte	%01100110	; INTERRUPTED
    684  2950				  -	      .byte	%01100110	; INTERRUPTED
    685  2950				  -	      .byte	%01100110	; INTERRUPTED
    686  2950				  -
    687  2950				  -			;byte %00000000 ; INTERRUPTED
    688  2950				  -
    689  2950				  -	      .byte	%01111100	; INTERRUPTED
    690  2950				  -	      .byte	%00000110	; INTERRUPTED
    691  2950				  -	      .byte	%00000110	; INTERRUPTED
    692  2950				  -	      .byte	%00000110	; INTERRUPTED
    693  2950				  -	      .byte	%01111100	; INTERRUPTED
    694  2950				  -	      .byte	%01100000	; INTERRUPTED
    695  2950				  -	      .byte	%01100000	; INTERRUPTED
    696  2950				  -	      .byte	%01101110	; INTERRUPTED
    697  2950				  -
    698  2950				  -			;byte %00000000 ; INTERRUPTED
    699  2950				  -
    700  2950				  -	      .byte	%00101100	; INTERRUPTED
    701  2950				  -	      .byte	%01100110	; INTERRUPTED
    702  2950				  -	      .byte	%01100110	; INTERRUPTED
    703  2950				  -	      .byte	%01100110	; INTERRUPTED
    704  2950				  -	      .byte	%01101100	; INTERRUPTED
    705  2950				  -	      .byte	%01100000	; INTERRUPTED
    706  2950				  -	      .byte	%00110000	; INTERRUPTED
    707  2950				  -	      .byte	%00011100	; INTERRUPTED
    708  2950				  -
    709  2950				  -			;byte %00000000 ; INTERRUPTED
    710  2950				  -
    711  2950				  -	      .byte	%00011000	; INTERRUPTED
    712  2950				  -	      .byte	%00011000	; INTERRUPTED
    713  2950				  -	      .byte	%00011000	; INTERRUPTED
    714  2950				  -	      .byte	%00011100	; INTERRUPTED
    715  2950				  -	      .byte	%00001110	; INTERRUPTED
    716  2950				  -	      .byte	%00000110	; INTERRUPTED
    717  2950				  -	      .byte	%00000000	; INTERRUPTED
    718  2950				  -	      .byte	%01111110	; INTERRUPTED
    719  2950				  -
    720  2950				  -			;byte %00000000 ; INTERRUPTED
    721  2950				  -
    722  2950				  -	      .byte	%00110100	; INTERRUPTED
    723  2950				  -	      .byte	%01100110	; INTERRUPTED
    724  2950				  -	      .byte	%01100110	; INTERRUPTED
    725  2950				  -	      .byte	%01100110	; INTERRUPTED
    726  2950				  -	      .byte	%00110100	; INTERRUPTED
    727  2950				  -	      .byte	%01100110	; INTERRUPTED
    728  2950				  -	      .byte	%01100110	; INTERRUPTED
    729  2950				  -	      .byte	%00110100	; INTERRUPTED
    730  2950				  -
    731  2950				  -			;byte %00000000 ; INTERRUPTED
    732  2950				  -
    733  2950				  -	      .byte	%00111000	; INTERRUPTED
    734  2950				  -	      .byte	%00001100	; INTERRUPTED
    735  2950				  -	      .byte	%00000110	; INTERRUPTED
    736  2950				  -	      .byte	%00110110	; INTERRUPTED
    737  2950				  -	      .byte	%01100110	; INTERRUPTED
    738  2950				  -	      .byte	%01100110	; INTERRUPTED
    739  2950				  -	      .byte	%01100110	; INTERRUPTED
    740  2950				  -	      .byte	%00110100	; INTERRUPTED
    741  2950				  -
    742  2950					      endif		; INTERRUPTED
    743  2950
    744  2950
    745  2950				  -	      if	fontstyle == TINY
    746  2950				  -
    747  2950				  -			;byte %00000000 ; TINY
    748  2950				  -
    749  2950				  -	      .byte	%00000000	; TINY
    750  2950				  -	      .byte	%00111000	; TINY
    751  2950				  -	      .byte	%00101000	; TINY
    752  2950				  -	      .byte	%00101000	; TINY
    753  2950				  -	      .byte	%00101000	; TINY
    754  2950				  -	      .byte	%00111000	; TINY
    755  2950				  -	      .byte	%00000000	; TINY
    756  2950				  -	      .byte	%00000000	; TINY
    757  2950				  -
    758  2950				  -			;byte %00000000 ; TINY
    759  2950				  -
    760  2950				  -	      .byte	%00000000	; TINY
    761  2950				  -	      .byte	%00010000	; TINY
    762  2950				  -	      .byte	%00010000	; TINY
    763  2950				  -	      .byte	%00010000	; TINY
    764  2950				  -	      .byte	%00010000	; TINY
    765  2950				  -	      .byte	%00010000	; TINY
    766  2950				  -	      .byte	%00000000	; TINY
    767  2950				  -	      .byte	%00000000	; TINY
    768  2950				  -
    769  2950				  -			;byte %00000000 ; TINY
    770  2950				  -
    771  2950				  -	      .byte	%00000000	; TINY
    772  2950				  -	      .byte	%00111000	; TINY
    773  2950				  -	      .byte	%00100000	; TINY
    774  2950				  -	      .byte	%00111000	; TINY
    775  2950				  -	      .byte	%00001000	; TINY
    776  2950				  -	      .byte	%00111000	; TINY
    777  2950				  -	      .byte	%00000000	; TINY
    778  2950				  -	      .byte	%00000000	; TINY
    779  2950				  -
    780  2950				  -			;byte %00000000 ; TINY
    781  2950				  -
    782  2950				  -	      .byte	%00000000	; TINY
    783  2950				  -	      .byte	%00111000	; TINY
    784  2950				  -	      .byte	%00001000	; TINY
    785  2950				  -	      .byte	%00111000	; TINY
    786  2950				  -	      .byte	%00001000	; TINY
    787  2950				  -	      .byte	%00111000	; TINY
    788  2950				  -	      .byte	%00000000	; TINY
    789  2950				  -	      .byte	%00000000	; TINY
    790  2950				  -
    791  2950				  -			;byte %00000000 ; TINY
    792  2950				  -
    793  2950				  -	      .byte	%00000000	; TINY
    794  2950				  -	      .byte	%00001000	; TINY
    795  2950				  -	      .byte	%00001000	; TINY
    796  2950				  -	      .byte	%00111000	; TINY
    797  2950				  -	      .byte	%00101000	; TINY
    798  2950				  -	      .byte	%00101000	; TINY
    799  2950				  -	      .byte	%00000000	; TINY
    800  2950				  -	      .byte	%00000000	; TINY
    801  2950				  -
    802  2950				  -			;byte %00000000 ; TINY
    803  2950				  -
    804  2950				  -	      .byte	%00000000	; TINY
    805  2950				  -	      .byte	%00111000	; TINY
    806  2950				  -	      .byte	%00001000	; TINY
    807  2950				  -	      .byte	%00111000	; TINY
    808  2950				  -	      .byte	%00100000	; TINY
    809  2950				  -	      .byte	%00111000	; TINY
    810  2950				  -	      .byte	%00000000	; TINY
    811  2950				  -	      .byte	%00000000	; TINY
    812  2950				  -
    813  2950				  -			;byte %00000000 ; TINY
    814  2950				  -
    815  2950				  -	      .byte	%00000000	; TINY
    816  2950				  -	      .byte	%00111000	; TINY
    817  2950				  -	      .byte	%00101000	; TINY
    818  2950				  -	      .byte	%00111000	; TINY
    819  2950				  -	      .byte	%00100000	; TINY
    820  2950				  -	      .byte	%00111000	; TINY
    821  2950				  -	      .byte	%00000000	; TINY
    822  2950				  -	      .byte	%00000000	; TINY
    823  2950				  -
    824  2950				  -			;byte %00000000 ; TINY
    825  2950				  -
    826  2950				  -	      .byte	%00000000	; TINY
    827  2950				  -	      .byte	%00001000	; TINY
    828  2950				  -	      .byte	%00001000	; TINY
    829  2950				  -	      .byte	%00001000	; TINY
    830  2950				  -	      .byte	%00001000	; TINY
    831  2950				  -	      .byte	%00111000	; TINY
    832  2950				  -	      .byte	%00000000	; TINY
    833  2950				  -	      .byte	%00000000	; TINY
    834  2950				  -
    835  2950				  -			;byte %00000000 ; TINY
    836  2950				  -
    837  2950				  -	      .byte	%00000000	; TINY
    838  2950				  -	      .byte	%00111000	; TINY
    839  2950				  -	      .byte	%00101000	; TINY
    840  2950				  -	      .byte	%00111000	; TINY
    841  2950				  -	      .byte	%00101000	; TINY
    842  2950				  -	      .byte	%00111000	; TINY
    843  2950				  -	      .byte	%00000000	; TINY
    844  2950				  -	      .byte	%00000000	; TINY
    845  2950				  -
    846  2950				  -			;byte %00000000 ; TINY
    847  2950				  -
    848  2950				  -	      .byte	%00000000	; TINY
    849  2950				  -	      .byte	%00001000	; TINY
    850  2950				  -	      .byte	%00001000	; TINY
    851  2950				  -	      .byte	%00111000	; TINY
    852  2950				  -	      .byte	%00101000	; TINY
    853  2950				  -	      .byte	%00111000	; TINY
    854  2950				  -	      .byte	%00000000	; TINY
    855  2950				  -	      .byte	%00000000	; TINY
    856  2950				  -
    857  2950					      endif		; TINY
    858  2950
    859  2950				  -	      if	fontstyle == RETROPUTER
    860  2950				  -
    861  2950				  -			;byte %00000000 ; RETROPUTER
    862  2950				  -
    863  2950				  -	      .byte	%01111110	; RETROPUTER
    864  2950				  -	      .byte	%01000110	; RETROPUTER
    865  2950				  -	      .byte	%01000110	; RETROPUTER
    866  2950				  -	      .byte	%01000110	; RETROPUTER
    867  2950				  -	      .byte	%01100010	; RETROPUTER
    868  2950				  -	      .byte	%01100010	; RETROPUTER
    869  2950				  -	      .byte	%01100010	; RETROPUTER
    870  2950				  -	      .byte	%01111110	; RETROPUTER
    871  2950				  -
    872  2950				  -			;byte %00000000 ; RETROPUTER
    873  2950				  -
    874  2950				  -	      .byte	%00111000	; RETROPUTER
    875  2950				  -	      .byte	%00111000	; RETROPUTER
    876  2950				  -	      .byte	%00111000	; RETROPUTER
    877  2950				  -	      .byte	%00111000	; RETROPUTER
    878  2950				  -	      .byte	%00011000	; RETROPUTER
    879  2950				  -	      .byte	%00011000	; RETROPUTER
    880  2950				  -	      .byte	%00011000	; RETROPUTER
    881  2950				  -	      .byte	%00011000	; RETROPUTER
    882  2950				  -
    883  2950				  -			;byte %00000000 ; RETROPUTER
    884  2950				  -
    885  2950				  -	      .byte	%01111110	; RETROPUTER
    886  2950				  -	      .byte	%01100000	; RETROPUTER
    887  2950				  -	      .byte	%01100000	; RETROPUTER
    888  2950				  -	      .byte	%01100000	; RETROPUTER
    889  2950				  -	      .byte	%00111110	; RETROPUTER
    890  2950				  -	      .byte	%00000010	; RETROPUTER
    891  2950				  -	      .byte	%01000010	; RETROPUTER
    892  2950				  -	      .byte	%01111110	; RETROPUTER
    893  2950				  -
    894  2950				  -			;byte %00000000 ; RETROPUTER
    895  2950				  -
    896  2950				  -	      .byte	%01111110	; RETROPUTER
    897  2950				  -	      .byte	%01000110	; RETROPUTER
    898  2950				  -	      .byte	%00000110	; RETROPUTER
    899  2950				  -	      .byte	%00000110	; RETROPUTER
    900  2950				  -	      .byte	%00111110	; RETROPUTER
    901  2950				  -	      .byte	%00000010	; RETROPUTER
    902  2950				  -	      .byte	%01000010	; RETROPUTER
    903  2950				  -	      .byte	%01111110	; RETROPUTER
    904  2950				  -
    905  2950				  -			;byte %00000000 ; RETROPUTER
    906  2950				  -
    907  2950				  -	      .byte	%00001100	; RETROPUTER
    908  2950				  -	      .byte	%00001100	; RETROPUTER
    909  2950				  -	      .byte	%00001100	; RETROPUTER
    910  2950				  -	      .byte	%01111110	; RETROPUTER
    911  2950				  -	      .byte	%01000100	; RETROPUTER
    912  2950				  -	      .byte	%01000100	; RETROPUTER
    913  2950				  -	      .byte	%01000100	; RETROPUTER
    914  2950				  -	      .byte	%00000100	; RETROPUTER
    915  2950				  -
    916  2950				  -			;byte %00000000 ; RETROPUTER
    917  2950				  -
    918  2950				  -	      .byte	%01111110	; RETROPUTER
    919  2950				  -	      .byte	%01000110	; RETROPUTER
    920  2950				  -	      .byte	%00000110	; RETROPUTER
    921  2950				  -	      .byte	%00000110	; RETROPUTER
    922  2950				  -	      .byte	%01111100	; RETROPUTER
    923  2950				  -	      .byte	%01000000	; RETROPUTER
    924  2950				  -	      .byte	%01000000	; RETROPUTER
    925  2950				  -	      .byte	%01111110	; RETROPUTER
    926  2950				  -
    927  2950				  -			;byte %00000000 ; RETROPUTER
    928  2950				  -
    929  2950				  -	      .byte	%01111110	; RETROPUTER
    930  2950				  -	      .byte	%01000110	; RETROPUTER
    931  2950				  -	      .byte	%01000110	; RETROPUTER
    932  2950				  -	      .byte	%01000110	; RETROPUTER
    933  2950				  -	      .byte	%01111100	; RETROPUTER
    934  2950				  -	      .byte	%01000000	; RETROPUTER
    935  2950				  -	      .byte	%01000010	; RETROPUTER
    936  2950				  -	      .byte	%01111110	; RETROPUTER
    937  2950				  -
    938  2950				  -			;byte %00000000 ; RETROPUTER
    939  2950				  -
    940  2950				  -	      .byte	%00001100	; RETROPUTER
    941  2950				  -	      .byte	%00001100	; RETROPUTER
    942  2950				  -	      .byte	%00001100	; RETROPUTER
    943  2950				  -	      .byte	%00001100	; RETROPUTER
    944  2950				  -	      .byte	%00000100	; RETROPUTER
    945  2950				  -	      .byte	%00000010	; RETROPUTER
    946  2950				  -	      .byte	%01000010	; RETROPUTER
    947  2950				  -	      .byte	%01111110	; RETROPUTER
    948  2950				  -
    949  2950				  -			;byte %00000000 ; RETROPUTER
    950  2950				  -
    951  2950				  -	      .byte	%01111110	; RETROPUTER
    952  2950				  -	      .byte	%01000110	; RETROPUTER
    953  2950				  -	      .byte	%01000110	; RETROPUTER
    954  2950				  -	      .byte	%01000110	; RETROPUTER
    955  2950				  -	      .byte	%01111110	; RETROPUTER
    956  2950				  -	      .byte	%01000010	; RETROPUTER
    957  2950				  -	      .byte	%01000010	; RETROPUTER
    958  2950				  -	      .byte	%01111110	; RETROPUTER
    959  2950				  -
    960  2950				  -			;byte %00000000 ; RETROPUTER
    961  2950				  -
    962  2950				  -	      .byte	%00000110	; RETROPUTER
    963  2950				  -	      .byte	%00000110	; RETROPUTER
    964  2950				  -	      .byte	%00000110	; RETROPUTER
    965  2950				  -	      .byte	%00000010	; RETROPUTER
    966  2950				  -	      .byte	%01111110	; RETROPUTER
    967  2950				  -	      .byte	%01000010	; RETROPUTER
    968  2950				  -	      .byte	%01000010	; RETROPUTER
    969  2950				  -	      .byte	%01111110	; RETROPUTER
    970  2950				  -
    971  2950					      endif		; RETROPUTER
    972  2950
    973  2950				  -	      if	fontstyle == CURVES
    974  2950				  -
    975  2950				  -			;byte %00000000 ; CURVES
    976  2950				  -
    977  2950				  -	      .byte	%00111100	; CURVES
    978  2950				  -	      .byte	%01111110	; CURVES
    979  2950				  -	      .byte	%01100110	; CURVES
    980  2950				  -	      .byte	%01100110	; CURVES
    981  2950				  -	      .byte	%01100110	; CURVES
    982  2950				  -	      .byte	%01100110	; CURVES
    983  2950				  -	      .byte	%01111110	; CURVES
    984  2950				  -	      .byte	%00111100	; CURVES
    985  2950				  -
    986  2950				  -			;byte %00000000 ; CURVES
    987  2950				  -
    988  2950				  -	      .byte	%00011000	; CURVES
    989  2950				  -	      .byte	%00011000	; CURVES
    990  2950				  -	      .byte	%00011000	; CURVES
    991  2950				  -	      .byte	%00011000	; CURVES
    992  2950				  -	      .byte	%00011000	; CURVES
    993  2950				  -	      .byte	%00011000	; CURVES
    994  2950				  -	      .byte	%01111000	; CURVES
    995  2950				  -	      .byte	%01110000	; CURVES
    996  2950				  -
    997  2950				  -			;byte %00000000 ; CURVES
    998  2950				  -
    999  2950				  -	      .byte	%01111110	; CURVES
   1000  2950				  -	      .byte	%01111110	; CURVES
   1001  2950				  -	      .byte	%01100000	; CURVES
   1002  2950				  -	      .byte	%01111100	; CURVES
   1003  2950				  -	      .byte	%00111110	; CURVES
   1004  2950				  -	      .byte	%00000110	; CURVES
   1005  2950				  -	      .byte	%01111110	; CURVES
   1006  2950				  -	      .byte	%01111100	; CURVES
   1007  2950				  -
   1008  2950				  -			;byte %00000000 ; CURVES
   1009  2950				  -
   1010  2950				  -	      .byte	%01111100	; CURVES
   1011  2950				  -	      .byte	%01111110	; CURVES
   1012  2950				  -	      .byte	%00001110	; CURVES
   1013  2950				  -	      .byte	%00111100	; CURVES
   1014  2950				  -	      .byte	%00111100	; CURVES
   1015  2950				  -	      .byte	%00001110	; CURVES
   1016  2950				  -	      .byte	%01111110	; CURVES
   1017  2950				  -	      .byte	%01111100	; CURVES
   1018  2950				  -
   1019  2950				  -			;byte %00000000 ; CURVES
   1020  2950				  -
   1021  2950				  -	      .byte	%00000110	; CURVES
   1022  2950				  -	      .byte	%00000110	; CURVES
   1023  2950				  -	      .byte	%00111110	; CURVES
   1024  2950				  -	      .byte	%01111110	; CURVES
   1025  2950				  -	      .byte	%01100110	; CURVES
   1026  2950				  -	      .byte	%01100110	; CURVES
   1027  2950				  -	      .byte	%01100110	; CURVES
   1028  2950				  -	      .byte	%01100110	; CURVES
   1029  2950				  -
   1030  2950				  -			;byte %00000000 ; CURVES
   1031  2950				  -
   1032  2950				  -	      .byte	%01111100	; CURVES
   1033  2950				  -	      .byte	%01111110	; CURVES
   1034  2950				  -	      .byte	%00000110	; CURVES
   1035  2950				  -	      .byte	%01111110	; CURVES
   1036  2950				  -	      .byte	%01111100	; CURVES
   1037  2950				  -	      .byte	%01100000	; CURVES
   1038  2950				  -	      .byte	%01111110	; CURVES
   1039  2950				  -	      .byte	%01111110	; CURVES
   1040  2950				  -
   1041  2950				  -			;byte %00000000 ; CURVES
   1042  2950				  -
   1043  2950				  -	      .byte	%00111100	; CURVES
   1044  2950				  -	      .byte	%01111110	; CURVES
   1045  2950				  -	      .byte	%01100110	; CURVES
   1046  2950				  -	      .byte	%01111110	; CURVES
   1047  2950				  -	      .byte	%01111100	; CURVES
   1048  2950				  -	      .byte	%01100000	; CURVES
   1049  2950				  -	      .byte	%01111110	; CURVES
   1050  2950				  -	      .byte	%00111110	; CURVES
   1051  2950				  -
   1052  2950				  -			;byte %00000000 ; CURVES
   1053  2950				  -
   1054  2950				  -	      .byte	%00000110	; CURVES
   1055  2950				  -	      .byte	%00000110	; CURVES
   1056  2950				  -	      .byte	%00000110	; CURVES
   1057  2950				  -	      .byte	%00000110	; CURVES
   1058  2950				  -	      .byte	%00000110	; CURVES
   1059  2950				  -	      .byte	%01100110	; CURVES
   1060  2950				  -	      .byte	%01111110	; CURVES
   1061  2950				  -	      .byte	%00111100	; CURVES
   1062  2950				  -
   1063  2950				  -			;byte %00000000 ; CURVES
   1064  2950				  -
   1065  2950				  -	      .byte	%00111100	; CURVES
   1066  2950				  -	      .byte	%01111110	; CURVES
   1067  2950				  -	      .byte	%01100110	; CURVES
   1068  2950				  -	      .byte	%01111110	; CURVES
   1069  2950				  -	      .byte	%00111100	; CURVES
   1070  2950				  -	      .byte	%01100110	; CURVES
   1071  2950				  -	      .byte	%01111110	; CURVES
   1072  2950				  -	      .byte	%00111100	; CURVES
   1073  2950				  -
   1074  2950				  -			;byte %00000000 ; CURVES
   1075  2950				  -
   1076  2950				  -	      .byte	%01111100	; CURVES
   1077  2950				  -	      .byte	%01111110	; CURVES
   1078  2950				  -	      .byte	%00000110	; CURVES
   1079  2950				  -	      .byte	%00111110	; CURVES
   1080  2950				  -	      .byte	%01111110	; CURVES
   1081  2950				  -	      .byte	%01100110	; CURVES
   1082  2950				  -	      .byte	%01111110	; CURVES
   1083  2950				  -	      .byte	%00111100	; CURVES
   1084  2950				  -
   1085  2950					      endif		; CURVES
   1086  2950
   1087  2950
   1088  2950				  -	      if	fontstyle == HUSKY
   1089  2950				  -
   1090  2950				  -			;byte %00000000 ; HUSKY
   1091  2950				  -
   1092  2950				  -	      .byte	%01111100	; HUSKY
   1093  2950				  -	      .byte	%11111110	; HUSKY
   1094  2950				  -	      .byte	%11101110	; HUSKY
   1095  2950				  -	      .byte	%11101110	; HUSKY
   1096  2950				  -	      .byte	%11101110	; HUSKY
   1097  2950				  -	      .byte	%11101110	; HUSKY
   1098  2950				  -	      .byte	%11111110	; HUSKY
   1099  2950				  -	      .byte	%01111100	; HUSKY
   1100  2950				  -
   1101  2950				  -			;byte %00000000 ; HUSKY
   1102  2950				  -
   1103  2950				  -	      .byte	%00111000	; HUSKY
   1104  2950				  -	      .byte	%00111000	; HUSKY
   1105  2950				  -	      .byte	%00111000	; HUSKY
   1106  2950				  -	      .byte	%00111000	; HUSKY
   1107  2950				  -	      .byte	%00111000	; HUSKY
   1108  2950				  -	      .byte	%00111000	; HUSKY
   1109  2950				  -	      .byte	%00111000	; HUSKY
   1110  2950				  -	      .byte	%00111000	; HUSKY
   1111  2950				  -
   1112  2950				  -			;byte %00000000 ; HUSKY
   1113  2950				  -
   1114  2950				  -	      .byte	%11111110	; HUSKY
   1115  2950				  -	      .byte	%11111110	; HUSKY
   1116  2950				  -	      .byte	%11100000	; HUSKY
   1117  2950				  -	      .byte	%11111100	; HUSKY
   1118  2950				  -	      .byte	%01111110	; HUSKY
   1119  2950				  -	      .byte	%00001110	; HUSKY
   1120  2950				  -	      .byte	%11111110	; HUSKY
   1121  2950				  -	      .byte	%11111100	; HUSKY
   1122  2950				  -
   1123  2950				  -			;byte %00000000 ; HUSKY
   1124  2950				  -
   1125  2950				  -	      .byte	%11111100	; HUSKY
   1126  2950				  -	      .byte	%11111110	; HUSKY
   1127  2950				  -	      .byte	%00001110	; HUSKY
   1128  2950				  -	      .byte	%11111100	; HUSKY
   1129  2950				  -	      .byte	%11111100	; HUSKY
   1130  2950				  -	      .byte	%00001110	; HUSKY
   1131  2950				  -	      .byte	%11111110	; HUSKY
   1132  2950				  -	      .byte	%11111100	; HUSKY
   1133  2950				  -
   1134  2950				  -			;byte %00000000 ; HUSKY
   1135  2950				  -
   1136  2950				  -	      .byte	%00011100	; HUSKY
   1137  2950				  -	      .byte	%00011100	; HUSKY
   1138  2950				  -	      .byte	%11111110	; HUSKY
   1139  2950				  -	      .byte	%11111110	; HUSKY
   1140  2950				  -	      .byte	%11011100	; HUSKY
   1141  2950				  -	      .byte	%11011100	; HUSKY
   1142  2950				  -	      .byte	%00011100	; HUSKY
   1143  2950				  -	      .byte	%00011100	; HUSKY
   1144  2950				  -
   1145  2950				  -			;byte %00000000 ; HUSKY
   1146  2950				  -
   1147  2950				  -	      .byte	%11111100	; HUSKY
   1148  2950				  -	      .byte	%11111110	; HUSKY
   1149  2950				  -	      .byte	%00001110	; HUSKY
   1150  2950				  -	      .byte	%11111110	; HUSKY
   1151  2950				  -	      .byte	%11111100	; HUSKY
   1152  2950				  -	      .byte	%11100000	; HUSKY
   1153  2950				  -	      .byte	%11111110	; HUSKY
   1154  2950				  -	      .byte	%11111110	; HUSKY
   1155  2950				  -
   1156  2950				  -			;byte %00000000 ; HUSKY
   1157  2950				  -
   1158  2950				  -	      .byte	%01111100	; HUSKY
   1159  2950				  -	      .byte	%11111110	; HUSKY
   1160  2950				  -	      .byte	%11101110	; HUSKY
   1161  2950				  -	      .byte	%11111110	; HUSKY
   1162  2950				  -	      .byte	%11111100	; HUSKY
   1163  2950				  -	      .byte	%11100000	; HUSKY
   1164  2950				  -	      .byte	%11111110	; HUSKY
   1165  2950				  -	      .byte	%01111110	; HUSKY
   1166  2950				  -
   1167  2950				  -			;byte %00000000 ; HUSKY
   1168  2950				  -
   1169  2950				  -	      .byte	%00111000	; HUSKY
   1170  2950				  -	      .byte	%00111000	; HUSKY
   1171  2950				  -	      .byte	%00111000	; HUSKY
   1172  2950				  -	      .byte	%00111000	; HUSKY
   1173  2950				  -	      .byte	%00011100	; HUSKY
   1174  2950				  -	      .byte	%00001110	; HUSKY
   1175  2950				  -	      .byte	%11111110	; HUSKY
   1176  2950				  -	      .byte	%11111110	; HUSKY
   1177  2950				  -
   1178  2950				  -			;byte %00000000 ; HUSKY
   1179  2950				  -
   1180  2950				  -	      .byte	%01111100	; HUSKY
   1181  2950				  -	      .byte	%11111110	; HUSKY
   1182  2950				  -	      .byte	%11101110	; HUSKY
   1183  2950				  -	      .byte	%11111110	; HUSKY
   1184  2950				  -	      .byte	%01111100	; HUSKY
   1185  2950				  -	      .byte	%11101110	; HUSKY
   1186  2950				  -	      .byte	%11111110	; HUSKY
   1187  2950				  -	      .byte	%01111100	; HUSKY
   1188  2950				  -
   1189  2950				  -			;byte %00000000 ; HUSKY
   1190  2950				  -
   1191  2950				  -	      .byte	%11111100	; HUSKY
   1192  2950				  -	      .byte	%11111110	; HUSKY
   1193  2950				  -	      .byte	%00001110	; HUSKY
   1194  2950				  -	      .byte	%01111110	; HUSKY
   1195  2950				  -	      .byte	%11111110	; HUSKY
   1196  2950				  -	      .byte	%11101110	; HUSKY
   1197  2950				  -	      .byte	%11111110	; HUSKY
   1198  2950				  -	      .byte	%01111100	; HUSKY
   1199  2950				  -
   1200  2950					      endif		; HUSKY
   1201  2950
   1202  2950
   1203  2950				  -	      if	fontstyle == SNAKE
   1204  2950				  -
   1205  2950				  -			;byte %00000000 ; SNAKE
   1206  2950				  -
   1207  2950				  -	      .byte	%01111110	; SNAKE
   1208  2950				  -	      .byte	%01000010	; SNAKE
   1209  2950				  -	      .byte	%01000010	; SNAKE
   1210  2950				  -	      .byte	%01000010	; SNAKE
   1211  2950				  -	      .byte	%01000010	; SNAKE
   1212  2950				  -	      .byte	%01000010	; SNAKE
   1213  2950				  -	      .byte	%01000010	; SNAKE
   1214  2950				  -	      .byte	%01111110	; SNAKE
   1215  2950				  -
   1216  2950				  -			;byte %00000000 ; SNAKE
   1217  2950				  -
   1218  2950				  -	      .byte	%00111000	; SNAKE
   1219  2950				  -	      .byte	%00101000	; SNAKE
   1220  2950				  -	      .byte	%00001000	; SNAKE
   1221  2950				  -	      .byte	%00001000	; SNAKE
   1222  2950				  -	      .byte	%00001000	; SNAKE
   1223  2950				  -	      .byte	%00001000	; SNAKE
   1224  2950				  -	      .byte	%00001000	; SNAKE
   1225  2950				  -	      .byte	%00111000	; SNAKE
   1226  2950				  -
   1227  2950				  -			;byte %00000000 ; SNAKE
   1228  2950				  -
   1229  2950				  -	      .byte	%01111110	; SNAKE
   1230  2950				  -	      .byte	%01000010	; SNAKE
   1231  2950				  -	      .byte	%01000110	; SNAKE
   1232  2950				  -	      .byte	%01000000	; SNAKE
   1233  2950				  -	      .byte	%01111110	; SNAKE
   1234  2950				  -	      .byte	%00000010	; SNAKE
   1235  2950				  -	      .byte	%01000010	; SNAKE
   1236  2950				  -	      .byte	%01111110	; SNAKE
   1237  2950				  -
   1238  2950				  -			;byte %00000000 ; SNAKE
   1239  2950				  -
   1240  2950				  -	      .byte	%01111110	; SNAKE
   1241  2950				  -	      .byte	%01000010	; SNAKE
   1242  2950				  -	      .byte	%01100010	; SNAKE
   1243  2950				  -	      .byte	%00000010	; SNAKE
   1244  2950				  -	      .byte	%01111110	; SNAKE
   1245  2950				  -	      .byte	%00000010	; SNAKE
   1246  2950				  -	      .byte	%01000010	; SNAKE
   1247  2950				  -	      .byte	%01111110	; SNAKE
   1248  2950				  -
   1249  2950				  -			;byte %00000000 ; SNAKE
   1250  2950				  -
   1251  2950				  -	      .byte	%00001110	; SNAKE
   1252  2950				  -	      .byte	%00001010	; SNAKE
   1253  2950				  -	      .byte	%00000010	; SNAKE
   1254  2950				  -	      .byte	%01111110	; SNAKE
   1255  2950				  -	      .byte	%01000010	; SNAKE
   1256  2950				  -	      .byte	%01000010	; SNAKE
   1257  2950				  -	      .byte	%01000010	; SNAKE
   1258  2950				  -	      .byte	%01100110	; SNAKE
   1259  2950				  -
   1260  2950				  -			;byte %00000000 ; SNAKE
   1261  2950				  -
   1262  2950				  -	      .byte	%01111110	; SNAKE
   1263  2950				  -	      .byte	%01000010	; SNAKE
   1264  2950				  -	      .byte	%01100010	; SNAKE
   1265  2950				  -	      .byte	%00000010	; SNAKE
   1266  2950				  -	      .byte	%01111110	; SNAKE
   1267  2950				  -	      .byte	%01000000	; SNAKE
   1268  2950				  -	      .byte	%01000010	; SNAKE
   1269  2950				  -	      .byte	%01111110	; SNAKE
   1270  2950				  -
   1271  2950				  -			;byte %00000000 ; SNAKE
   1272  2950				  -
   1273  2950				  -	      .byte	%01111110	; SNAKE
   1274  2950				  -	      .byte	%01000010	; SNAKE
   1275  2950				  -	      .byte	%01000010	; SNAKE
   1276  2950				  -	      .byte	%01111110	; SNAKE
   1277  2950				  -	      .byte	%01000000	; SNAKE
   1278  2950				  -	      .byte	%01000110	; SNAKE
   1279  2950				  -	      .byte	%01000010	; SNAKE
   1280  2950				  -	      .byte	%01111110	; SNAKE
   1281  2950				  -
   1282  2950				  -			;byte %00000000 ; SNAKE
   1283  2950				  -
   1284  2950				  -	      .byte	%00000110	; SNAKE
   1285  2950				  -	      .byte	%00000010	; SNAKE
   1286  2950				  -	      .byte	%00000010	; SNAKE
   1287  2950				  -	      .byte	%00000010	; SNAKE
   1288  2950				  -	      .byte	%00000010	; SNAKE
   1289  2950				  -	      .byte	%01100010	; SNAKE
   1290  2950				  -	      .byte	%01000010	; SNAKE
   1291  2950				  -	      .byte	%01111110	; SNAKE
   1292  2950				  -
   1293  2950				  -			;byte %00000000 ; SNAKE
   1294  2950				  -
   1295  2950				  -	      .byte	%01111110	; SNAKE
   1296  2950				  -	      .byte	%01000010	; SNAKE
   1297  2950				  -	      .byte	%01000010	; SNAKE
   1298  2950				  -	      .byte	%01000010	; SNAKE
   1299  2950				  -	      .byte	%01111110	; SNAKE
   1300  2950				  -	      .byte	%01000010	; SNAKE
   1301  2950				  -	      .byte	%01000010	; SNAKE
   1302  2950				  -	      .byte	%01111110	; SNAKE
   1303  2950				  -
   1304  2950				  -			;byte %00000000 ; SNAKE
   1305  2950				  -
   1306  2950				  -	      .byte	%00001110	; SNAKE
   1307  2950				  -	      .byte	%00001010	; SNAKE
   1308  2950				  -	      .byte	%00000010	; SNAKE
   1309  2950				  -	      .byte	%00000010	; SNAKE
   1310  2950				  -	      .byte	%01111110	; SNAKE
   1311  2950				  -	      .byte	%01000010	; SNAKE
   1312  2950				  -	      .byte	%01000010	; SNAKE
   1313  2950				  -	      .byte	%01111110	; SNAKE
   1314  2950				  -
   1315  2950				  -
   1316  2950					      endif		; SNAKE
   1317  2950
   1318  2950				  -	      if	fontstyle == PLOK
   1319  2950				  -
   1320  2950				  -			;byte %00000000 ; PLOK
   1321  2950				  -
   1322  2950				  -	      .byte	%00000000	; PLOK
   1323  2950				  -	      .byte	%00111000	; PLOK
   1324  2950				  -	      .byte	%01100100	; PLOK
   1325  2950				  -	      .byte	%01100010	; PLOK
   1326  2950				  -	      .byte	%01100010	; PLOK
   1327  2950				  -	      .byte	%00110110	; PLOK
   1328  2950				  -	      .byte	%00011100	; PLOK
   1329  2950				  -	      .byte	%00000000	; PLOK
   1330  2950				  -
   1331  2950				  -			;byte %00000000 ; PLOK
   1332  2950				  -
   1333  2950				  -	      .byte	%00000000	; PLOK
   1334  2950				  -	      .byte	%00010000	; PLOK
   1335  2950				  -	      .byte	%00011100	; PLOK
   1336  2950				  -	      .byte	%00011100	; PLOK
   1337  2950				  -	      .byte	%00011000	; PLOK
   1338  2950				  -	      .byte	%00111000	; PLOK
   1339  2950				  -	      .byte	%00011000	; PLOK
   1340  2950				  -	      .byte	%00000000	; PLOK
   1341  2950				  -
   1342  2950				  -			;byte %00000000 ; PLOK
   1343  2950				  -
   1344  2950				  -	      .byte	%00000000	; PLOK
   1345  2950				  -	      .byte	%00001110	; PLOK
   1346  2950				  -	      .byte	%01111110	; PLOK
   1347  2950				  -	      .byte	%00011000	; PLOK
   1348  2950				  -	      .byte	%00001100	; PLOK
   1349  2950				  -	      .byte	%00000110	; PLOK
   1350  2950				  -	      .byte	%00111100	; PLOK
   1351  2950				  -	      .byte	%00000000	; PLOK
   1352  2950				  -
   1353  2950				  -			;byte %00000000 ; PLOK
   1354  2950				  -
   1355  2950				  -	      .byte	%00000000	; PLOK
   1356  2950				  -	      .byte	%00111100	; PLOK
   1357  2950				  -	      .byte	%01101110	; PLOK
   1358  2950				  -	      .byte	%00001110	; PLOK
   1359  2950				  -	      .byte	%00011100	; PLOK
   1360  2950				  -	      .byte	%00000110	; PLOK
   1361  2950				  -	      .byte	%01111100	; PLOK
   1362  2950				  -	      .byte	%00000000	; PLOK
   1363  2950				  -
   1364  2950				  -			;byte %00000000 ; PLOK
   1365  2950				  -
   1366  2950				  -	      .byte	%00000000	; PLOK
   1367  2950				  -	      .byte	%00011000	; PLOK
   1368  2950				  -	      .byte	%01111110	; PLOK
   1369  2950				  -	      .byte	%01101100	; PLOK
   1370  2950				  -	      .byte	%00100100	; PLOK
   1371  2950				  -	      .byte	%00110000	; PLOK
   1372  2950				  -	      .byte	%00110000	; PLOK
   1373  2950				  -	      .byte	%00000000	; PLOK
   1374  2950				  -
   1375  2950				  -			;byte %00000000 ; PLOK
   1376  2950				  -
   1377  2950				  -	      .byte	%00000000	; PLOK
   1378  2950				  -	      .byte	%00111100	; PLOK
   1379  2950				  -	      .byte	%01001110	; PLOK
   1380  2950				  -	      .byte	%00011100	; PLOK
   1381  2950				  -	      .byte	%01100000	; PLOK
   1382  2950				  -	      .byte	%01111100	; PLOK
   1383  2950				  -	      .byte	%00011100	; PLOK
   1384  2950				  -	      .byte	%00000000	; PLOK
   1385  2950				  -
   1386  2950				  -			;byte %00000000 ; PLOK
   1387  2950				  -
   1388  2950				  -	      .byte	%00000000	; PLOK
   1389  2950				  -	      .byte	%00111100	; PLOK
   1390  2950				  -	      .byte	%01000110	; PLOK
   1391  2950				  -	      .byte	%01101100	; PLOK
   1392  2950				  -	      .byte	%01110000	; PLOK
   1393  2950				  -	      .byte	%00111000	; PLOK
   1394  2950				  -	      .byte	%00010000	; PLOK
   1395  2950				  -	      .byte	%00000000	; PLOK
   1396  2950				  -
   1397  2950				  -			;byte %00000000 ; PLOK
   1398  2950				  -
   1399  2950				  -	      .byte	%00000000	; PLOK
   1400  2950				  -	      .byte	%00111100	; PLOK
   1401  2950				  -	      .byte	%00011100	; PLOK
   1402  2950				  -	      .byte	%00001100	; PLOK
   1403  2950				  -	      .byte	%00000110	; PLOK
   1404  2950				  -	      .byte	%01111110	; PLOK
   1405  2950				  -	      .byte	%00110000	; PLOK
   1406  2950				  -	      .byte	%00000000	; PLOK
   1407  2950				  -
   1408  2950				  -			;byte %00000000 ; PLOK
   1409  2950				  -
   1410  2950				  -	      .byte	%00000000	; PLOK
   1411  2950				  -	      .byte	%00111100	; PLOK
   1412  2950				  -	      .byte	%01001110	; PLOK
   1413  2950				  -	      .byte	%01101110	; PLOK
   1414  2950				  -	      .byte	%00111100	; PLOK
   1415  2950				  -	      .byte	%01100100	; PLOK
   1416  2950				  -	      .byte	%00111000	; PLOK
   1417  2950				  -	      .byte	%00000000	; PLOK
   1418  2950				  -
   1419  2950				  -			;byte %00000000 ; PLOK
   1420  2950				  -
   1421  2950				  -	      .byte	%00000000	; PLOK
   1422  2950				  -	      .byte	%00011000	; PLOK
   1423  2950				  -	      .byte	%00001100	; PLOK
   1424  2950				  -	      .byte	%00011100	; PLOK
   1425  2950				  -	      .byte	%00100110	; PLOK
   1426  2950				  -	      .byte	%01001110	; PLOK
   1427  2950				  -	      .byte	%00111100	; PLOK
   1428  2950				  -	      .byte	%00000000	; PLOK
   1429  2950				  -
   1430  2950					      endif		; PLOK
   1431  2950
   1432  2950							; ### any characters that aren't font specific follow... 
   1433  2950
   1434  2950				  -	      ifconst	fontcharSPACE
   1435  2950				  -			;byte %00000000 ; SYMBOLS
   1436  2950				  -
   1437  2950				  -	      .byte	%00000000	; SYMBOLS
   1438  2950				  -	      .byte	%00000000	; SYMBOLS
   1439  2950				  -	      .byte	%00000000	; SYMBOLS
   1440  2950				  -	      .byte	%00000000	; SYMBOLS
   1441  2950				  -	      .byte	%00000000	; SYMBOLS
   1442  2950				  -	      .byte	%00000000	; SYMBOLS
   1443  2950				  -	      .byte	%00000000	; SYMBOLS
   1444  2950				  -	      .byte	%00000000	; SYMBOLS
   1445  2950				  -
   1446  2950				  -			;byte %00000000 ; SYMBOLS
   1447  2950					      endif		; fontcharSPACE
   1448  2950
   1449  2950				  -	      ifconst	fontcharDOLLAR
   1450  2950				  -			;byte %00000000 ; SYMBOLS
   1451  2950				  -
   1452  2950				  -	      .byte	%00000000	; SYMBOLS
   1453  2950				  -	      .byte	%00010000	; SYMBOLS
   1454  2950				  -	      .byte	%01111100	; SYMBOLS
   1455  2950				  -	      .byte	%00010010	; SYMBOLS
   1456  2950				  -	      .byte	%01111100	; SYMBOLS
   1457  2950				  -	      .byte	%10010000	; SYMBOLS
   1458  2950				  -	      .byte	%01111100	; SYMBOLS
   1459  2950				  -	      .byte	%00010000	; SYMBOLS
   1460  2950				  -
   1461  2950				  -			;byte %00000000 ; SYMBOLS
   1462  2950				  -
   1463  2950					      endif		; fontcharDOLLAR
   1464  2950
   1465  2950				  -	      ifconst	fontcharPOUND
   1466  2950				  -			;byte %00000000 ; SYMBOLS
   1467  2950				  -
   1468  2950				  -	      .byte	%01111110	; SYMBOLS
   1469  2950				  -	      .byte	%01000000	; SYMBOLS
   1470  2950				  -	      .byte	%00100000	; SYMBOLS
   1471  2950				  -	      .byte	%00100000	; SYMBOLS
   1472  2950				  -	      .byte	%01111000	; SYMBOLS
   1473  2950				  -	      .byte	%00100000	; SYMBOLS
   1474  2950				  -	      .byte	%00100010	; SYMBOLS
   1475  2950				  -	      .byte	%00011100	; SYMBOLS
   1476  2950				  -
   1477  2950				  -			;byte %00000000 ; SYMBOLS
   1478  2950				  -
   1479  2950					      endif		; fontcharPOUND
   1480  2950
   1481  2950
   1482  2950				  -	      ifconst	fontcharMRHAPPY
   1483  2950				  -			;byte %00000000 ; SYMBOLS
   1484  2950				  -
   1485  2950				  -	      .byte	%00111100	; SYMBOLS
   1486  2950				  -	      .byte	%01100110	; SYMBOLS
   1487  2950				  -	      .byte	%01011010	; SYMBOLS
   1488  2950				  -	      .byte	%01111110	; SYMBOLS
   1489  2950				  -	      .byte	%01111110	; SYMBOLS
   1490  2950				  -	      .byte	%01011010	; SYMBOLS
   1491  2950				  -	      .byte	%01111110	; SYMBOLS
   1492  2950				  -	      .byte	%00111100	; SYMBOLS
   1493  2950				  -
   1494  2950				  -			;byte %00000000 ; SYMBOLS
   1495  2950				  -
   1496  2950					      endif		; fontcharMRHAPPY
   1497  2950
   1498  2950				  -	      ifconst	fontcharMRSAD
   1499  2950				  -			;byte %00000000 ; SYMBOLS
   1500  2950				  -
   1501  2950				  -	      .byte	%00111100	; SYMBOLS
   1502  2950				  -	      .byte	%01011010	; SYMBOLS
   1503  2950				  -	      .byte	%01100110	; SYMBOLS
   1504  2950				  -	      .byte	%01111110	; SYMBOLS
   1505  2950				  -	      .byte	%01111110	; SYMBOLS
   1506  2950				  -	      .byte	%01011010	; SYMBOLS
   1507  2950				  -	      .byte	%01111110	; SYMBOLS
   1508  2950				  -	      .byte	%00111100	; SYMBOLS
   1509  2950				  -
   1510  2950				  -			;byte %00000000 ; SYMBOLS
   1511  2950				  -
   1512  2950					      endif		; fontcharMRSAD
   1513  2950
   1514  2950
   1515  2950				  -	      ifconst	fontcharCOPYRIGHT
   1516  2950				  -			;byte %00000000 ; SYMBOLS
   1517  2950				  -
   1518  2950				  -	      .byte	%00000000	; SYMBOLS
   1519  2950				  -	      .byte	%00111000	; SYMBOLS
   1520  2950				  -	      .byte	%01000100	; SYMBOLS
   1521  2950				  -	      .byte	%10111010	; SYMBOLS
   1522  2950				  -	      .byte	%10100010	; SYMBOLS
   1523  2950				  -	      .byte	%10111010	; SYMBOLS
   1524  2950				  -	      .byte	%01000100	; SYMBOLS
   1525  2950				  -	      .byte	%00111000	; SYMBOLS
   1526  2950				  -
   1527  2950				  -			;byte %00000000 ; SYMBOLS
   1528  2950				  -
   1529  2950					      endif		; fontcharCOPYRIGHT
   1530  2950
   1531  2950
   1532  2950				  -	      ifconst	fontcharFUJI
   1533  2950				  -
   1534  2950				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1535  2950				  -
   1536  2950				  -	      .byte	%01110000	; SYMBOLS
   1537  2950				  -	      .byte	%01111001	; SYMBOLS
   1538  2950				  -	      .byte	%00011101	; SYMBOLS
   1539  2950				  -	      .byte	%00001101	; SYMBOLS
   1540  2950				  -	      .byte	%00001101	; SYMBOLS
   1541  2950				  -	      .byte	%00001101	; SYMBOLS
   1542  2950				  -	      .byte	%00001101	; SYMBOLS
   1543  2950				  -	      .byte	%00000000	; SYMBOLS
   1544  2950				  -
   1545  2950				  -			;byte %00000000 ; SYMBOLS
   1546  2950				  -
   1547  2950				  -	      .byte	%00001110	; SYMBOLS
   1548  2950				  -	      .byte	%10011110	; SYMBOLS
   1549  2950				  -	      .byte	%10111000	; SYMBOLS
   1550  2950				  -	      .byte	%10110000	; SYMBOLS
   1551  2950				  -	      .byte	%10110000	; SYMBOLS
   1552  2950				  -	      .byte	%10110000	; SYMBOLS
   1553  2950				  -	      .byte	%10110000	; SYMBOLS
   1554  2950				  -	      .byte	%00000000	; SYMBOLS
   1555  2950				  -
   1556  2950				  -			;byte %00000000 ; SYMBOLS
   1557  2950				  -
   1558  2950					      endif		; fontcharFUJI
   1559  2950
   1560  2950
   1561  2950				  -	      ifconst	fontcharHEART
   1562  2950				  -			;byte %00000000 ; SYMBOLS
   1563  2950				  -
   1564  2950				  -	      .byte	%00010000	; SYMBOLS
   1565  2950				  -	      .byte	%00111000	; SYMBOLS
   1566  2950				  -	      .byte	%01111100	; SYMBOLS
   1567  2950				  -	      .byte	%01111100	; SYMBOLS
   1568  2950				  -	      .byte	%11111110	; SYMBOLS
   1569  2950				  -	      .byte	%11111110	; SYMBOLS
   1570  2950				  -	      .byte	%11101110	; SYMBOLS
   1571  2950				  -	      .byte	%01000100	; SYMBOLS
   1572  2950				  -
   1573  2950				  -			;byte %00000000 ; SYMBOLS
   1574  2950				  -
   1575  2950					      endif		; fontcharHEART
   1576  2950
   1577  2950				  -	      ifconst	fontcharDIAMOND
   1578  2950				  -			;byte %00000000 ; SYMBOLS
   1579  2950				  -
   1580  2950				  -	      .byte	%00010000	; SYMBOLS
   1581  2950				  -	      .byte	%00111000	; SYMBOLS
   1582  2950				  -	      .byte	%01111100	; SYMBOLS
   1583  2950				  -	      .byte	%11111110	; SYMBOLS
   1584  2950				  -	      .byte	%11111110	; SYMBOLS
   1585  2950				  -	      .byte	%01111100	; SYMBOLS
   1586  2950				  -	      .byte	%00111000	; SYMBOLS
   1587  2950				  -	      .byte	%00010000	; SYMBOLS
   1588  2950				  -
   1589  2950				  -			;byte %00000000 ; SYMBOLS
   1590  2950				  -
   1591  2950					      endif		; fontcharDIAMOND
   1592  2950
   1593  2950				  -	      ifconst	fontcharSPADE
   1594  2950				  -			;byte %00000000 ; SYMBOLS
   1595  2950				  -
   1596  2950				  -	      .byte	%00111000	; SYMBOLS
   1597  2950				  -	      .byte	%00010000	; SYMBOLS
   1598  2950				  -	      .byte	%01010100	; SYMBOLS
   1599  2950				  -	      .byte	%11111110	; SYMBOLS
   1600  2950				  -	      .byte	%11111110	; SYMBOLS
   1601  2950				  -	      .byte	%01111100	; SYMBOLS
   1602  2950				  -	      .byte	%00111000	; SYMBOLS
   1603  2950				  -	      .byte	%00010000	; SYMBOLS
   1604  2950				  -
   1605  2950				  -			;byte %00000000 ; SYMBOLS
   1606  2950				  -
   1607  2950					      endif		; fontcharSPADE
   1608  2950
   1609  2950				  -	      ifconst	fontcharCLUB
   1610  2950				  -			;byte %00000000 ; SYMBOLS
   1611  2950				  -
   1612  2950				  -	      .byte	%00111000	; SYMBOLS
   1613  2950				  -	      .byte	%00010000	; SYMBOLS
   1614  2950				  -	      .byte	%11010110	; SYMBOLS
   1615  2950				  -	      .byte	%11111110	; SYMBOLS
   1616  2950				  -	      .byte	%11010110	; SYMBOLS
   1617  2950				  -	      .byte	%00111000	; SYMBOLS
   1618  2950				  -	      .byte	%00111000	; SYMBOLS
   1619  2950				  -	      .byte	%00000000	; SYMBOLS
   1620  2950				  -
   1621  2950				  -			;byte %00000000 ; SYMBOLS
   1622  2950				  -
   1623  2950					      endif		; fontcharCLUB
   1624  2950
   1625  2950
   1626  2950				  -	      ifconst	fontcharCOLON
   1627  2950				  -			;byte %00000000 ; SYMBOLS
   1628  2950				  -
   1629  2950				  -	      .byte	%00000000	; SYMBOLS
   1630  2950				  -	      .byte	%00011000	; SYMBOLS
   1631  2950				  -	      .byte	%00011000	; SYMBOLS
   1632  2950				  -	      .byte	%00000000	; SYMBOLS
   1633  2950				  -	      .byte	%00000000	; SYMBOLS
   1634  2950				  -	      .byte	%00011000	; SYMBOLS
   1635  2950				  -	      .byte	%00011000	; SYMBOLS
   1636  2950				  -	      .byte	%00000000	; SYMBOLS
   1637  2950				  -
   1638  2950				  -			;byte %00000000 ; SYMBOLS
   1639  2950				  -
   1640  2950					      endif		; fontcharCOLON
   1641  2950
   1642  2950
   1643  2950				  -	      ifconst	fontcharBLOCK
   1644  2950				  -
   1645  2950				  -			;byte %00000000 ; SYMBOLS
   1646  2950				  -
   1647  2950				  -	      .byte	%11111111	; SYMBOLS
   1648  2950				  -	      .byte	%11111111	; SYMBOLS
   1649  2950				  -	      .byte	%11111111	; SYMBOLS
   1650  2950				  -	      .byte	%11111111	; SYMBOLS
   1651  2950				  -	      .byte	%11111111	; SYMBOLS
   1652  2950				  -	      .byte	%11111111	; SYMBOLS
   1653  2950				  -	      .byte	%11111111	; SYMBOLS
   1654  2950				  -	      .byte	%11111111	; SYMBOLS
   1655  2950				  -
   1656  2950				  -			;byte %00000000 ; SYMBOLS
   1657  2950				  -
   1658  2950					      endif		; fontcharBLOCK
   1659  2950
   1660  2950				  -	      ifconst	fontcharUNDERLINE
   1661  2950				  -
   1662  2950				  -			;byte %00000000 ; SYMBOLS
   1663  2950				  -
   1664  2950				  -	      .byte	%11111111	; SYMBOLS
   1665  2950				  -	      .byte	%00000000	; SYMBOLS
   1666  2950				  -	      .byte	%00000000	; SYMBOLS
   1667  2950				  -	      .byte	%00000000	; SYMBOLS
   1668  2950				  -	      .byte	%00000000	; SYMBOLS
   1669  2950				  -	      .byte	%00000000	; SYMBOLS
   1670  2950				  -	      .byte	%00000000	; SYMBOLS
   1671  2950				  -	      .byte	%00000000	; SYMBOLS
   1672  2950				  -
   1673  2950				  -			;byte %00000000 ; SYMBOLS
   1674  2950				  -
   1675  2950					      endif		; fontcharUNDERLINE
   1676  2950
   1677  2950				  -	      ifconst	fontcharARISIDE
   1678  2950				  -			;byte %00000000 ; SYMBOLS
   1679  2950				  -
   1680  2950				  -	      .byte	%00000000	; SYMBOLS
   1681  2950				  -	      .byte	%00101010	; SYMBOLS
   1682  2950				  -	      .byte	%00101010	; SYMBOLS
   1683  2950				  -	      .byte	%00101100	; SYMBOLS
   1684  2950				  -	      .byte	%01111111	; SYMBOLS
   1685  2950				  -	      .byte	%00110111	; SYMBOLS
   1686  2950				  -	      .byte	%00000010	; SYMBOLS
   1687  2950				  -	      .byte	%00000001	; SYMBOLS
   1688  2950				  -
   1689  2950				  -			;byte %00000000 ; SYMBOLS
   1690  2950				  -
   1691  2950					      endif		; fontcharARISIDE
   1692  2950
   1693  2950				  -	      ifconst	fontcharARIFACE
   1694  2950				  -			;byte %00000000 ; SYMBOLS
   1695  2950				  -
   1696  2950				  -	      .byte	%00001000	; SYMBOLS
   1697  2950				  -	      .byte	%00011100	; SYMBOLS
   1698  2950				  -	      .byte	%00111110	; SYMBOLS
   1699  2950				  -	      .byte	%00101010	; SYMBOLS
   1700  2950				  -	      .byte	%00011100	; SYMBOLS
   1701  2950				  -	      .byte	%01010100	; SYMBOLS
   1702  2950				  -	      .byte	%00100100	; SYMBOLS
   1703  2950				  -	      .byte	%00000010	; SYMBOLS
   1704  2950				  -
   1705  2950				  -			;byte %00000000 ; SYMBOLS
   1706  2950				  -
   1707  2950				  -
   1708  2950					      endif		; fontcharARIRACE
   1709  2950
------- FILE titlescreen/asm/titlescreen.asm
    303  2950					      endif
    304  2950
    305  2950					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 2
      0  2950					      include	"titlescreen/gameselect_image.asm"
      1  2950				  -	      ifnconst	bmp_gameselect_color
      2  2950				  -bmp_gameselect_color
      3  2950					      endif
      4  2950		       0f		      .byte.b	$0f
      5  2951
      6  2951				  -	      if	>. != >[.+5]
      7  2951				  -	      align	256
      8  2951					      endif
      9  2951				   bmp_gameselect_CHAR0
     10  2951
     11  2951		       7a		      .byte.b	%01111010
     12  2952		       8a		      .byte.b	%10001010
     13  2953		       bb		      .byte.b	%10111011
     14  2954		       82		      .byte.b	%10000010
     15  2955		       79		      .byte.b	%01111001
     16  2956
     17  2956				  -	      if	>. != >[.+5]
     18  2956				  -	      align	256
     19  2956					      endif
     20  2956				   bmp_gameselect_CHAR1
     21  2956
     22  2956		       51		      .byte.b	%01010001
     23  2957		       51		      .byte.b	%01010001
     24  2958		       d5		      .byte.b	%11010101
     25  2959		       5b		      .byte.b	%01011011
     26  295a		       91		      .byte.b	%10010001
     27  295b
     28  295b				  -	      if	>. != >[.+5]
     29  295b				  -	      align	256
     30  295b					      endif
     31  295b				   bmp_gameselect_CHAR2
     32  295b		       78		      .byte.b	%01111000
     33  295c		       40		      .byte.b	%01000000
     34  295d		       70		      .byte.b	%01110000
     35  295e		       40		      .byte.b	%01000000
     36  295f		       78		      .byte.b	%01111000
     37  2960
     38  2960				  -	      if	>. != >[.+5]
     39  2960				  -	      align	256
     40  2960					      endif
     41  2960				   bmp_gameselect_CHAR3
     42  2960		       00		      .byte.b	%00000000
     43  2961		       00		      .byte.b	%00000000
     44  2962		       00		      .byte.b	%00000000
     45  2963		       00		      .byte.b	%00000000
     46  2964		       00		      .byte.b	%00000000
     47  2965
     48  2965				  -	      if	>. != >[.+80]
     49  2965				  -	      align	256
     50  2965					      endif
     51  2965
     52  2965				   font_gameselect_img
     53  2965		       3c		      .byte.b	%00111100
     54  2966		       66		      .byte.b	%01100110
     55  2967		       66		      .byte.b	%01100110
     56  2968		       66		      .byte.b	%01100110
     57  2969		       3c		      .byte.b	%00111100
     58  296a
     59  296a		       3c		      .byte.b	%00111100
     60  296b		       18		      .byte.b	%00011000
     61  296c		       18		      .byte.b	%00011000
     62  296d		       18		      .byte.b	%00011000
     63  296e		       38		      .byte.b	%00111000
     64  296f
     65  296f		       7e		      .byte.b	%01111110
     66  2970		       60		      .byte.b	%01100000
     67  2971		       3c		      .byte.b	%00111100
     68  2972		       06		      .byte.b	%00000110
     69  2973		       7c		      .byte.b	%01111100
     70  2974
     71  2974		       7c		      .byte.b	%01111100
     72  2975		       06		      .byte.b	%00000110
     73  2976		       1c		      .byte.b	%00011100
     74  2977		       06		      .byte.b	%00000110
     75  2978		       7c		      .byte.b	%01111100
     76  2979
     77  2979		       06		      .byte.b	%00000110
     78  297a		       06		      .byte.b	%00000110
     79  297b		       7e		      .byte.b	%01111110
     80  297c		       66		      .byte.b	%01100110
     81  297d		       66		      .byte.b	%01100110
     82  297e
     83  297e		       7c		      .byte.b	%01111100
     84  297f		       06		      .byte.b	%00000110
     85  2980		       7c		      .byte.b	%01111100
     86  2981		       60		      .byte.b	%01100000
     87  2982		       7e		      .byte.b	%01111110
     88  2983
     89  2983		       3c		      .byte.b	%00111100
     90  2984		       66		      .byte.b	%01100110
     91  2985		       7c		      .byte.b	%01111100
     92  2986		       60		      .byte.b	%01100000
     93  2987		       3c		      .byte.b	%00111100
     94  2988
     95  2988		       18		      .byte.b	%00011000
     96  2989		       18		      .byte.b	%00011000
     97  298a		       0c		      .byte.b	%00001100
     98  298b		       06		      .byte.b	%00000110
     99  298c		       7e		      .byte.b	%01111110
    100  298d
    101  298d		       3c		      .byte.b	%00111100
    102  298e		       66		      .byte.b	%01100110
    103  298f		       3c		      .byte.b	%00111100
    104  2990		       66		      .byte.b	%01100110
    105  2991		       3c		      .byte.b	%00111100
    106  2992
    107  2992		       3c		      .byte.b	%00111100
    108  2993		       06		      .byte.b	%00000110
    109  2994		       3e		      .byte.b	%00111110
    110  2995		       66		      .byte.b	%01100110
    111  2996		       3c		      .byte.b	%00111100
    112  2997
    113  2997				  -	      ifnconst	gamenumber
    114  2997				  -gamenumber
    115  2997					      endif
    116  2997		       00		      .byte.b	0
    117  2998
------- FILE titlescreen/asm/titlescreen.asm
    307  2998					      endif
    308  2998
    309  2998				  -	      ifconst	mk_player_on
    310  2998				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2998					      endif		;mk_player_on
    312  2998
    313  2998
------- FILE ex1-basic_color.bas.asm
    295  2998
    296  2998				   .
    297  2998							;
    298  2998
    299  2998				   .L030		;  bank 3
    300  2998
    301  2998					      if	ECHO2
      1596 bytes of ROM space left in bank 2
    302  2998					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
    303  2998					      endif
    304  2998		       00 01	   ECHO2      =	1
    305  2fd4					      ORG	$2FF4-bscode_length
    306  2fd4					      RORG	$BFF4-bscode_length
    307  2fd4		       a2 ff	   start_bank2 ldx	#$ff
    308  2fd6				  -	      ifconst	FASTFETCH	; using DPC+
    309  2fd6				  -	      stx	FASTFETCH
    310  2fd6					      endif
    311  2fd6		       9a		      txs
    312  2fd7				  -	      if	bankswitch == 64
    313  2fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    314  2fd7					      else
    315  2fd7		       a9 f2		      lda	#>(start-1)
    316  2fd9					      endif
    317  2fd9		       48		      pha
    318  2fda		       a9 4f		      lda	#<(start-1)
    319  2fdc		       48		      pha
    320  2fdd		       48		      pha
    321  2fde		       8a		      txa
    322  2fdf		       48		      pha
    323  2fe0		       ba		      tsx
    324  2fe1					      if	bankswitch != 64
    325  2fe1		       b5 04		      lda	4,x	; get high byte of return address
    326  2fe3		       2a		      rol
    327  2fe4		       2a		      rol
    328  2fe5		       2a		      rol
    329  2fe6		       2a		      rol
    330  2fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    331  2fe9		       aa		      tax
    332  2fea		       e8		      inx
    333  2feb				  -	      else
    334  2feb				  -	      lda	4,x	; get high byte of return address
    335  2feb				  -	      tay
    336  2feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    337  2feb				  -	      sta	4,x
    338  2feb				  -	      tya
    339  2feb				  -	      lsr
    340  2feb				  -	      lsr
    341  2feb				  -	      lsr
    342  2feb				  -	      lsr
    343  2feb				  -	      tax
    344  2feb				  -	      inx
    345  2feb					      endif
    346  2feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    347  2fee		       68		      pla
    348  2fef		       aa		      tax
    349  2ff0		       68		      pla
    350  2ff1		       60		      rts
    351  2ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    352  2ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    353  2ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    354  2ff2					      endif
    355  2ffc					      ORG	$2FFC
    356  2ffc					      RORG	$BFFC
    357  2ffc		       d4 bf		      .word.w	start_bank2
    358  2ffe		       d4 bf		      .word.w	start_bank2
    359  3000					      ORG	$3000
    360  3000					      RORG	$D000
    361  3000					      if	ECHO3
      4052 bytes of ROM space left in bank 3
    362  3000					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
    363  3000					      endif
    364  3000		       00 01	   ECHO3      =	1
    365  3fd4					      ORG	$3FF4-bscode_length
    366  3fd4					      RORG	$DFF4-bscode_length
    367  3fd4		       a2 ff	   start_bank3 ldx	#$ff
    368  3fd6				  -	      ifconst	FASTFETCH	; using DPC+
    369  3fd6				  -	      stx	FASTFETCH
    370  3fd6					      endif
    371  3fd6		       9a		      txs
    372  3fd7				  -	      if	bankswitch == 64
    373  3fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
    374  3fd7					      else
    375  3fd7		       a9 f2		      lda	#>(start-1)
    376  3fd9					      endif
    377  3fd9		       48		      pha
    378  3fda		       a9 4f		      lda	#<(start-1)
    379  3fdc		       48		      pha
    380  3fdd		       48		      pha
    381  3fde		       8a		      txa
    382  3fdf		       48		      pha
    383  3fe0		       ba		      tsx
    384  3fe1					      if	bankswitch != 64
    385  3fe1		       b5 04		      lda	4,x	; get high byte of return address
    386  3fe3		       2a		      rol
    387  3fe4		       2a		      rol
    388  3fe5		       2a		      rol
    389  3fe6		       2a		      rol
    390  3fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
    391  3fe9		       aa		      tax
    392  3fea		       e8		      inx
    393  3feb				  -	      else
    394  3feb				  -	      lda	4,x	; get high byte of return address
    395  3feb				  -	      tay
    396  3feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
    397  3feb				  -	      sta	4,x
    398  3feb				  -	      tya
    399  3feb				  -	      lsr
    400  3feb				  -	      lsr
    401  3feb				  -	      lsr
    402  3feb				  -	      lsr
    403  3feb				  -	      tax
    404  3feb				  -	      inx
    405  3feb					      endif
    406  3feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
    407  3fee		       68		      pla
    408  3fef		       aa		      tax
    409  3ff0		       68		      pla
    410  3ff1		       60		      rts
    411  3ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
    412  3ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
    413  3ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
    414  3ff2					      endif
    415  3ffc					      ORG	$3FFC
    416  3ffc					      RORG	$DFFC
    417  3ffc		       d4 df		      .word.w	start_bank3
    418  3ffe		       d4 df		      .word.w	start_bank3
    419  4000					      ORG	$4000
    420  4000					      RORG	$F000
    421  4000							; This is a 2-line kernel!
    422  4000					      ifnconst	vertical_reflect
    423  4000				   kernel
    424  4000					      endif
    425  4000		       85 02		      sta	WSYNC
    426  4002		       a9 ff		      lda	#255
    427  4004		       8d 96 02 	      sta	TIM64T
    428  4007
    429  4007		       a9 01		      lda	#1
    430  4009		       85 27		      sta	VDELBL
    431  400b		       85 25		      sta	VDELP0
    432  400d		       a6 92		      ldx	ballheight
    433  400f		       e8		      inx
    434  4010		       e8		      inx
    435  4011		       86 9f		      stx	temp4
    436  4013		       a5 86		      lda	player1y
    437  4015		       85 9e		      sta	temp3
    438  4017
    439  4017				  -	      ifconst	shakescreen
    440  4017				  -	      jsr	doshakescreen
    441  4017					      else
    442  4017		       a6 90		      ldx	missile0height
    443  4019		       e8		      inx
    444  401a					      endif
    445  401a
    446  401a		       e8		      inx
    447  401b		       86 f6		      stx	stack1
    448  401d
    449  401d		       a5 89		      lda	bally
    450  401f		       85 f7		      sta	stack2
    451  4021
    452  4021		       a5 85		      lda	player0y
    453  4023		       a2 00		      ldx	#0
    454  4025		       85 02		      sta	WSYNC
    455  4027		       86 1b		      stx	GRP0
    456  4029		       86 1c		      stx	GRP1
    457  402b		       86 0e		      stx	PF1L
    458  402d		       86 0f		      stx	PF2
    459  402f		       86 2c		      stx	CXCLR
    460  4031				  -	      ifconst	readpaddle
    461  4031				  -	      stx	paddle
    462  4031					      else
      0  4031					      sleep	3
      1  4031				   .CYCLES    SET	3
      2  4031
      3  4031				  -	      IF	.CYCLES < 2
      4  4031				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4031				  -	      ERR
      6  4031					      ENDIF
      7  4031
      8  4031					      IF	.CYCLES & 1
      9  4031					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4031		       04 00		      nop	0
     11  4033				  -	      ELSE
     12  4033				  -	      bit	VSYNC
     13  4033					      ENDIF
     14  4033				   .CYCLES    SET	.CYCLES - 3
     15  4033					      ENDIF
     16  4033
     17  4033				  -	      REPEAT	.CYCLES / 2
     18  4033				  -	      nop
     19  4033					      REPEND
    464  4033					      endif
    465  4033
    466  4033		       95 9d		      sta	temp2,x
    467  4035
    468  4035							;store these so they can be retrieved later
    469  4035					      ifnconst	pfres
    470  4035		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    471  4037				  -	      else
    472  4037				  -	      ldx	#132-pfres*pfwidth
    473  4037					      endif
    474  4037
    475  4037		       c6 85		      dec	player0y
    476  4039
    477  4039		       a5 91		      lda	missile0y
    478  403b		       85 a0		      sta	temp5
    479  403d		       a5 88		      lda	missile1y
    480  403f		       85 a1		      sta	temp6
    481  4041
    482  4041		       a5 ef		      lda	playfieldpos
    483  4043		       85 9c		      sta	temp1
    484  4045
    485  4045				  -	      ifconst	pfrowheight
    486  4045				  -	      lda	#pfrowheight+2
    487  4045					      else
    488  4045					      ifnconst	pfres
    489  4045		       a9 0a		      lda	#10
    490  4047				  -	      else
    491  4047				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    492  4047					      endif
    493  4047					      endif
    494  4047		       18		      clc
    495  4048		       e5 ef		      sbc	playfieldpos
    496  404a		       85 ef		      sta	playfieldpos
    497  404c		       4c 74 f0 	      jmp	.startkernel
    498  404f
    499  404f				   .skipDrawP0
    500  404f		       a9 00		      lda	#0
    501  4051		       a8		      tay
    502  4052		       4c a2 f0 	      jmp	.continueP0
    503  4055
    504  4055				   .skipDrawP1
    505  4055		       a9 00		      lda	#0
    506  4057		       a8		      tay
    507  4058		       4c 7e f0 	      jmp	.continueP1
    508  405b
    509  405b				   .kerloop		; enter at cycle 59??
    510  405b
    511  405b				   continuekernel
      0  405b					      sleep	2
      1  405b				   .CYCLES    SET	2
      2  405b
      3  405b				  -	      IF	.CYCLES < 2
      4  405b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  405b				  -	      ERR
      6  405b					      ENDIF
      7  405b
      8  405b				  -	      IF	.CYCLES & 1
      9  405b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  405b				  -	      nop	0
     11  405b				  -	      ELSE
     12  405b				  -	      bit	VSYNC
     13  405b				  -	      ENDIF
     14  405b				  -.CYCLES    SET	.CYCLES - 3
     15  405b					      ENDIF
     16  405b
     17  405b					      REPEAT	.CYCLES / 2
     18  405b		       ea		      nop
     19  405c					      REPEND
    513  405c				   continuekernel2
    514  405c		       a5 92		      lda	ballheight
    515  405e
    516  405e				  -	      ifconst	pfres
    517  405e				  -	      ldy	playfield+pfres*pfwidth-132,x
    518  405e				  -	      sty	PF1L	;3
    519  405e				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    520  405e				  -	      sty	PF2L	;3
    521  405e				  -	      ldy	playfield+pfres*pfwidth-129,x
    522  405e				  -	      sty	PF1R	; 3 too early?
    523  405e				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    524  405e				  -	      sty	PF2R	;3
    525  405e					      else
    526  405e		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    527  4060		       84 0e		      sty	PF1L	;3
    528  4062		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    529  4064		       84 0f		      sty	PF2L	;3
    530  4066		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    531  4068		       84 0e		      sty	PF1R	; 3 too early?
    532  406a		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    533  406c		       84 0f		      sty	PF2R	;3
    534  406e					      endif
    535  406e
    536  406e							; should be playfield+$38 for width=2
    537  406e
    538  406e		       c7 89		      dcp	bally
    539  4070		       2a		      rol
    540  4071		       2a		      rol
    541  4072							; rol
    542  4072							; rol
    543  4072				   goback
    544  4072		       85 1f		      sta	ENABL
    545  4074				   .startkernel
    546  4074		       a5 8f		      lda	player1height	;3
    547  4076		       c7 86		      dcp	player1y	;5
    548  4078		       90 db		      bcc	.skipDrawP1	;2
    549  407a		       a4 86		      ldy	player1y	;3
    550  407c		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    551  407e							; so it doesn't cross a page boundary!
    552  407e
    553  407e				   .continueP1
    554  407e		       85 1c		      sta	GRP1	;3
    555  4080
    556  4080					      ifnconst	player1colors
    557  4080		       a5 87		      lda	missile1height	;3
    558  4082		       c7 88		      dcp	missile1y	;5
    559  4084		       2a		      rol		;2
    560  4085		       2a		      rol		;2
    561  4086		       85 1e		      sta	ENAM1	;3
    562  4088				  -	      else
    563  4088				  -	      lda	(player1color),y
    564  4088				  -	      sta	COLUP1
    565  4088				  -	      ifnconst	playercolors
    566  4088				  -	      sleep	7
    567  4088				  -	      else
    568  4088				  -	      lda.w	player0colorstore
    569  4088				  -	      sta	COLUP0
    570  4088				  -	      endif
    571  4088					      endif
    572  4088
    573  4088				  -	      ifconst	pfres
    574  4088				  -	      lda	playfield+pfres*pfwidth-132,x
    575  4088				  -	      sta	PF1L	;3
    576  4088				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    577  4088				  -	      sta	PF2L	;3
    578  4088				  -	      lda	playfield+pfres*pfwidth-129,x
    579  4088				  -	      sta	PF1R	; 3 too early?
    580  4088				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    581  4088				  -	      sta	PF2R	;3
    582  4088					      else
    583  4088		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    584  408a		       85 0e		      sta	PF1L	;3
    585  408c		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    586  408e		       85 0f		      sta	PF2L	;3
    587  4090		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    588  4092		       85 0e		      sta	PF1R	; 3 too early?
    589  4094		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    590  4096		       85 0f		      sta	PF2R	;3
    591  4098					      endif
    592  4098							; sleep 3
    593  4098
    594  4098		       a5 8e		      lda	player0height
    595  409a		       c7 85		      dcp	player0y
    596  409c		       90 b1		      bcc	.skipDrawP0
    597  409e		       a4 85		      ldy	player0y
    598  40a0		       b1 8a		      lda	(player0pointer),y
    599  40a2				   .continueP0
    600  40a2		       85 1b		      sta	GRP0
    601  40a4
    602  40a4					      ifnconst	no_blank_lines
    603  40a4					      ifnconst	playercolors
    604  40a4		       a5 90		      lda	missile0height	;3
    605  40a6		       c7 91		      dcp	missile0y	;5
    606  40a8		       e5 f6		      sbc	stack1
    607  40aa		       85 1d		      sta	ENAM0	;3
    608  40ac				  -	      else
    609  40ac				  -	      lda	(player0color),y
    610  40ac				  -	      sta	player0colorstore
    611  40ac				  -	      sleep	6
    612  40ac					      endif
    613  40ac		       c6 9c		      dec	temp1
    614  40ae		       d0 ab		      bne	continuekernel
    615  40b0				  -	      else
    616  40b0				  -	      dec	temp1
    617  40b0				  -	      beq	altkernel2
    618  40b0				  -	      ifconst	readpaddle
    619  40b0				  -	      ldy	currentpaddle
    620  40b0				  -	      lda	INPT0,y
    621  40b0				  -	      bpl	noreadpaddle
    622  40b0				  -	      inc	paddle
    623  40b0				  -	      jmp	continuekernel2
    624  40b0				  -noreadpaddle
    625  40b0				  -	      sleep	2
    626  40b0				  -	      jmp	continuekernel
    627  40b0				  -	      else
    628  40b0				  -	      ifnconst	playercolors
    629  40b0				  -	      ifconst	PFcolors
    630  40b0				  -	      txa
    631  40b0				  -	      tay
    632  40b0				  -	      lda	(pfcolortable),y
    633  40b0				  -	      ifnconst	backgroundchange
    634  40b0				  -	      sta	COLUPF
    635  40b0				  -	      else
    636  40b0				  -	      sta	COLUBK
    637  40b0				  -	      endif
    638  40b0				  -	      jmp	continuekernel
    639  40b0				  -	      else
    640  40b0				  -	      ifconst	kernelmacrodef
    641  40b0				  -	      kernelmacro
    642  40b0				  -	      else
    643  40b0				  -	      sleep	12
    644  40b0				  -	      endif
    645  40b0				  -	      endif
    646  40b0				  -	      else
    647  40b0				  -	      lda	(player0color),y
    648  40b0				  -	      sta	player0colorstore
    649  40b0				  -	      sleep	4
    650  40b0				  -	      endif
    651  40b0				  -	      jmp	continuekernel
    652  40b0				  -	      endif
    653  40b0				  -altkernel2
    654  40b0				  -	      txa
    655  40b0				  -	      ifnconst	vertical_reflect
    656  40b0				  -	      sbx	#256-pfwidth
    657  40b0				  -	      else
    658  40b0				  -	      sbx	#256-pfwidth/2
    659  40b0				  -	      endif
    660  40b0				  -	      bmi	lastkernelline
    661  40b0				  -	      ifconst	pfrowheight
    662  40b0				  -	      lda	#pfrowheight
    663  40b0				  -	      else
    664  40b0				  -	      ifnconst	pfres
    665  40b0				  -	      lda	#8
    666  40b0				  -	      else
    667  40b0				  -	      lda	#(96/pfres)	; try to come close to the real size
    668  40b0				  -	      endif
    669  40b0				  -	      endif
    670  40b0				  -	      sta	temp1
    671  40b0				  -	      jmp	continuekernel
    672  40b0					      endif
    673  40b0
    674  40b0				   altkernel
    675  40b0
    676  40b0				  -	      ifconst	PFmaskvalue
    677  40b0				  -	      lda	#PFmaskvalue
    678  40b0					      else
    679  40b0		       a9 00		      lda	#0
    680  40b2					      endif
    681  40b2		       85 0e		      sta	PF1L
    682  40b4		       85 0f		      sta	PF2
    683  40b6
    684  40b6
    685  40b6							;sleep 3
    686  40b6
    687  40b6							;28 cycles to fix things
    688  40b6							;minus 11=17
    689  40b6
    690  40b6							; lax temp4
    691  40b6							; clc
    692  40b6		       8a		      txa
    693  40b7					      ifnconst	vertical_reflect
    694  40b7		       cb fc		      sbx	#256-pfwidth
    695  40b9				  -	      else
    696  40b9				  -	      sbx	#256-pfwidth/2
    697  40b9					      endif
    698  40b9
    699  40b9		       30 12		      bmi	lastkernelline
    700  40bb
    701  40bb				  -	      ifconst	PFcolorandheight
    702  40bb				  -	      ifconst	pfres
    703  40bb				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    704  40bb				  -	      else
    705  40bb				  -	      ldy	playfieldcolorandheight-87,x
    706  40bb				  -	      endif
    707  40bb				  -	      ifnconst	backgroundchange
    708  40bb				  -	      sty	COLUPF
    709  40bb				  -	      else
    710  40bb				  -	      sty	COLUBK
    711  40bb				  -	      endif
    712  40bb				  -	      ifconst	pfres
    713  40bb				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    714  40bb				  -	      else
    715  40bb				  -	      lda	playfieldcolorandheight-88,x
    716  40bb				  -	      endif
    717  40bb				  -	      sta.w	temp1
    718  40bb					      endif
    719  40bb				  -	      ifconst	PFheights
    720  40bb				  -	      lsr
    721  40bb				  -	      lsr
    722  40bb				  -	      tay
    723  40bb				  -	      lda	(pfheighttable),y
    724  40bb				  -	      sta.w	temp1
    725  40bb					      endif
    726  40bb				  -	      ifconst	PFcolors
    727  40bb				  -	      tay
    728  40bb				  -	      lda	(pfcolortable),y
    729  40bb				  -	      ifnconst	backgroundchange
    730  40bb				  -	      sta	COLUPF
    731  40bb				  -	      else
    732  40bb				  -	      sta	COLUBK
    733  40bb				  -	      endif
    734  40bb				  -	      ifconst	pfrowheight
    735  40bb				  -	      lda	#pfrowheight
    736  40bb				  -	      else
    737  40bb				  -	      ifnconst	pfres
    738  40bb				  -	      lda	#8
    739  40bb				  -	      else
    740  40bb				  -	      lda	#(96/pfres)	; try to come close to the real size
    741  40bb				  -	      endif
    742  40bb				  -	      endif
    743  40bb				  -	      sta	temp1
    744  40bb					      endif
    745  40bb					      ifnconst	PFcolorandheight
    746  40bb					      ifnconst	PFcolors
    747  40bb					      ifnconst	PFheights
    748  40bb					      ifnconst	no_blank_lines
    749  40bb							; read paddle 0
    750  40bb							; lo-res paddle read
    751  40bb							; bit INPT0
    752  40bb							; bmi paddleskipread
    753  40bb							; inc paddle0
    754  40bb							;donepaddleskip
      0  40bb					      sleep	10
      1  40bb				   .CYCLES    SET	10
      2  40bb
      3  40bb				  -	      IF	.CYCLES < 2
      4  40bb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40bb				  -	      ERR
      6  40bb					      ENDIF
      7  40bb
      8  40bb				  -	      IF	.CYCLES & 1
      9  40bb				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40bb				  -	      nop	0
     11  40bb				  -	      ELSE
     12  40bb				  -	      bit	VSYNC
     13  40bb				  -	      ENDIF
     14  40bb				  -.CYCLES    SET	.CYCLES - 3
     15  40bb					      ENDIF
     16  40bb
     17  40bb					      REPEAT	.CYCLES / 2
     18  40bb		       ea		      nop
     17  40bb					      REPEND
     18  40bc		       ea		      nop
     17  40bc					      REPEND
     18  40bd		       ea		      nop
     17  40bd					      REPEND
     18  40be		       ea		      nop
     17  40be					      REPEND
     18  40bf		       ea		      nop
     19  40c0					      REPEND
    756  40c0				  -	      ifconst	pfrowheight
    757  40c0				  -	      lda	#pfrowheight
    758  40c0					      else
    759  40c0					      ifnconst	pfres
    760  40c0		       a9 08		      lda	#8
    761  40c2				  -	      else
    762  40c2				  -	      lda	#(96/pfres)	; try to come close to the real size
    763  40c2					      endif
    764  40c2					      endif
    765  40c2		       85 9c		      sta	temp1
    766  40c4					      endif
    767  40c4					      endif
    768  40c4					      endif
    769  40c4					      endif
    770  40c4
    771  40c4
    772  40c4		       a5 92		      lda	ballheight
    773  40c6		       c7 89		      dcp	bally
    774  40c8		       e5 9f		      sbc	temp4
    775  40ca
    776  40ca
    777  40ca		       4c 72 f0 	      jmp	goback
    778  40cd
    779  40cd
    780  40cd					      ifnconst	no_blank_lines
    781  40cd				   lastkernelline
    782  40cd					      ifnconst	PFcolors
      0  40cd					      sleep	10
      1  40cd				   .CYCLES    SET	10
      2  40cd
      3  40cd				  -	      IF	.CYCLES < 2
      4  40cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40cd				  -	      ERR
      6  40cd					      ENDIF
      7  40cd
      8  40cd				  -	      IF	.CYCLES & 1
      9  40cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40cd				  -	      nop	0
     11  40cd				  -	      ELSE
     12  40cd				  -	      bit	VSYNC
     13  40cd				  -	      ENDIF
     14  40cd				  -.CYCLES    SET	.CYCLES - 3
     15  40cd					      ENDIF
     16  40cd
     17  40cd					      REPEAT	.CYCLES / 2
     18  40cd		       ea		      nop
     17  40cd					      REPEND
     18  40ce		       ea		      nop
     17  40ce					      REPEND
     18  40cf		       ea		      nop
     17  40cf					      REPEND
     18  40d0		       ea		      nop
     17  40d0					      REPEND
     18  40d1		       ea		      nop
     19  40d2					      REPEND
    784  40d2				  -	      else
    785  40d2				  -	      ldy	#124
    786  40d2				  -	      lda	(pfcolortable),y
    787  40d2				  -	      sta	COLUPF
    788  40d2					      endif
    789  40d2
    790  40d2				  -	      ifconst	PFheights
    791  40d2				  -	      ldx	#1
    792  40d2				  -			;sleep 4
    793  40d2				  -	      sleep	3	; REVENG - this was over 1 cycle
    794  40d2					      else
    795  40d2		       a6 ef		      ldx	playfieldpos
    796  40d4							;sleep 3
      0  40d4					      sleep	2	; REVENG - this was over 1 cycle
      1  40d4				   .CYCLES    SET	2
      2  40d4
      3  40d4				  -	      IF	.CYCLES < 2
      4  40d4				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  40d4				  -	      ERR
      6  40d4					      ENDIF
      7  40d4
      8  40d4				  -	      IF	.CYCLES & 1
      9  40d4				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  40d4				  -	      nop	0
     11  40d4				  -	      ELSE
     12  40d4				  -	      bit	VSYNC
     13  40d4				  -	      ENDIF
     14  40d4				  -.CYCLES    SET	.CYCLES - 3
     15  40d4					      ENDIF
     16  40d4
     17  40d4					      REPEAT	.CYCLES / 2
     18  40d4		       ea		      nop
     19  40d5					      REPEND
    798  40d5					      endif
    799  40d5
    800  40d5		       4c 1b f1 	      jmp	enterlastkernel
    801  40d8
    802  40d8				  -	      else
    803  40d8				  -lastkernelline
    804  40d8				  -
    805  40d8				  -	      ifconst	PFheights
    806  40d8				  -	      ldx	#1
    807  40d8				  -			;sleep 5
    808  40d8				  -	      sleep	4	; REVENG - this was over 1 cycle
    809  40d8				  -	      else
    810  40d8				  -	      ldx	playfieldpos
    811  40d8				  -			;sleep 4
    812  40d8				  -	      sleep	3	; REVENG - this was over 1 cycle
    813  40d8				  -	      endif
    814  40d8				  -
    815  40d8				  -	      cpx	#0
    816  40d8				  -	      bne	.enterfromNBL
    817  40d8				  -	      jmp	no_blank_lines_bailout
    818  40d8					      endif
    819  40d8
    820  40d8					      if	((<*)>$d5)
    821  4100		       00 00 00 00*	      align	256
    822  4100					      endif
    823  4100							; this is a kludge to prevent page wrapping - fix!!!
    824  4100
    825  4100				   .skipDrawlastP1
    826  4100		       a9 00		      lda	#0
    827  4102		       a8		      tay		; REVENG - added so we don't cross a page
    828  4103		       4c 2d f1 	      jmp	.continuelastP1
    829  4106
    830  4106				   .endkerloop		; enter at cycle 59??
    831  4106
    832  4106		       ea		      nop
    833  4107
    834  4107				   .enterfromNBL
    835  4107				  -	      ifconst	pfres
    836  4107				  -	      ldy.w	playfield+pfres*pfwidth-4
    837  4107				  -	      sty	PF1L	;3
    838  4107				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    839  4107				  -	      sty	PF2L	;3
    840  4107				  -	      ldy.w	playfield+pfres*pfwidth-1
    841  4107				  -	      sty	PF1R	; possibly too early?
    842  4107				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    843  4107				  -	      sty	PF2R	;3
    844  4107					      else
    845  4107		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    846  410a		       84 0e		      sty	PF1L	;3
    847  410c		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    848  410f		       84 0f		      sty	PF2L	;3
    849  4111		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    850  4114		       84 0e		      sty	PF1R	; possibly too early?
    851  4116		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    852  4119		       84 0f		      sty	PF2R	;3
    853  411b					      endif
    854  411b
    855  411b				   enterlastkernel
    856  411b		       a5 92		      lda	ballheight
    857  411d
    858  411d							; tya
    859  411d		       c7 89		      dcp	bally
    860  411f							; sleep 4
    861  411f
    862  411f							; sbc stack3
    863  411f		       2a		      rol
    864  4120		       2a		      rol
    865  4121		       85 1f		      sta	ENABL
    866  4123
    867  4123		       a5 8f		      lda	player1height	;3
    868  4125		       c7 86		      dcp	player1y	;5
    869  4127		       90 d7		      bcc	.skipDrawlastP1
    870  4129		       a4 86		      ldy	player1y	;3
    871  412b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    872  412d							; so it doesn't cross a page boundary!
    873  412d
    874  412d				   .continuelastP1
    875  412d		       85 1c		      sta	GRP1	;3
    876  412f
    877  412f					      ifnconst	player1colors
    878  412f		       a5 87		      lda	missile1height	;3
    879  4131		       c7 88		      dcp	missile1y	;5
    880  4133				  -	      else
    881  4133				  -	      lda	(player1color),y
    882  4133				  -	      sta	COLUP1
    883  4133					      endif
    884  4133
    885  4133		       ca		      dex
    886  4134							;dec temp4 ; might try putting this above PF writes
    887  4134		       f0 36		      beq	endkernel
    888  4136
    889  4136
    890  4136				  -	      ifconst	pfres
    891  4136				  -	      ldy.w	playfield+pfres*pfwidth-4
    892  4136				  -	      sty	PF1L	;3
    893  4136				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    894  4136				  -	      sty	PF2L	;3
    895  4136				  -	      ldy.w	playfield+pfres*pfwidth-1
    896  4136				  -	      sty	PF1R	; possibly too early?
    897  4136				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    898  4136				  -	      sty	PF2R	;3
    899  4136					      else
    900  4136		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    901  4139		       84 0e		      sty	PF1L	;3
    902  413b		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    903  413e		       84 0f		      sty	PF2L	;3
    904  4140		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    905  4143		       84 0e		      sty	PF1R	; possibly too early?
    906  4145		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    907  4148		       84 0f		      sty	PF2R	;3
    908  414a					      endif
    909  414a
    910  414a					      ifnconst	player1colors
    911  414a		       2a		      rol		;2
    912  414b		       2a		      rol		;2
    913  414c		       85 1e		      sta	ENAM1	;3
    914  414e				  -	      else
    915  414e				  -	      ifnconst	playercolors
    916  414e				  -	      sleep	7
    917  414e				  -	      else
    918  414e				  -	      lda.w	player0colorstore
    919  414e				  -	      sta	COLUP0
    920  414e				  -	      endif
    921  414e					      endif
    922  414e
    923  414e		       ad 8e 00 	      lda.w	player0height
    924  4151		       c7 85		      dcp	player0y
    925  4153		       90 11		      bcc	.skipDrawlastP0
    926  4155		       a4 85		      ldy	player0y
    927  4157		       b1 8a		      lda	(player0pointer),y
    928  4159				   .continuelastP0
    929  4159		       85 1b		      sta	GRP0
    930  415b
    931  415b
    932  415b
    933  415b					      ifnconst	no_blank_lines
    934  415b		       a5 90		      lda	missile0height	;3
    935  415d		       c7 91		      dcp	missile0y	;5
    936  415f		       e5 f6		      sbc	stack1
    937  4161		       85 1d		      sta	ENAM0	;3
    938  4163		       4c 06 f1 	      jmp	.endkerloop
    939  4166				  -	      else
    940  4166				  -	      ifconst	readpaddle
    941  4166				  -	      ldy	currentpaddle
    942  4166				  -	      lda	INPT0,y
    943  4166				  -	      bpl	noreadpaddle2
    944  4166				  -	      inc	paddle
    945  4166				  -	      jmp	.endkerloop
    946  4166				  -noreadpaddle2
    947  4166				  -	      sleep	4
    948  4166				  -	      jmp	.endkerloop
    949  4166				  -	      else		; no_blank_lines and no paddle reading
    950  4166				  -	      pla
    951  4166				  -	      pha		; 14 cycles in 4 bytes
    952  4166				  -	      pla
    953  4166				  -	      pha
    954  4166				  -			; sleep 14
    955  4166				  -	      jmp	.endkerloop
    956  4166				  -	      endif
    957  4166					      endif
    958  4166
    959  4166
    960  4166							; ifconst donepaddleskip
    961  4166							;paddleskipread
    962  4166							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    963  4166							; plus we get a lo-res paddle read
    964  4166							; bmi donepaddleskip
    965  4166							; endif
    966  4166
    967  4166				   .skipDrawlastP0
    968  4166		       a9 00		      lda	#0
    969  4168		       a8		      tay
    970  4169		       4c 59 f1 	      jmp	.continuelastP0
    971  416c
    972  416c				  -	      ifconst	no_blank_lines
    973  416c				  -no_blank_lines_bailout
    974  416c				  -	      ldx	#0
    975  416c					      endif
    976  416c
    977  416c				   endkernel
    978  416c							; 6 digit score routine
    979  416c		       86 0e		      stx	PF1
    980  416e		       86 0f		      stx	PF2
    981  4170		       86 0d		      stx	PF0
    982  4172		       18		      clc
    983  4173
    984  4173				  -	      ifconst	pfrowheight
    985  4173				  -	      lda	#pfrowheight+2
    986  4173					      else
    987  4173					      ifnconst	pfres
    988  4173		       a9 0a		      lda	#10
    989  4175				  -	      else
    990  4175				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    991  4175					      endif
    992  4175					      endif
    993  4175
    994  4175		       e5 ef		      sbc	playfieldpos
    995  4177		       85 ef		      sta	playfieldpos
    996  4179		       8a		      txa
    997  417a
    998  417a				  -	      ifconst	shakescreen
    999  417a				  -	      bit	shakescreen
   1000  417a				  -	      bmi	noshakescreen2
   1001  417a				  -	      ldx	#$3D
   1002  417a				  -noshakescreen2
   1003  417a					      endif
   1004  417a
   1005  417a		       95 02		      sta	WSYNC,x
   1006  417c
   1007  417c							; STA WSYNC ;first one, need one more
   1008  417c		       85 0b		      sta	REFP0
   1009  417e		       85 0c		      sta	REFP1
   1010  4180		       85 1b		      STA	GRP0
   1011  4182		       85 1c		      STA	GRP1
   1012  4184							; STA PF1
   1013  4184							; STA PF2
   1014  4184		       85 2b		      sta	HMCLR
   1015  4186		       85 1d		      sta	ENAM0
   1016  4188		       85 1e		      sta	ENAM1
   1017  418a		       85 1f		      sta	ENABL
   1018  418c
   1019  418c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   1020  418e		       85 85		      sta	player0y
   1021  4190		       a5 9e		      lda	temp3
   1022  4192		       85 86		      sta	player1y
   1023  4194					      ifnconst	player1colors
   1024  4194		       a5 a1		      lda	temp6
   1025  4196		       85 88		      sta	missile1y
   1026  4198					      endif
   1027  4198					      ifnconst	playercolors
   1028  4198					      ifnconst	readpaddle
   1029  4198		       a5 a0		      lda	temp5
   1030  419a		       85 91		      sta	missile0y
   1031  419c					      endif
   1032  419c					      endif
   1033  419c		       a5 f7		      lda	stack2
   1034  419e		       85 89		      sta	bally
   1035  41a0
   1036  41a0							; REVENG - strangely, this isn't required any more. might have
   1037  41a0							; resulted from the no_blank_lines score bounce fix
   1038  41a0							;ifconst no_blank_lines
   1039  41a0							;sta WSYNC
   1040  41a0							;endif
   1041  41a0
   1042  41a0		       ad 84 02 	      lda	INTIM
   1043  41a3		       18		      clc
   1044  41a4					      ifnconst	vblank_time
   1045  41a4		       69 8e		      adc	#43+12+87
   1046  41a6				  -	      else
   1047  41a6				  -	      adc	#vblank_time+12+87
   1048  41a6				  -
   1049  41a6					      endif
   1050  41a6							; sta WSYNC
   1051  41a6		       8d 96 02 	      sta	TIM64T
   1052  41a9
   1053  41a9				  -	      ifconst	minikernel
   1054  41a9				  -	      jsr	minikernel
   1055  41a9					      endif
   1056  41a9
   1057  41a9							; now reassign temp vars for score pointers
   1058  41a9
   1059  41a9							; score pointers contain:
   1060  41a9							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   1061  41a9							; swap lo2->temp1
   1062  41a9							; swap lo4->temp3
   1063  41a9							; swap lo6->temp5
   1064  41a9					      ifnconst	noscore
   1065  41a9		       a5 97		      lda	scorepointers+1
   1066  41ab							; ldy temp1
   1067  41ab		       85 9c		      sta	temp1
   1068  41ad							; sty scorepointers+1
   1069  41ad
   1070  41ad		       a5 99		      lda	scorepointers+3
   1071  41af							; ldy temp3
   1072  41af		       85 9e		      sta	temp3
   1073  41b1							; sty scorepointers+3
   1074  41b1
   1075  41b1
   1076  41b1		       85 2b		      sta	HMCLR
   1077  41b3		       ba		      tsx
   1078  41b4		       86 f6		      stx	stack1
   1079  41b6		       a2 e0		      ldx	#$E0
   1080  41b8		       86 20		      stx	HMP0
   1081  41ba
   1082  41ba		       a5 a3		      LDA	scorecolor
   1083  41bc		       85 06		      STA	COLUP0
   1084  41be		       85 07		      STA	COLUP1
   1085  41c0					      ifconst	scorefade
   1086  41c0		       85 f7		      STA	stack2
   1087  41c2					      endif
   1088  41c2				  -	      ifconst	pfscore
   1089  41c2				  -	      lda	pfscorecolor
   1090  41c2				  -	      sta	COLUPF
   1091  41c2					      endif
   1092  41c2		       85 02		      sta	WSYNC
   1093  41c4		       a2 00		      ldx	#0
   1094  41c6		       86 1b		      STx	GRP0
   1095  41c8		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   1096  41ca
   1097  41ca		       a5 9b		      lda	scorepointers+5
   1098  41cc							; ldy temp5
   1099  41cc		       95 a0		      sta	temp5,x
   1100  41ce							; sty scorepointers+5
   1101  41ce		       a9 ff		      lda	#>scoretable
   1102  41d0		       85 97		      sta	scorepointers+1
   1103  41d2		       85 99		      sta	scorepointers+3
   1104  41d4		       85 9b		      sta	scorepointers+5
   1105  41d6		       85 9d		      sta	temp2
   1106  41d8		       85 9f		      sta	temp4
   1107  41da		       85 a1		      sta	temp6
   1108  41dc		       a0 07		      LDY	#7
   1109  41de		       84 25		      STY	VDELP0
   1110  41e0		       85 10		      STA	RESP0
   1111  41e2		       85 11		      STA	RESP1
   1112  41e4
   1113  41e4
   1114  41e4		       a9 03		      LDA	#$03
   1115  41e6		       85 04		      STA	NUSIZ0
   1116  41e8		       85 05		      STA	NUSIZ1
   1117  41ea		       85 26		      STA	VDELP1
   1118  41ec		       a9 f0		      LDA	#$F0
   1119  41ee		       85 21		      STA	HMP1
   1120  41f0		       b1 96		      lda	(scorepointers),y
   1121  41f2		       85 1b		      sta	GRP0
   1122  41f4		       85 2a		      STA	HMOVE	; cycle 73 ?
   1123  41f6		       4c 07 f2 	      jmp	beginscore
   1124  41f9
   1125  41f9
   1126  41f9					      if	((<*)>$d4)
   1127  4200		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   1128  4200					      endif
   1129  4200
   1130  4200				   loop2
   1131  4200		       b1 96		      lda	(scorepointers),y	;+5 68 204
   1132  4202		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   1133  4204				  -	      ifconst	pfscore
   1134  4204				  -	      lda.w	pfscore1
   1135  4204				  -	      sta	PF1
   1136  4204					      else
   1137  4204					      ifconst	scorefade
      0  4204					      sleep	2
      1  4204				   .CYCLES    SET	2
      2  4204
      3  4204				  -	      IF	.CYCLES < 2
      4  4204				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4204				  -	      ERR
      6  4204					      ENDIF
      7  4204
      8  4204				  -	      IF	.CYCLES & 1
      9  4204				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  4204				  -	      nop	0
     11  4204				  -	      ELSE
     12  4204				  -	      bit	VSYNC
     13  4204				  -	      ENDIF
     14  4204				  -.CYCLES    SET	.CYCLES - 3
     15  4204					      ENDIF
     16  4204
     17  4204					      REPEAT	.CYCLES / 2
     18  4204		       ea		      nop
     19  4205					      REPEND
   1139  4205		       c6 f7		      dec	stack2	; decrement the temporary scorecolor
   1140  4207				  -	      else
   1141  4207				  -	      sleep	7
   1142  4207					      endif
   1143  4207					      endif
   1144  4207							; cycle 0
   1145  4207				   beginscore
   1146  4207		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   1147  4209		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   1148  420b		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   1149  420d		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   1150  420f		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   1151  4211		       9a		      txs
   1152  4212		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   1153  4214					      ifconst	scorefade
   1154  4214		       a5 f7		      lda	stack2
   1155  4216				  -	      else
   1156  4216				  -	      sleep	3
   1157  4216					      endif
   1158  4216
   1159  4216				  -	      ifconst	pfscore
   1160  4216				  -	      lda	pfscore2
   1161  4216				  -	      sta	PF1
   1162  4216					      else
   1163  4216					      ifconst	scorefade
   1164  4216		       85 06		      sta	COLUP0
   1165  4218		       85 07		      sta	COLUP1
   1166  421a				  -	      else
   1167  421a				  -	      sleep	6
   1168  421a					      endif
   1169  421a					      endif
   1170  421a
   1171  421a		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   1172  421c		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   1173  421e		       ba		      tsx
   1174  421f		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   1175  4221		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   1176  4223		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   1177  4225		       88		      dey
   1178  4226		       10 d8		      bpl	loop2	;+2 60 180
   1179  4228
   1180  4228		       a6 f6		      ldx	stack1
   1181  422a		       9a		      txs
   1182  422b							; lda scorepointers+1
   1183  422b		       a4 9c		      ldy	temp1
   1184  422d							; sta temp1
   1185  422d		       84 97		      sty	scorepointers+1
   1186  422f
   1187  422f		       a9 00		      LDA	#0
   1188  4231		       85 0e		      sta	PF1
   1189  4233		       85 1b		      STA	GRP0
   1190  4235		       85 1c		      STA	GRP1
   1191  4237		       85 25		      STA	VDELP0
   1192  4239		       85 26		      STA	VDELP1	;do we need these
   1193  423b		       85 04		      STA	NUSIZ0
   1194  423d		       85 05		      STA	NUSIZ1
   1195  423f
   1196  423f							; lda scorepointers+3
   1197  423f		       a4 9e		      ldy	temp3
   1198  4241							; sta temp3
   1199  4241		       84 99		      sty	scorepointers+3
   1200  4243
   1201  4243							; lda scorepointers+5
   1202  4243		       a4 a0		      ldy	temp5
   1203  4245							; sta temp5
   1204  4245		       84 9b		      sty	scorepointers+5
   1205  4247					      endif		;noscore
   1206  4247		       a9 c2		      LDA	#%11000010
   1207  4249		       85 02		      sta	WSYNC
   1208  424b		       85 01		      STA	VBLANK
      0  424d					      RETURN
      1  424d				  -	      ifnconst	bankswitch
      2  424d				  -	      rts
      3  424d					      else
      4  424d		       4c dd ff 	      jmp	BS_return
      5  4250					      endif
   1210  4250
   1211  4250				  -	      ifconst	shakescreen
   1212  4250				  -doshakescreen
   1213  4250				  -	      bit	shakescreen
   1214  4250				  -	      bmi	noshakescreen
   1215  4250				  -	      sta	WSYNC
   1216  4250				  -noshakescreen
   1217  4250				  -	      ldx	missile0height
   1218  4250				  -	      inx
   1219  4250				  -	      rts
   1220  4250					      endif
   1221  4250
   1222  4250				   start
   1223  4250		       78		      sei
   1224  4251		       d8		      cld
   1225  4252		       a0 00		      ldy	#0
   1226  4254		       a5 d0		      lda	$D0
   1227  4256		       c9 2c		      cmp	#$2C	;check RAM location #1
   1228  4258		       d0 07		      bne	MachineIs2600
   1229  425a		       a5 d1		      lda	$D1
   1230  425c		       c9 a9		      cmp	#$A9	;check RAM location #2
   1231  425e		       d0 01		      bne	MachineIs2600
   1232  4260		       88		      dey
   1233  4261				   MachineIs2600
   1234  4261		       a2 00		      ldx	#0
   1235  4263		       8a		      txa
   1236  4264				   clearmem
   1237  4264		       e8		      inx
   1238  4265		       9a		      txs
   1239  4266		       48		      pha
   1240  4267		       d0 fb		      bne	clearmem
   1241  4269		       84 9c		      sty	temp1
   1242  426b					      ifnconst	multisprite
   1243  426b				  -	      ifconst	pfrowheight
   1244  426b				  -	      lda	#pfrowheight
   1245  426b					      else
   1246  426b				  -	      ifconst	pfres
   1247  426b				  -	      lda	#(96/pfres)
   1248  426b					      else
   1249  426b		       a9 08		      lda	#8
   1250  426d					      endif
   1251  426d					      endif
   1252  426d		       85 ef		      sta	playfieldpos
   1253  426f					      endif
   1254  426f		       a2 05		      ldx	#5
   1255  4271				   initscore
   1256  4271		       a9 74		      lda	#<scoretable
   1257  4273		       95 96		      sta	scorepointers,x
   1258  4275		       ca		      dex
   1259  4276		       10 f9		      bpl	initscore
   1260  4278		       a9 01		      lda	#1
   1261  427a		       85 0a		      sta	CTRLPF
   1262  427c		       0d 84 02 	      ora	INTIM
   1263  427f		       85 a2		      sta	rand
   1264  4281
   1265  4281				  -	      ifconst	multisprite
   1266  4281				  -	      jsr	multisprite_setup
   1267  4281					      endif
   1268  4281
   1269  4281				  -	      ifnconst	bankswitch
   1270  4281				  -	      jmp	game
   1271  4281					      else
   1272  4281		       a9 8f		      lda	#>(game-1)
   1273  4283		       48		      pha
   1274  4284		       a9 ff		      lda	#<(game-1)
   1275  4286		       48		      pha
   1276  4287		       48		      pha
   1277  4288		       48		      pha
   1278  4289		       a2 01		      ldx	#1
   1279  428b		       4c eb ff 	      jmp	BS_jsr
   1280  428e					      endif
   1281  428e							; playfield drawing routines
   1282  428e							; you get a 32x12 bitmapped display in a single color :)
   1283  428e							; 0-31 and 0-11
   1284  428e
   1285  428e				   pfclear		; clears playfield - or fill with pattern
   1286  428e				  -	      ifconst	pfres
   1287  428e				  -	      ldx	#pfres*pfwidth-1
   1288  428e					      else
   1289  428e		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
   1290  4290					      endif
   1291  4290				   pfclear_loop
   1292  4290					      ifnconst	superchip
   1293  4290		       95 a4		      sta	playfield,x
   1294  4292				  -	      else
   1295  4292				  -	      sta	playfield-128,x
   1296  4292					      endif
   1297  4292		       ca		      dex
   1298  4293		       10 fb		      bpl	pfclear_loop
      0  4295					      RETURN
      1  4295				  -	      ifnconst	bankswitch
      2  4295				  -	      rts
      3  4295					      else
      4  4295		       4c dd ff 	      jmp	BS_return
      5  4298					      endif
   1300  4298
   1301  4298				   setuppointers
   1302  4298		       86 9d		      stx	temp2	; store on.off.flip value
   1303  429a		       aa		      tax		; put x-value in x 
   1304  429b		       4a		      lsr
   1305  429c		       4a		      lsr
   1306  429d		       4a		      lsr		; divide x pos by 8 
   1307  429e		       85 9c		      sta	temp1
   1308  42a0		       98		      tya
   1309  42a1		       0a		      asl
   1310  42a2					      if	pfwidth=4
   1311  42a2		       0a		      asl		; multiply y pos by 4
   1312  42a3					      endif		; else multiply by 2
   1313  42a3		       18		      clc
   1314  42a4		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   1315  42a6		       a8		      tay		; put the value in y
   1316  42a7		       a5 9d		      lda	temp2	; restore on.off.flip value
   1317  42a9		       60		      rts
   1318  42aa
   1319  42aa				   pfread
   1320  42aa							;x=xvalue, y=yvalue
   1321  42aa		       20 98 f2 	      jsr	setuppointers
   1322  42ad		       bd 42 f3 	      lda	setbyte,x
   1323  42b0		       39 a4 00 	      and	playfield,y
   1324  42b3		       5d 42 f3 	      eor	setbyte,x
   1325  42b6							; beq readzero
   1326  42b6							; lda #1
   1327  42b6							; readzero
      0  42b6					      RETURN
      1  42b6				  -	      ifnconst	bankswitch
      2  42b6				  -	      rts
      3  42b6					      else
      4  42b6		       4c dd ff 	      jmp	BS_return
      5  42b9					      endif
   1329  42b9
   1330  42b9				   pfpixel
   1331  42b9							;x=xvalue, y=yvalue, a=0,1,2
   1332  42b9		       20 98 f2 	      jsr	setuppointers
   1333  42bc
   1334  42bc					      ifconst	bankswitch
   1335  42bc		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1336  42be		       f0 0f		      beq	pixelon_r	; if "on" go to on
   1337  42c0		       4a		      lsr
   1338  42c1		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   1339  42c3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1340  42c6		       5d 42 f3 	      eor	setbyte,x
   1341  42c9				  -	      ifconst	superchip
   1342  42c9				  -	      sta	playfield-128,y
   1343  42c9					      else
   1344  42c9		       99 a4 00 	      sta	playfield,y
   1345  42cc					      endif
      0  42cc					      RETURN
      1  42cc				  -	      ifnconst	bankswitch
      2  42cc				  -	      rts
      3  42cc					      else
      4  42cc		       4c dd ff 	      jmp	BS_return
      5  42cf					      endif
   1347  42cf				   pixelon_r
   1348  42cf		       b9 a4 00 	      lda	playfield,y
   1349  42d2		       1d 42 f3 	      ora	setbyte,x
   1350  42d5				  -	      ifconst	superchip
   1351  42d5				  -	      sta	playfield-128,y
   1352  42d5					      else
   1353  42d5		       99 a4 00 	      sta	playfield,y
   1354  42d8					      endif
      0  42d8					      RETURN
      1  42d8				  -	      ifnconst	bankswitch
      2  42d8				  -	      rts
      3  42d8					      else
      4  42d8		       4c dd ff 	      jmp	BS_return
      5  42db					      endif
   1356  42db				   pixeloff_r
   1357  42db		       bd 42 f3 	      lda	setbyte,x
   1358  42de		       49 ff		      eor	#$ff
   1359  42e0		       39 a4 00 	      and	playfield,y
   1360  42e3				  -	      ifconst	superchip
   1361  42e3				  -	      sta	playfield-128,y
   1362  42e3					      else
   1363  42e3		       99 a4 00 	      sta	playfield,y
   1364  42e6					      endif
      0  42e6					      RETURN
      1  42e6				  -	      ifnconst	bankswitch
      2  42e6				  -	      rts
      3  42e6					      else
      4  42e6		       4c dd ff 	      jmp	BS_return
      5  42e9					      endif
   1366  42e9
   1367  42e9				  -	      else
   1368  42e9				  -	      jmp	plotpoint
   1369  42e9					      endif
   1370  42e9
   1371  42e9				   pfhline
   1372  42e9							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1373  42e9		       20 98 f2 	      jsr	setuppointers
   1374  42ec		       4c f6 f2 	      jmp	noinc
   1375  42ef				   keepgoing
   1376  42ef		       e8		      inx
   1377  42f0		       8a		      txa
   1378  42f1		       29 07		      and	#7
   1379  42f3		       d0 01		      bne	noinc
   1380  42f5		       c8		      iny
   1381  42f6				   noinc
   1382  42f6		       20 1b f3 	      jsr	plotpoint
   1383  42f9		       e4 9e		      cpx	temp3
   1384  42fb		       30 f2		      bmi	keepgoing
      0  42fd					      RETURN
      1  42fd				  -	      ifnconst	bankswitch
      2  42fd				  -	      rts
      3  42fd					      else
      4  42fd		       4c dd ff 	      jmp	BS_return
      5  4300					      endif
   1386  4300
   1387  4300				   pfvline
   1388  4300							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1389  4300		       20 98 f2 	      jsr	setuppointers
   1390  4303		       84 9c		      sty	temp1	; store memory location offset
   1391  4305		       e6 9e		      inc	temp3	; increase final x by 1 
   1392  4307		       a5 9e		      lda	temp3
   1393  4309		       0a		      asl
   1394  430a					      if	pfwidth=4
   1395  430a		       0a		      asl		; multiply by 4
   1396  430b					      endif		; else multiply by 2
   1397  430b		       85 9e		      sta	temp3	; store it
   1398  430d							; Thanks to Michael Rideout for fixing a bug in this code
   1399  430d							; right now, temp1=y=starting memory location, temp3=final
   1400  430d							; x should equal original x value
   1401  430d				   keepgoingy
   1402  430d		       20 1b f3 	      jsr	plotpoint
   1403  4310		       c8		      iny
   1404  4311		       c8		      iny
   1405  4312					      if	pfwidth=4
   1406  4312		       c8		      iny
   1407  4313		       c8		      iny
   1408  4314					      endif
   1409  4314		       c4 9e		      cpy	temp3
   1410  4316		       30 f5		      bmi	keepgoingy
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c dd ff 	      jmp	BS_return
      5  431b					      endif
   1412  431b
   1413  431b				   plotpoint
   1414  431b		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1415  431d		       f0 0d		      beq	pixelon	; if "on" go to on
   1416  431f		       4a		      lsr
   1417  4320		       b0 14		      bcs	pixeloff	; value is 1 if true
   1418  4322		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1419  4325		       5d 42 f3 	      eor	setbyte,x
   1420  4328				  -	      ifconst	superchip
   1421  4328				  -	      sta	playfield-128,y
   1422  4328					      else
   1423  4328		       99 a4 00 	      sta	playfield,y
   1424  432b					      endif
   1425  432b		       60		      rts
   1426  432c				   pixelon
   1427  432c		       b9 a4 00 	      lda	playfield,y
   1428  432f		       1d 42 f3 	      ora	setbyte,x
   1429  4332				  -	      ifconst	superchip
   1430  4332				  -	      sta	playfield-128,y
   1431  4332					      else
   1432  4332		       99 a4 00 	      sta	playfield,y
   1433  4335					      endif
   1434  4335		       60		      rts
   1435  4336				   pixeloff
   1436  4336		       bd 42 f3 	      lda	setbyte,x
   1437  4339		       49 ff		      eor	#$ff
   1438  433b		       39 a4 00 	      and	playfield,y
   1439  433e				  -	      ifconst	superchip
   1440  433e				  -	      sta	playfield-128,y
   1441  433e					      else
   1442  433e		       99 a4 00 	      sta	playfield,y
   1443  4341					      endif
   1444  4341		       60		      rts
   1445  4342
   1446  4342				   setbyte
   1447  4342					      ifnconst	pfcenter
   1448  4342		       80		      .byte.b	$80
   1449  4343		       40		      .byte.b	$40
   1450  4344		       20		      .byte.b	$20
   1451  4345		       10		      .byte.b	$10
   1452  4346		       08		      .byte.b	$08
   1453  4347		       04		      .byte.b	$04
   1454  4348		       02		      .byte.b	$02
   1455  4349		       01		      .byte.b	$01
   1456  434a					      endif
   1457  434a		       01		      .byte.b	$01
   1458  434b		       02		      .byte.b	$02
   1459  434c		       04		      .byte.b	$04
   1460  434d		       08		      .byte.b	$08
   1461  434e		       10		      .byte.b	$10
   1462  434f		       20		      .byte.b	$20
   1463  4350		       40		      .byte.b	$40
   1464  4351		       80		      .byte.b	$80
   1465  4352		       80		      .byte.b	$80
   1466  4353		       40		      .byte.b	$40
   1467  4354		       20		      .byte.b	$20
   1468  4355		       10		      .byte.b	$10
   1469  4356		       08		      .byte.b	$08
   1470  4357		       04		      .byte.b	$04
   1471  4358		       02		      .byte.b	$02
   1472  4359		       01		      .byte.b	$01
   1473  435a		       01		      .byte.b	$01
   1474  435b		       02		      .byte.b	$02
   1475  435c		       04		      .byte.b	$04
   1476  435d		       08		      .byte.b	$08
   1477  435e		       10		      .byte.b	$10
   1478  435f		       20		      .byte.b	$20
   1479  4360		       40		      .byte.b	$40
   1480  4361		       80		      .byte.b	$80
   1481  4362				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1482  4362		       d0 15		      bne	notleft
   1483  4364							;left
   1484  4364				  -	      ifconst	pfres
   1485  4364				  -	      ldx	#pfres*4
   1486  4364					      else
   1487  4364		       a2 30		      ldx	#48
   1488  4366					      endif
   1489  4366				   leftloop
   1490  4366		       b5 a3		      lda	playfield-1,x
   1491  4368		       4a		      lsr
   1492  4369
   1493  4369				  -	      ifconst	superchip
   1494  4369				  -	      lda	playfield-2,x
   1495  4369				  -	      rol
   1496  4369				  -	      sta	playfield-130,x
   1497  4369				  -	      lda	playfield-3,x
   1498  4369				  -	      ror
   1499  4369				  -	      sta	playfield-131,x
   1500  4369				  -	      lda	playfield-4,x
   1501  4369				  -	      rol
   1502  4369				  -	      sta	playfield-132,x
   1503  4369				  -	      lda	playfield-1,x
   1504  4369				  -	      ror
   1505  4369				  -	      sta	playfield-129,x
   1506  4369					      else
   1507  4369		       36 a2		      rol	playfield-2,x
   1508  436b		       76 a1		      ror	playfield-3,x
   1509  436d		       36 a0		      rol	playfield-4,x
   1510  436f		       76 a3		      ror	playfield-1,x
   1511  4371					      endif
   1512  4371
   1513  4371		       8a		      txa
   1514  4372		       cb 04		      sbx	#4
   1515  4374		       d0 f0		      bne	leftloop
      0  4376					      RETURN
      1  4376				  -	      ifnconst	bankswitch
      2  4376				  -	      rts
      3  4376					      else
      4  4376		       4c dd ff 	      jmp	BS_return
      5  4379					      endif
   1517  4379
   1518  4379				   notleft
   1519  4379		       4a		      lsr
   1520  437a		       90 15		      bcc	notright
   1521  437c							;right
   1522  437c
   1523  437c				  -	      ifconst	pfres
   1524  437c				  -	      ldx	#pfres*4
   1525  437c					      else
   1526  437c		       a2 30		      ldx	#48
   1527  437e					      endif
   1528  437e				   rightloop
   1529  437e		       b5 a0		      lda	playfield-4,x
   1530  4380		       4a		      lsr
   1531  4381				  -	      ifconst	superchip
   1532  4381				  -	      lda	playfield-3,x
   1533  4381				  -	      rol
   1534  4381				  -	      sta	playfield-131,x
   1535  4381				  -	      lda	playfield-2,x
   1536  4381				  -	      ror
   1537  4381				  -	      sta	playfield-130,x
   1538  4381				  -	      lda	playfield-1,x
   1539  4381				  -	      rol
   1540  4381				  -	      sta	playfield-129,x
   1541  4381				  -	      lda	playfield-4,x
   1542  4381				  -	      ror
   1543  4381				  -	      sta	playfield-132,x
   1544  4381					      else
   1545  4381		       36 a1		      rol	playfield-3,x
   1546  4383		       76 a2		      ror	playfield-2,x
   1547  4385		       36 a3		      rol	playfield-1,x
   1548  4387		       76 a0		      ror	playfield-4,x
   1549  4389					      endif
   1550  4389		       8a		      txa
   1551  438a		       cb 04		      sbx	#4
   1552  438c		       d0 f0		      bne	rightloop
      0  438e					      RETURN
      1  438e				  -	      ifnconst	bankswitch
      2  438e				  -	      rts
      3  438e					      else
      4  438e		       4c dd ff 	      jmp	BS_return
      5  4391					      endif
   1554  4391
   1555  4391				   notright
   1556  4391		       4a		      lsr
   1557  4392		       90 4b		      bcc	notup
   1558  4394							;up
   1559  4394		       4a		      lsr
   1560  4395		       90 02		      bcc	onedecup
   1561  4397		       c6 ef		      dec	playfieldpos
   1562  4399				   onedecup
   1563  4399		       c6 ef		      dec	playfieldpos
   1564  439b		       f0 02		      beq	shiftdown
   1565  439d		       10 3d		      bpl	noshiftdown2
   1566  439f				   shiftdown
   1567  439f				  -	      ifconst	pfrowheight
   1568  439f				  -	      lda	#pfrowheight
   1569  439f					      else
   1570  439f					      ifnconst	pfres
   1571  439f		       a9 08		      lda	#8
   1572  43a1				  -	      else
   1573  43a1				  -	      lda	#(96/pfres)	; try to come close to the real size
   1574  43a1					      endif
   1575  43a1					      endif
   1576  43a1
   1577  43a1		       85 ef		      sta	playfieldpos
   1578  43a3		       a5 a7		      lda	playfield+3
   1579  43a5		       85 9f		      sta	temp4
   1580  43a7		       a5 a6		      lda	playfield+2
   1581  43a9		       85 9e		      sta	temp3
   1582  43ab		       a5 a5		      lda	playfield+1
   1583  43ad		       85 9d		      sta	temp2
   1584  43af		       a5 a4		      lda	playfield
   1585  43b1		       85 9c		      sta	temp1
   1586  43b3		       a2 00		      ldx	#0
   1587  43b5				   up2
   1588  43b5		       b5 a8		      lda	playfield+4,x
   1589  43b7				  -	      ifconst	superchip
   1590  43b7				  -	      sta	playfield-128,x
   1591  43b7				  -	      lda	playfield+5,x
   1592  43b7				  -	      sta	playfield-127,x
   1593  43b7				  -	      lda	playfield+6,x
   1594  43b7				  -	      sta	playfield-126,x
   1595  43b7				  -	      lda	playfield+7,x
   1596  43b7				  -	      sta	playfield-125,x
   1597  43b7					      else
   1598  43b7		       95 a4		      sta	playfield,x
   1599  43b9		       b5 a9		      lda	playfield+5,x
   1600  43bb		       95 a5		      sta	playfield+1,x
   1601  43bd		       b5 aa		      lda	playfield+6,x
   1602  43bf		       95 a6		      sta	playfield+2,x
   1603  43c1		       b5 ab		      lda	playfield+7,x
   1604  43c3		       95 a7		      sta	playfield+3,x
   1605  43c5					      endif
   1606  43c5		       8a		      txa
   1607  43c6		       cb fc		      sbx	#252
   1608  43c8				  -	      ifconst	pfres
   1609  43c8				  -	      cpx	#(pfres-1)*4
   1610  43c8					      else
   1611  43c8		       e0 2c		      cpx	#44
   1612  43ca					      endif
   1613  43ca		       d0 e9		      bne	up2
   1614  43cc
   1615  43cc		       a5 9f		      lda	temp4
   1616  43ce
   1617  43ce				  -	      ifconst	superchip
   1618  43ce				  -	      ifconst	pfres
   1619  43ce				  -	      sta	playfield+pfres*4-129
   1620  43ce				  -	      lda	temp3
   1621  43ce				  -	      sta	playfield+pfres*4-130
   1622  43ce				  -	      lda	temp2
   1623  43ce				  -	      sta	playfield+pfres*4-131
   1624  43ce				  -	      lda	temp1
   1625  43ce				  -	      sta	playfield+pfres*4-132
   1626  43ce				  -	      else
   1627  43ce				  -	      sta	playfield+47-128
   1628  43ce				  -	      lda	temp3
   1629  43ce				  -	      sta	playfield+46-128
   1630  43ce				  -	      lda	temp2
   1631  43ce				  -	      sta	playfield+45-128
   1632  43ce				  -	      lda	temp1
   1633  43ce				  -	      sta	playfield+44-128
   1634  43ce				  -	      endif
   1635  43ce					      else
   1636  43ce				  -	      ifconst	pfres
   1637  43ce				  -	      sta	playfield+pfres*4-1
   1638  43ce				  -	      lda	temp3
   1639  43ce				  -	      sta	playfield+pfres*4-2
   1640  43ce				  -	      lda	temp2
   1641  43ce				  -	      sta	playfield+pfres*4-3
   1642  43ce				  -	      lda	temp1
   1643  43ce				  -	      sta	playfield+pfres*4-4
   1644  43ce					      else
   1645  43ce		       85 d3		      sta	playfield+47
   1646  43d0		       a5 9e		      lda	temp3
   1647  43d2		       85 d2		      sta	playfield+46
   1648  43d4		       a5 9d		      lda	temp2
   1649  43d6		       85 d1		      sta	playfield+45
   1650  43d8		       a5 9c		      lda	temp1
   1651  43da		       85 d0		      sta	playfield+44
   1652  43dc					      endif
   1653  43dc					      endif
   1654  43dc				   noshiftdown2
      0  43dc					      RETURN
      1  43dc				  -	      ifnconst	bankswitch
      2  43dc				  -	      rts
      3  43dc					      else
      4  43dc		       4c dd ff 	      jmp	BS_return
      5  43df					      endif
   1656  43df
   1657  43df
   1658  43df				   notup
   1659  43df							;down
   1660  43df		       4a		      lsr
   1661  43e0		       b0 02		      bcs	oneincup
   1662  43e2		       e6 ef		      inc	playfieldpos
   1663  43e4				   oneincup
   1664  43e4		       e6 ef		      inc	playfieldpos
   1665  43e6		       a5 ef		      lda	playfieldpos
   1666  43e8
   1667  43e8				  -	      ifconst	pfrowheight
   1668  43e8				  -	      cmp	#pfrowheight+1
   1669  43e8					      else
   1670  43e8					      ifnconst	pfres
   1671  43e8		       c9 09		      cmp	#9
   1672  43ea				  -	      else
   1673  43ea				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1674  43ea					      endif
   1675  43ea					      endif
   1676  43ea
   1677  43ea		       90 3b		      bcc	noshiftdown
   1678  43ec		       a9 01		      lda	#1
   1679  43ee		       85 ef		      sta	playfieldpos
   1680  43f0
   1681  43f0				  -	      ifconst	pfres
   1682  43f0				  -	      lda	playfield+pfres*4-1
   1683  43f0				  -	      sta	temp4
   1684  43f0				  -	      lda	playfield+pfres*4-2
   1685  43f0				  -	      sta	temp3
   1686  43f0				  -	      lda	playfield+pfres*4-3
   1687  43f0				  -	      sta	temp2
   1688  43f0				  -	      lda	playfield+pfres*4-4
   1689  43f0					      else
   1690  43f0		       a5 d3		      lda	playfield+47
   1691  43f2		       85 9f		      sta	temp4
   1692  43f4		       a5 d2		      lda	playfield+46
   1693  43f6		       85 9e		      sta	temp3
   1694  43f8		       a5 d1		      lda	playfield+45
   1695  43fa		       85 9d		      sta	temp2
   1696  43fc		       a5 d0		      lda	playfield+44
   1697  43fe					      endif
   1698  43fe
   1699  43fe		       85 9c		      sta	temp1
   1700  4400
   1701  4400				  -	      ifconst	pfres
   1702  4400				  -	      ldx	#(pfres-1)*4
   1703  4400					      else
   1704  4400		       a2 2c		      ldx	#44
   1705  4402					      endif
   1706  4402				   down2
   1707  4402		       b5 a3		      lda	playfield-1,x
   1708  4404				  -	      ifconst	superchip
   1709  4404				  -	      sta	playfield-125,x
   1710  4404				  -	      lda	playfield-2,x
   1711  4404				  -	      sta	playfield-126,x
   1712  4404				  -	      lda	playfield-3,x
   1713  4404				  -	      sta	playfield-127,x
   1714  4404				  -	      lda	playfield-4,x
   1715  4404				  -	      sta	playfield-128,x
   1716  4404					      else
   1717  4404		       95 a7		      sta	playfield+3,x
   1718  4406		       b5 a2		      lda	playfield-2,x
   1719  4408		       95 a6		      sta	playfield+2,x
   1720  440a		       b5 a1		      lda	playfield-3,x
   1721  440c		       95 a5		      sta	playfield+1,x
   1722  440e		       b5 a0		      lda	playfield-4,x
   1723  4410		       95 a4		      sta	playfield,x
   1724  4412					      endif
   1725  4412		       8a		      txa
   1726  4413		       cb 04		      sbx	#4
   1727  4415		       d0 eb		      bne	down2
   1728  4417
   1729  4417		       a5 9f		      lda	temp4
   1730  4419				  -	      ifconst	superchip
   1731  4419				  -	      sta	playfield-125
   1732  4419				  -	      lda	temp3
   1733  4419				  -	      sta	playfield-126
   1734  4419				  -	      lda	temp2
   1735  4419				  -	      sta	playfield-127
   1736  4419				  -	      lda	temp1
   1737  4419				  -	      sta	playfield-128
   1738  4419					      else
   1739  4419		       85 a7		      sta	playfield+3
   1740  441b		       a5 9e		      lda	temp3
   1741  441d		       85 a6		      sta	playfield+2
   1742  441f		       a5 9d		      lda	temp2
   1743  4421		       85 a5		      sta	playfield+1
   1744  4423		       a5 9c		      lda	temp1
   1745  4425		       85 a4		      sta	playfield
   1746  4427					      endif
   1747  4427				   noshiftdown
      0  4427					      RETURN
      1  4427				  -	      ifnconst	bankswitch
      2  4427				  -	      rts
      3  4427					      else
      4  4427		       4c dd ff 	      jmp	BS_return
      5  442a					      endif
   1749  442a							;standard routines needed for pretty much all games
   1750  442a							; just the random number generator is left - maybe we should remove this asm file altogether?
   1751  442a							; repositioning code and score pointer setup moved to overscan
   1752  442a							; read switches, joysticks now compiler generated (more efficient)
   1753  442a
   1754  442a				   randomize
   1755  442a		       a5 a2		      lda	rand
   1756  442c		       4a		      lsr
   1757  442d				  -	      ifconst	rand16
   1758  442d				  -	      rol	rand16
   1759  442d					      endif
   1760  442d		       90 02		      bcc	noeor
   1761  442f		       49 b4		      eor	#$B4
   1762  4431				   noeor
   1763  4431		       85 a2		      sta	rand
   1764  4433				  -	      ifconst	rand16
   1765  4433				  -	      eor	rand16
   1766  4433					      endif
      0  4433					      RETURN
      1  4433				  -	      ifnconst	bankswitch
      2  4433				  -	      rts
      3  4433					      else
      4  4433		       4c dd ff 	      jmp	BS_return
      5  4436					      endif
   1768  4436				   drawscreen
   1769  4436				  -	      ifconst	debugscore
   1770  4436				  -	      ldx	#14
   1771  4436				  -	      lda	INTIM	; display # cycles left in the score
   1772  4436				  -
   1773  4436				  -	      ifconst	mincycles
   1774  4436				  -	      lda	mincycles
   1775  4436				  -	      cmp	INTIM
   1776  4436				  -	      lda	mincycles
   1777  4436				  -	      bcc	nochange
   1778  4436				  -	      lda	INTIM
   1779  4436				  -	      sta	mincycles
   1780  4436				  -nochange
   1781  4436				  -	      endif
   1782  4436				  -
   1783  4436				  -			; cmp #$2B
   1784  4436				  -			; bcs no_cycles_left
   1785  4436				  -	      bmi	cycles_left
   1786  4436				  -	      ldx	#64
   1787  4436				  -	      eor	#$ff	;make negative
   1788  4436				  -cycles_left
   1789  4436				  -	      stx	scorecolor
   1790  4436				  -	      and	#$7f	; clear sign bit
   1791  4436				  -	      tax
   1792  4436				  -	      lda	scorebcd,x
   1793  4436				  -	      sta	score+2
   1794  4436				  -	      lda	scorebcd1,x
   1795  4436				  -	      sta	score+1
   1796  4436				  -	      jmp	done_debugscore
   1797  4436				  -scorebcd
   1798  4436				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1799  4436				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1800  4436				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1801  4436				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1802  4436				  -scorebcd1
   1803  4436				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1804  4436				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1805  4436				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1806  4436				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1807  4436				  -done_debugscore
   1808  4436					      endif
   1809  4436
   1810  4436				  -	      ifconst	debugcycles
   1811  4436				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1812  4436				  -			; cmp #$2B
   1813  4436				  -			; BCC overscan
   1814  4436				  -	      bmi	overscan
   1815  4436				  -	      sta	COLUBK
   1816  4436				  -	      bcs	doneoverscan
   1817  4436					      endif
   1818  4436
   1819  4436				   overscan
   1820  4436				  -	      ifconst	interlaced
   1821  4436				  -	      PHP
   1822  4436				  -	      PLA
   1823  4436				  -	      EOR	#4	; flip interrupt bit
   1824  4436				  -	      PHA
   1825  4436				  -	      PLP
   1826  4436				  -	      AND	#4	; isolate the interrupt bit
   1827  4436				  -	      TAX		; save it for later
   1828  4436					      endif
   1829  4436
   1830  4436				   overscanloop
   1831  4436		       ad 84 02 	      lda	INTIM	;wait for sync
   1832  4439		       30 fb		      bmi	overscanloop
   1833  443b				   doneoverscan
   1834  443b
   1835  443b							;do VSYNC
   1836  443b
   1837  443b				  -	      ifconst	interlaced
   1838  443b				  -	      CPX	#4
   1839  443b				  -	      BNE	oddframevsync
   1840  443b					      endif
   1841  443b
   1842  443b		       a9 02		      lda	#2
   1843  443d		       85 02		      sta	WSYNC
   1844  443f		       85 00		      sta	VSYNC
   1845  4441		       85 02		      STA	WSYNC
   1846  4443		       85 02		      STA	WSYNC
   1847  4445		       4a		      lsr
   1848  4446		       85 02		      STA	WSYNC
   1849  4448		       85 00		      STA	VSYNC
   1850  444a		       85 01		      sta	VBLANK
   1851  444c					      ifnconst	overscan_time
   1852  444c		       a9 a5		      lda	#37+128
   1853  444e				  -	      else
   1854  444e				  -	      lda	#overscan_time+128
   1855  444e					      endif
   1856  444e		       8d 96 02 	      sta	TIM64T
   1857  4451
   1858  4451				  -	      ifconst	interlaced
   1859  4451				  -	      jmp	postsync
   1860  4451				  -
   1861  4451				  -oddframevsync
   1862  4451				  -	      sta	WSYNC
   1863  4451				  -
   1864  4451				  -	      LDA	($80,X)	; 11 waste
   1865  4451				  -	      LDA	($80,X)	; 11 waste
   1866  4451				  -	      LDA	($80,X)	; 11 waste
   1867  4451				  -
   1868  4451				  -	      lda	#2
   1869  4451				  -	      sta	VSYNC
   1870  4451				  -	      sta	WSYNC
   1871  4451				  -	      sta	WSYNC
   1872  4451				  -	      sta	WSYNC
   1873  4451				  -
   1874  4451				  -	      LDA	($80,X)	; 11 waste
   1875  4451				  -	      LDA	($80,X)	; 11 waste
   1876  4451				  -	      LDA	($80,X)	; 11 waste
   1877  4451				  -
   1878  4451				  -	      lda	#0
   1879  4451				  -	      sta	VSYNC
   1880  4451				  -	      sta	VBLANK
   1881  4451				  -	      ifnconst	overscan_time
   1882  4451				  -	      lda	#37+128
   1883  4451				  -	      else
   1884  4451				  -	      lda	#overscan_time+128
   1885  4451				  -	      endif
   1886  4451				  -	      sta	TIM64T
   1887  4451				  -
   1888  4451				  -postsync
   1889  4451					      endif
   1890  4451
   1891  4451				  -	      ifconst	legacy
   1892  4451				  -	      if	legacy < 100
   1893  4451				  -	      ldx	#4
   1894  4451				  -adjustloop
   1895  4451				  -	      lda	player0x,x
   1896  4451				  -	      sec
   1897  4451				  -	      sbc	#14	;?
   1898  4451				  -	      sta	player0x,x
   1899  4451				  -	      dex
   1900  4451				  -	      bpl	adjustloop
   1901  4451				  -	      endif
   1902  4451					      endif
   1903  4451				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1904  4451				  -	      repeat	($fa-(<*))
   1905  4451				  -	      nop
   1906  4451				  -	      repend
   1907  4451					      endif
   1908  4451		       85 02		      sta	WSYNC
   1909  4453		       a2 04		      ldx	#4
      0  4455					      SLEEP	3
      1  4455				   .CYCLES    SET	3
      2  4455
      3  4455				  -	      IF	.CYCLES < 2
      4  4455				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4455				  -	      ERR
      6  4455					      ENDIF
      7  4455
      8  4455					      IF	.CYCLES & 1
      9  4455					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4455		       04 00		      nop	0
     11  4457				  -	      ELSE
     12  4457				  -	      bit	VSYNC
     13  4457					      ENDIF
     14  4457				   .CYCLES    SET	.CYCLES - 3
     15  4457					      ENDIF
     16  4457
     17  4457				  -	      REPEAT	.CYCLES / 2
     18  4457				  -	      nop
     19  4457					      REPEND
   1911  4457				   HorPosLoop		; 5
   1912  4457		       b5 80		      lda	player0x,X	;+4 9
   1913  4459		       38		      sec		;+2 11
   1914  445a				   DivideLoop
   1915  445a		       e9 0f		      sbc	#15
   1916  445c		       b0 fc		      bcs	DivideLoop	;+4 15
   1917  445e		       95 9c		      sta	temp1,X	;+4 19
   1918  4460		       95 10		      sta	RESP0,X	;+4 23
   1919  4462		       85 02		      sta	WSYNC
   1920  4464		       ca		      dex
   1921  4465		       10 f0		      bpl	HorPosLoop	;+5 5
   1922  4467							; 4
   1923  4467
   1924  4467		       a2 04		      ldx	#4
   1925  4469		       b4 9c		      ldy	temp1,X
   1926  446b		       b9 c7 f3 	      lda	repostable-256,Y
   1927  446e		       95 20		      sta	HMP0,X	;+14 18
   1928  4470
   1929  4470		       ca		      dex
   1930  4471		       b4 9c		      ldy	temp1,X
   1931  4473		       b9 c7 f3 	      lda	repostable-256,Y
   1932  4476		       95 20		      sta	HMP0,X	;+14 32
   1933  4478
   1934  4478		       ca		      dex
   1935  4479		       b4 9c		      ldy	temp1,X
   1936  447b		       b9 c7 f3 	      lda	repostable-256,Y
   1937  447e		       95 20		      sta	HMP0,X	;+14 46
   1938  4480
   1939  4480		       ca		      dex
   1940  4481		       b4 9c		      ldy	temp1,X
   1941  4483		       b9 c7 f3 	      lda	repostable-256,Y
   1942  4486		       95 20		      sta	HMP0,X	;+14 60
   1943  4488
   1944  4488		       ca		      dex
   1945  4489		       b4 9c		      ldy	temp1,X
   1946  448b		       b9 c7 f3 	      lda	repostable-256,Y
   1947  448e		       95 20		      sta	HMP0,X	;+14 74
   1948  4490
   1949  4490		       85 02		      sta	WSYNC
   1950  4492
   1951  4492		       85 2a		      sta	HMOVE	;+3 3
   1952  4494
   1953  4494
   1954  4494				  -	      ifconst	legacy
   1955  4494				  -	      if	legacy < 100
   1956  4494				  -	      ldx	#4
   1957  4494				  -adjustloop2
   1958  4494				  -	      lda	player0x,x
   1959  4494				  -	      clc
   1960  4494				  -	      adc	#14	;?
   1961  4494				  -	      sta	player0x,x
   1962  4494				  -	      dex
   1963  4494				  -	      bpl	adjustloop2
   1964  4494				  -	      endif
   1965  4494					      endif
   1966  4494
   1967  4494
   1968  4494
   1969  4494
   1970  4494							;set score pointers
   1971  4494		       a7 95		      lax	score+2
   1972  4496		       20 c7 f4 	      jsr	scorepointerset
   1973  4499		       84 9b		      sty	scorepointers+5
   1974  449b		       86 98		      stx	scorepointers+2
   1975  449d		       a7 94		      lax	score+1
   1976  449f		       20 c7 f4 	      jsr	scorepointerset
   1977  44a2		       84 9a		      sty	scorepointers+4
   1978  44a4		       86 97		      stx	scorepointers+1
   1979  44a6		       a7 93		      lax	score
   1980  44a8		       20 c7 f4 	      jsr	scorepointerset
   1981  44ab		       84 99		      sty	scorepointers+3
   1982  44ad		       86 96		      stx	scorepointers
   1983  44af
   1984  44af				   vblk
   1985  44af							; run possible vblank bB code
   1986  44af				  -	      ifconst	vblank_bB_code
   1987  44af				  -	      jsr	vblank_bB_code
   1988  44af					      endif
   1989  44af				   vblk2
   1990  44af		       ad 84 02 	      LDA	INTIM
   1991  44b2		       30 fb		      bmi	vblk2
   1992  44b4		       4c 00 f0 	      jmp	kernel
   1993  44b7
   1994  44b7
   1995  44b7		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1996  44c0		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1997  44c7				   repostable
   1998  44c7
   1999  44c7				   scorepointerset
   2000  44c7		       29 0f		      and	#$0F
   2001  44c9		       0a		      asl
   2002  44ca		       0a		      asl
   2003  44cb		       0a		      asl
   2004  44cc		       69 74		      adc	#<scoretable
   2005  44ce		       a8		      tay
   2006  44cf		       8a		      txa
   2007  44d0							; and #$F0
   2008  44d0							; lsr
   2009  44d0		       4b f0		      asr	#$F0
   2010  44d2		       69 74		      adc	#<scoretable
   2011  44d4		       aa		      tax
   2012  44d5		       60		      rts
   2013  44d6							;bB.asm
   2014  44d6							; bB.asm file is split here
   2015  44d6					      if	ECHOFIRST
      2718 bytes of ROM space left in bank 4
   2016  44d6					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   2017  44d6					      endif
   2018  44d6		       00 01	   ECHOFIRST  =	1
   2019  44d6
   2020  44d6
   2021  44d6							; feel free to modify the score graphics - just keep each digit 8 high
   2022  44d6							; and keep the conditional compilation stuff intact
   2023  44d6				  -	      ifconst	ROM2k
   2024  44d6				  -	      ORG	$F7AC-8
   2025  44d6					      else
   2026  44d6					      ifconst	bankswitch
   2027  44d6				  -	      if	bankswitch == 8
   2028  44d6				  -	      ORG	$2F94-bscode_length
   2029  44d6				  -	      RORG	$FF94-bscode_length
   2030  44d6					      endif
   2031  44d6					      if	bankswitch == 16
   2032  4f74					      ORG	$4F94-bscode_length
   2033  4f74					      RORG	$FF94-bscode_length
   2034  4f74					      endif
   2035  4f74				  -	      if	bankswitch == 32
   2036  4f74				  -	      ORG	$8F94-bscode_length
   2037  4f74				  -	      RORG	$FF94-bscode_length
   2038  4f74					      endif
   2039  4f74				  -	      if	bankswitch == 64
   2040  4f74				  -	      ORG	$10F80-bscode_length
   2041  4f74				  -	      RORG	$1FF80-bscode_length
   2042  4f74					      endif
   2043  4f74				  -	      else
   2044  4f74				  -	      ORG	$FF9C
   2045  4f74					      endif
   2046  4f74					      endif
   2047  4f74
   2048  4f74							; font equates
   2049  4f74		       00 01	   .21stcentury =	1
   2050  4f74		       00 02	   alarmclock =	2
   2051  4f74		       00 03	   handwritten =	3
   2052  4f74		       00 04	   interrupted =	4
   2053  4f74		       00 05	   retroputer =	5
   2054  4f74		       00 06	   whimsey    =	6
   2055  4f74		       00 07	   tiny       =	7
   2056  4f74
   2057  4f74				   scoretable
   2058  4f74
   2059  4f74				  -	      ifconst	font
   2060  4f74				  -	      if	font == .21stcentury
   2061  4f74				  -	      include	"score_graphics.asm.21stcentury"
   2062  4f74				  -	      endif
   2063  4f74				  -	      if	font == alarmclock
   2064  4f74				  -	      include	"score_graphics.asm.alarmclock"
   2065  4f74				  -	      endif
   2066  4f74				  -	      if	font == handwritten
   2067  4f74				  -	      include	"score_graphics.asm.handwritten"
   2068  4f74				  -	      endif
   2069  4f74				  -	      if	font == interrupted
   2070  4f74				  -	      include	"score_graphics.asm.interrupted"
   2071  4f74				  -	      endif
   2072  4f74				  -	      if	font == retroputer
   2073  4f74				  -	      include	"score_graphics.asm.retroputer"
   2074  4f74				  -	      endif
   2075  4f74				  -	      if	font == whimsey
   2076  4f74				  -	      include	"score_graphics.asm.whimsey"
   2077  4f74				  -	      endif
   2078  4f74				  -	      if	font == tiny
   2079  4f74				  -	      include	"score_graphics.asm.tiny"
   2080  4f74				  -	      endif
   2081  4f74					      else		; default font
   2082  4f74
   2083  4f74		       3c		      .byte.b	%00111100
   2084  4f75		       66		      .byte.b	%01100110
   2085  4f76		       66		      .byte.b	%01100110
   2086  4f77		       66		      .byte.b	%01100110
   2087  4f78		       66		      .byte.b	%01100110
   2088  4f79		       66		      .byte.b	%01100110
   2089  4f7a		       66		      .byte.b	%01100110
   2090  4f7b		       3c		      .byte.b	%00111100
   2091  4f7c
   2092  4f7c		       7e		      .byte.b	%01111110
   2093  4f7d		       18		      .byte.b	%00011000
   2094  4f7e		       18		      .byte.b	%00011000
   2095  4f7f		       18		      .byte.b	%00011000
   2096  4f80		       18		      .byte.b	%00011000
   2097  4f81		       38		      .byte.b	%00111000
   2098  4f82		       18		      .byte.b	%00011000
   2099  4f83		       08		      .byte.b	%00001000
   2100  4f84
   2101  4f84		       7e		      .byte.b	%01111110
   2102  4f85		       60		      .byte.b	%01100000
   2103  4f86		       60		      .byte.b	%01100000
   2104  4f87		       3c		      .byte.b	%00111100
   2105  4f88		       06		      .byte.b	%00000110
   2106  4f89		       06		      .byte.b	%00000110
   2107  4f8a		       46		      .byte.b	%01000110
   2108  4f8b		       3c		      .byte.b	%00111100
   2109  4f8c
   2110  4f8c		       3c		      .byte.b	%00111100
   2111  4f8d		       46		      .byte.b	%01000110
   2112  4f8e		       06		      .byte.b	%00000110
   2113  4f8f		       06		      .byte.b	%00000110
   2114  4f90		       1c		      .byte.b	%00011100
   2115  4f91		       06		      .byte.b	%00000110
   2116  4f92		       46		      .byte.b	%01000110
   2117  4f93		       3c		      .byte.b	%00111100
   2118  4f94
   2119  4f94		       0c		      .byte.b	%00001100
   2120  4f95		       0c		      .byte.b	%00001100
   2121  4f96		       7e		      .byte.b	%01111110
   2122  4f97		       4c		      .byte.b	%01001100
   2123  4f98		       4c		      .byte.b	%01001100
   2124  4f99		       2c		      .byte.b	%00101100
   2125  4f9a		       1c		      .byte.b	%00011100
   2126  4f9b		       0c		      .byte.b	%00001100
   2127  4f9c
   2128  4f9c		       3c		      .byte.b	%00111100
   2129  4f9d		       46		      .byte.b	%01000110
   2130  4f9e		       06		      .byte.b	%00000110
   2131  4f9f		       06		      .byte.b	%00000110
   2132  4fa0		       3c		      .byte.b	%00111100
   2133  4fa1		       60		      .byte.b	%01100000
   2134  4fa2		       60		      .byte.b	%01100000
   2135  4fa3		       7e		      .byte.b	%01111110
   2136  4fa4
   2137  4fa4		       3c		      .byte.b	%00111100
   2138  4fa5		       66		      .byte.b	%01100110
   2139  4fa6		       66		      .byte.b	%01100110
   2140  4fa7		       66		      .byte.b	%01100110
   2141  4fa8		       7c		      .byte.b	%01111100
   2142  4fa9		       60		      .byte.b	%01100000
   2143  4faa		       62		      .byte.b	%01100010
   2144  4fab		       3c		      .byte.b	%00111100
   2145  4fac
   2146  4fac		       30		      .byte.b	%00110000
   2147  4fad		       30		      .byte.b	%00110000
   2148  4fae		       30		      .byte.b	%00110000
   2149  4faf		       18		      .byte.b	%00011000
   2150  4fb0		       0c		      .byte.b	%00001100
   2151  4fb1		       06		      .byte.b	%00000110
   2152  4fb2		       42		      .byte.b	%01000010
   2153  4fb3		       3e		      .byte.b	%00111110
   2154  4fb4
   2155  4fb4		       3c		      .byte.b	%00111100
   2156  4fb5		       66		      .byte.b	%01100110
   2157  4fb6		       66		      .byte.b	%01100110
   2158  4fb7		       66		      .byte.b	%01100110
   2159  4fb8		       3c		      .byte.b	%00111100
   2160  4fb9		       66		      .byte.b	%01100110
   2161  4fba		       66		      .byte.b	%01100110
   2162  4fbb		       3c		      .byte.b	%00111100
   2163  4fbc
   2164  4fbc		       3c		      .byte.b	%00111100
   2165  4fbd		       46		      .byte.b	%01000110
   2166  4fbe		       06		      .byte.b	%00000110
   2167  4fbf		       3e		      .byte.b	%00111110
   2168  4fc0		       66		      .byte.b	%01100110
   2169  4fc1		       66		      .byte.b	%01100110
   2170  4fc2		       66		      .byte.b	%01100110
   2171  4fc3		       3c		      .byte.b	%00111100
   2172  4fc4
   2173  4fc4					      ifnconst	DPC_kernel_options
   2174  4fc4
   2175  4fc4		       00		      .byte.b	%00000000
   2176  4fc5		       00		      .byte.b	%00000000
   2177  4fc6		       00		      .byte.b	%00000000
   2178  4fc7		       00		      .byte.b	%00000000
   2179  4fc8		       00		      .byte.b	%00000000
   2180  4fc9		       00		      .byte.b	%00000000
   2181  4fca		       00		      .byte.b	%00000000
   2182  4fcb		       00		      .byte.b	%00000000
   2183  4fcc
   2184  4fcc					      endif
   2185  4fcc
   2186  4fcc					      endif
   2187  4fcc
   2188  4fcc				  -	      ifconst	ROM2k
   2189  4fcc				  -	      ORG	$F7FC
   2190  4fcc					      else
   2191  4fcc					      ifconst	bankswitch
   2192  4fcc				  -	      if	bankswitch == 8
   2193  4fcc				  -	      ORG	$2FF4-bscode_length
   2194  4fcc				  -	      RORG	$FFF4-bscode_length
   2195  4fcc					      endif
   2196  4fcc					      if	bankswitch == 16
   2197  4fd4					      ORG	$4FF4-bscode_length
   2198  4fd4					      RORG	$FFF4-bscode_length
   2199  4fd4					      endif
   2200  4fd4				  -	      if	bankswitch == 32
   2201  4fd4				  -	      ORG	$8FF4-bscode_length
   2202  4fd4				  -	      RORG	$FFF4-bscode_length
   2203  4fd4					      endif
   2204  4fd4				  -	      if	bankswitch == 64
   2205  4fd4				  -	      ORG	$10FE0-bscode_length
   2206  4fd4				  -	      RORG	$1FFE0-bscode_length
   2207  4fd4					      endif
   2208  4fd4				  -	      else
   2209  4fd4				  -	      ORG	$FFFC
   2210  4fd4					      endif
   2211  4fd4					      endif
   2212  4fd4							; every bank has this stuff at the same place
   2213  4fd4							; this code can switch to/from any bank at any entry point
   2214  4fd4							; and can preserve register values
   2215  4fd4							; note: lines not starting with a space are not placed in all banks
   2216  4fd4							;
   2217  4fd4							; line below tells the compiler how long this is - do not remove
   2218  4fd4							;size=32
   2219  4fd4
   2220  4fd4				   begin_bscode
   2221  4fd4		       a2 ff		      ldx	#$ff
   2222  4fd6				  -	      ifconst	FASTFETCH	; using DPC+
   2223  4fd6				  -	      stx	FASTFETCH
   2224  4fd6					      endif
   2225  4fd6		       9a		      txs
   2226  4fd7				  -	      if	bankswitch == 64
   2227  4fd7				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   2228  4fd7					      else
   2229  4fd7		       a9 f2		      lda	#>(start-1)
   2230  4fd9					      endif
   2231  4fd9		       48		      pha
   2232  4fda		       a9 4f		      lda	#<(start-1)
   2233  4fdc		       48		      pha
   2234  4fdd
   2235  4fdd				   BS_return
   2236  4fdd		       48		      pha
   2237  4fde		       8a		      txa
   2238  4fdf		       48		      pha
   2239  4fe0		       ba		      tsx
   2240  4fe1
   2241  4fe1					      if	bankswitch != 64
   2242  4fe1		       b5 04		      lda	4,x	; get high byte of return address
   2243  4fe3
   2244  4fe3		       2a		      rol
   2245  4fe4		       2a		      rol
   2246  4fe5		       2a		      rol
   2247  4fe6		       2a		      rol
   2248  4fe7		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   2249  4fe9		       aa		      tax
   2250  4fea		       e8		      inx
   2251  4feb				  -	      else
   2252  4feb				  -	      lda	4,x	; get high byte of return address
   2253  4feb				  -	      tay
   2254  4feb				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   2255  4feb				  -	      sta	4,x
   2256  4feb				  -	      tya
   2257  4feb				  -	      lsr
   2258  4feb				  -	      lsr
   2259  4feb				  -	      lsr
   2260  4feb				  -	      lsr
   2261  4feb				  -	      tax
   2262  4feb				  -	      inx
   2263  4feb					      endif
   2264  4feb
   2265  4feb				   BS_jsr
   2266  4feb		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   2267  4fee		       68		      pla
   2268  4fef		       aa		      tax
   2269  4ff0		       68		      pla
   2270  4ff1		       60		      rts
   2271  4ff2				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   2272  4ff2				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   2273  4ff2				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   2274  4ff2					      endif
   2275  4ff2					      ifconst	bankswitch
   2276  4ff2				  -	      if	bankswitch == 8
   2277  4ff2				  -	      ORG	$2FFC
   2278  4ff2				  -	      RORG	$FFFC
   2279  4ff2					      endif
   2280  4ff2					      if	bankswitch == 16
   2281  4ffc					      ORG	$4FFC
   2282  4ffc					      RORG	$FFFC
   2283  4ffc					      endif
   2284  4ffc				  -	      if	bankswitch == 32
   2285  4ffc				  -	      ORG	$8FFC
   2286  4ffc				  -	      RORG	$FFFC
   2287  4ffc					      endif
   2288  4ffc				  -	      if	bankswitch == 64
   2289  4ffc				  -	      ORG	$10FF0
   2290  4ffc				  -	      RORG	$1FFF0
   2291  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   2292  4ffc				  -	      ORG	$10FF8
   2293  4ffc				  -	      RORG	$1FFF8
   2294  4ffc				  -	      ifconst	superchip
   2295  4ffc				  -	      .byte	"E","F","S","C"
   2296  4ffc				  -	      else
   2297  4ffc				  -	      .byte	"E","F","E","F"
   2298  4ffc				  -	      endif
   2299  4ffc				  -	      ORG	$10FFC
   2300  4ffc				  -	      RORG	$1FFFC
   2301  4ffc					      endif
   2302  4ffc				  -	      else
   2303  4ffc				  -	      ifconst	ROM2k
   2304  4ffc				  -	      ORG	$F7FC
   2305  4ffc				  -	      else
   2306  4ffc				  -	      ORG	$FFFC
   2307  4ffc				  -	      endif
   2308  4ffc					      endif
   2309  4ffc		       50 f2		      .word.w	start
   2310  4ffe		       50 f2		      .word.w	start
